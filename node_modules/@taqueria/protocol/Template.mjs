// Template.ts
import createType from "@taqueria/protocol/Base";
import * as Command from "@taqueria/protocol/Command";
import * as Option from "@taqueria/protocol/Option";
import * as PluginJsonResponse from "@taqueria/protocol/PluginJsonResponse";
import * as PluginResponseEncoding from "@taqueria/protocol/PluginResponseEncoding";
import * as PositionalArg from "@taqueria/protocol/PositionalArg";
import * as RequestArgs from "@taqueria/protocol/RequestArgs";
import * as Verb from "@taqueria/protocol/Verb";
import { z } from "zod";
var handlerSchema = z.union([
  z.string().min(1),
  z.function().args(RequestArgs.schemas.schema).returns(z.union([
    z.void(),
    PluginJsonResponse.schemas.schema,
    PluginJsonResponse.schemas.internalSchema,
    z.promise(
      z.union([
        z.promise(z.void()),
        z.void(),
        PluginJsonResponse.schemas.schema,
        PluginJsonResponse.schemas.internalSchema
      ])
    )
  ]))
]);
var rawSchema5 = z.object({
  template: Verb.rawSchema,
  command: Command.rawSchema,
  description: z.string().min(4),
  hidden: z.preprocess(
    (val) => val ?? false,
    z.boolean()
  ).optional(),
  options: z.preprocess(
    (val) => val ?? [],
    z.array(Option.rawSchema)
  ).optional(),
  positionals: z.preprocess(
    (val) => val ?? [],
    z.array(PositionalArg.rawSchema)
  ).optional(),
  handler: handlerSchema.describe("Template Handler"),
  encoding: PluginResponseEncoding.schemas.schema.optional()
});
var internalSchema = rawSchema5.extend({
  template: Verb.schemas.schema,
  command: Command.schemas.schema,
  options: z.preprocess(
    (val) => val ?? [],
    z.array(Option.schemas.schema)
  ).optional(),
  positionals: z.preprocess(
    (val) => val ?? [],
    z.array(PositionalArg.schemas.schema)
  ).optional()
});
var { schemas: generatedSchemas, factory } = createType({
  rawSchema: rawSchema5,
  internalSchema,
  parseErrMsg: (value) => `The following template is invalid: ${value}`,
  unknownErrMsg: "Something went wrong trying to parse the template"
});
var { create, make, of } = factory;
var schemas8 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
export {
  create,
  factory,
  generatedSchemas,
  internalSchema,
  make,
  of,
  rawSchema5 as rawSchema,
  schemas8 as schemas
};
//# sourceMappingURL=Template.mjs.map
{"version":3,"sources":["RequestArgs.ts"],"sourcesContent":["import createType from '@taqueria/protocol/Base';\nimport * as LoadedConfig from '@taqueria/protocol/LoadedConfig';\nimport { rawSchema as sanitizedArgsSchema } from '@taqueria/protocol/SanitizedArgs';\nimport { z } from 'zod';\n\nconst taqRunSchema = z.union([\n\tz.literal('pluginInfo'),\n\tz.literal('proxy'),\n\tz.literal('checkRuntimeDependencies'),\n\tz.literal('installRuntimeDependencies'),\n\tz.literal('proxyTemplate'),\n]);\n\nconst rawSchema = sanitizedArgsSchema.extend({\n\ttaqRun: taqRunSchema,\n\tconfig: z.preprocess(\n\t\tval => typeof val === 'string' ? JSON.parse(val) : val,\n\t\tLoadedConfig.rawSchema,\n\t),\n}).describe('RequestArgs').passthrough();\n\nconst internalSchema = sanitizedArgsSchema.extend({\n\ttaqRun: taqRunSchema,\n\tconfig: z.preprocess(\n\t\tval => typeof val === 'string' ? JSON.parse(val) : val,\n\t\tLoadedConfig.schemas.schema,\n\t),\n}).describe('RequestArgs').passthrough();\n\ntype RawInput = z.infer<typeof rawSchema>;\ntype Input = z.infer<typeof internalSchema>;\n\nexport const { schemas: generatedSchemas, factory } = createType<RawInput, Input>({\n\trawSchema,\n\tinternalSchema,\n\tparseErrMsg: 'The request is invalid',\n\tunknownErrMsg: 'Something went wrong trying to parse the request',\n});\n\nexport type RequestArgs = z.infer<typeof generatedSchemas.schema>;\nexport type t = RequestArgs;\n\nexport const schemas = {\n\t...generatedSchemas,\n\tschema: generatedSchemas.schema.transform(val => val as RequestArgs),\n};\n\nconst rawProxyTaskSchema = rawSchema.extend({\n\ttask: z.string().min(1),\n}).describe('ProxyRequestArgs').passthrough();\n\nconst internalProxyTaskSchema = internalSchema.extend({\n\ttask: z.string().min(1),\n}).describe('ProxyRequestArgs').passthrough();\n\nconst rawProxyTemplateSchema = rawSchema.extend({\n\ttemplate: z.string().min(1),\n});\n\nconst internalProxyTemplateSchema = rawSchema.extend({\n\ttemplate: z.string().min(1),\n});\n\ntype RawProxyInput = z.infer<typeof rawProxyTaskSchema>;\ntype ProxyInput = z.infer<typeof internalProxyTaskSchema>;\ntype RawProxyTemplateInput = z.infer<typeof rawProxyTemplateSchema>;\ntype ProxyTemplateInput = z.infer<typeof internalProxyTemplateSchema>;\n\nexport const proxy = createType<RawProxyInput, ProxyInput>({\n\trawSchema: rawProxyTaskSchema,\n\tinternalSchema: internalProxyTaskSchema,\n\tparseErrMsg: 'The request is invalid',\n\tunknownErrMsg: 'Something went wrong trying to parse the request',\n});\n\nexport const proxyTemplate = createType<RawProxyTemplateInput, ProxyTemplateInput>({\n\trawSchema: rawProxyTemplateSchema,\n\tinternalSchema: internalProxyTemplateSchema,\n\tparseErrMsg: 'The request is invalid',\n\tunknownErrMsg: 'Something went wrong trying to parse the request',\n});\n\nexport const proxySchemas = proxy.schemas;\nexport const proxyFactory = proxy.factory;\n\nexport type ProxyRequestArgs = z.infer<typeof proxySchemas.schema>;\nexport type ProxyTemplateRequestArgs = z.infer<typeof proxyTemplate.schemas.schema>;\n\nexport const createProxyRequestArgs = proxyFactory.from;\nexport const makeProxyRequestArgs = proxyFactory.make;\nexport const ofProxyRequestArgs = proxyFactory.of;\n\nexport const createProxyTemplateRequestArgs = proxyTemplate.factory.from;\nexport const makeProxyTemplateRequestArgs = proxyTemplate.factory.make;\nexport const ofProxyTemplateRequestArgs = proxyTemplate.factory.of;\n\nexport const { create, make, of, from } = factory;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAAA;AAAA;AAAA;AAAA,kBAAuB;AACvB,mBAA8B;AAC9B,2BAAiD;AACjD,iBAAkB;AAElB,IAAM,eAAe,aAAE,MAAM;AAAA,EAC5B,aAAE,QAAQ,YAAY;AAAA,EACtB,aAAE,QAAQ,OAAO;AAAA,EACjB,aAAE,QAAQ,0BAA0B;AAAA,EACpC,aAAE,QAAQ,4BAA4B;AAAA,EACtC,aAAE,QAAQ,eAAe;AAC1B,CAAC;AAED,IAAMC,aAAY,qBAAAC,UAAoB,OAAO;AAAA,EAC5C,QAAQ;AAAA,EACR,QAAQ,aAAE;AAAA,IACT,SAAO,OAAO,QAAQ,WAAW,KAAK,MAAM,GAAG,IAAI;AAAA,IACtC;AAAA,EACd;AACD,CAAC,EAAE,SAAS,aAAa,EAAE,YAAY;AAEvC,IAAM,iBAAiB,qBAAAA,UAAoB,OAAO;AAAA,EACjD,QAAQ;AAAA,EACR,QAAQ,aAAE;AAAA,IACT,SAAO,OAAO,QAAQ,WAAW,KAAK,MAAM,GAAG,IAAI;AAAA,IACtC,qBAAQ;AAAA,EACtB;AACD,CAAC,EAAE,SAAS,aAAa,EAAE,YAAY;AAKhC,IAAM,EAAE,SAAS,kBAAkB,QAAQ,QAAI,YAAAC,SAA4B;AAAA,EACjF,WAAAF;AAAA,EACA;AAAA,EACA,aAAa;AAAA,EACb,eAAe;AAChB,CAAC;AAKM,IAAMD,WAAU;AAAA,EACtB,GAAG;AAAA,EACH,QAAQ,iBAAiB,OAAO,UAAU,SAAO,GAAkB;AACpE;AAEA,IAAM,qBAAqBC,WAAU,OAAO;AAAA,EAC3C,MAAM,aAAE,OAAO,EAAE,IAAI,CAAC;AACvB,CAAC,EAAE,SAAS,kBAAkB,EAAE,YAAY;AAE5C,IAAM,0BAA0B,eAAe,OAAO;AAAA,EACrD,MAAM,aAAE,OAAO,EAAE,IAAI,CAAC;AACvB,CAAC,EAAE,SAAS,kBAAkB,EAAE,YAAY;AAE5C,IAAM,yBAAyBA,WAAU,OAAO;AAAA,EAC/C,UAAU,aAAE,OAAO,EAAE,IAAI,CAAC;AAC3B,CAAC;AAED,IAAM,8BAA8BA,WAAU,OAAO;AAAA,EACpD,UAAU,aAAE,OAAO,EAAE,IAAI,CAAC;AAC3B,CAAC;AAOM,IAAM,YAAQ,YAAAE,SAAsC;AAAA,EAC1D,WAAW;AAAA,EACX,gBAAgB;AAAA,EAChB,aAAa;AAAA,EACb,eAAe;AAChB,CAAC;AAEM,IAAM,oBAAgB,YAAAA,SAAsD;AAAA,EAClF,WAAW;AAAA,EACX,gBAAgB;AAAA,EAChB,aAAa;AAAA,EACb,eAAe;AAChB,CAAC;AAEM,IAAM,eAAe,MAAM;AAC3B,IAAM,eAAe,MAAM;AAK3B,IAAM,yBAAyB,aAAa;AAC5C,IAAM,uBAAuB,aAAa;AAC1C,IAAM,qBAAqB,aAAa;AAExC,IAAM,iCAAiC,cAAc,QAAQ;AAC7D,IAAM,+BAA+B,cAAc,QAAQ;AAC3D,IAAM,6BAA6B,cAAc,QAAQ;AAEzD,IAAM,EAAE,QAAQ,MAAM,IAAI,KAAK,IAAI;","names":["schemas","rawSchema","sanitizedArgsSchema","createType"]}
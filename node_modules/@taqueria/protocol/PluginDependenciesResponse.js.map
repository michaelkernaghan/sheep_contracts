{"version":3,"sources":["PluginDependenciesResponse.ts"],"sourcesContent":["import createType from '@taqueria/protocol/Base';\nimport { z } from 'zod';\n\nconst rawRuntimeDependency = z.object({\n\tname: z.string(),\n\tpath: z.string(),\n\tversion: z.string(),\n\tkind: z.union([z.literal('required'), z.literal('optional')]),\n});\n\ntype RawRuntimeDependencyInput = z.infer<typeof rawRuntimeDependency>;\n\nexport const { schemas, factory } = createType<RawRuntimeDependencyInput, RawRuntimeDependencyInput>({\n\trawSchema: rawRuntimeDependency,\n\tinternalSchema: rawRuntimeDependency,\n\tparseErrMsg: (value: unknown) => `The following runtime dependency is invalid: ${value}`,\n\tunknownErrMsg: 'Something went wrong trying to parse the template',\n});\n\nexport type RuntimeDependency = z.infer<typeof schemas.schema>;\n\nconst runtimeDependencyReport = rawRuntimeDependency.extend({ met: z.boolean() });\n\nexport type RuntimeDependencyReport = z.infer<typeof runtimeDependencyReport>;\n\nconst dependenciesResponseSchema = z.object({\n\treport: z.array(runtimeDependencyReport),\n});\n\nexport type PluginDependenciesResponse = z.infer<typeof dependenciesResponseSchema>;\nexport type t = PluginDependenciesResponse;\n\nexport const { of, make, create } = factory;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAuB;AACvB,iBAAkB;AAElB,IAAM,uBAAuB,aAAE,OAAO;AAAA,EACrC,MAAM,aAAE,OAAO;AAAA,EACf,MAAM,aAAE,OAAO;AAAA,EACf,SAAS,aAAE,OAAO;AAAA,EAClB,MAAM,aAAE,MAAM,CAAC,aAAE,QAAQ,UAAU,GAAG,aAAE,QAAQ,UAAU,CAAC,CAAC;AAC7D,CAAC;AAIM,IAAM,EAAE,SAAS,QAAQ,QAAI,YAAAA,SAAiE;AAAA,EACpG,WAAW;AAAA,EACX,gBAAgB;AAAA,EAChB,aAAa,CAAC,UAAmB,gDAAgD;AAAA,EACjF,eAAe;AAChB,CAAC;AAID,IAAM,0BAA0B,qBAAqB,OAAO,EAAE,KAAK,aAAE,QAAQ,EAAE,CAAC;AAIhF,IAAM,6BAA6B,aAAE,OAAO;AAAA,EAC3C,QAAQ,aAAE,MAAM,uBAAuB;AACxC,CAAC;AAKM,IAAM,EAAE,IAAI,MAAM,OAAO,IAAI;","names":["createType"]}
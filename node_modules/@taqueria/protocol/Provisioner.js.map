{"version":3,"sources":["Provisioner.ts"],"sourcesContent":["import createType from '@taqueria/protocol/Base';\nimport * as ProvisionerID from '@taqueria/protocol/ProvisionerID';\nimport { z } from 'zod';\n\nexport const rawSchema = z.object(\n\t{\n\t\tid: ProvisionerID.rawSchema,\n\t\tplugin: z\n\t\t\t.string()\n\t\t\t.min(1)\n\t\t\t.describe('Provisioner Plugin')\n\t\t\t.optional(),\n\t\toperation: z\n\t\t\t.union([\n\t\t\t\tz.string().min(1),\n\t\t\t\tz.literal('custom'),\n\t\t\t])\n\t\t\t.describe('Provisioner Operation'),\n\t\tcommand: z\n\t\t\t.string()\n\t\t\t.describe('Provisioner Custom Command')\n\t\t\t.optional(),\n\t\tlabel: z\n\t\t\t.string()\n\t\t\t.describe('Provisioner Label')\n\t\t\t.optional(),\n\t\tdepends_on: z\n\t\t\t.array(\n\t\t\t\tProvisionerID.rawSchema,\n\t\t\t)\n\t\t\t.optional(),\n\t},\n\t{\n\t\tdescription: 'Provisioner',\n\t},\n)\n\t.passthrough();\n\nexport const internalSchema = rawSchema.extend({\n\tid: ProvisionerID.schemas.schema,\n\tdepends_on: z.array(ProvisionerID.schemas.schema).optional(),\n});\n\nexport type RawInput = z.infer<typeof rawSchema>;\nexport type Input = z.infer<typeof internalSchema>;\n\nexport const { schemas: generatedSchemas, factory } = createType<RawInput, Input>({\n\trawSchema,\n\tinternalSchema,\n\tparseErrMsg: 'There was a problem trying to parse the provisioner',\n\tunknownErrMsg: 'Something went wrong trying to parse the provisioner',\n});\n\nexport type Provisioner = z.infer<typeof generatedSchemas.schema>;\nexport type t = Provisioner;\nexport const { create, of, make } = factory;\n\nexport const schemas = {\n\t...generatedSchemas,\n\tschema: generatedSchemas.schema.transform(val => val as unknown as Provisioner),\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAAA;AAAA,EAAA,eAAAC;AAAA;AAAA;AAAA,kBAAuB;AACvB,oBAA+B;AAC/B,iBAAkB;AAEX,IAAMD,aAAY,aAAE;AAAA,EAC1B;AAAA,IACC,IAAkB;AAAA,IAClB,QAAQ,aACN,OAAO,EACP,IAAI,CAAC,EACL,SAAS,oBAAoB,EAC7B,SAAS;AAAA,IACX,WAAW,aACT,MAAM;AAAA,MACN,aAAE,OAAO,EAAE,IAAI,CAAC;AAAA,MAChB,aAAE,QAAQ,QAAQ;AAAA,IACnB,CAAC,EACA,SAAS,uBAAuB;AAAA,IAClC,SAAS,aACP,OAAO,EACP,SAAS,4BAA4B,EACrC,SAAS;AAAA,IACX,OAAO,aACL,OAAO,EACP,SAAS,mBAAmB,EAC5B,SAAS;AAAA,IACX,YAAY,aACV;AAAA,MACc;AAAA,IACf,EACC,SAAS;AAAA,EACZ;AAAA,EACA;AAAA,IACC,aAAa;AAAA,EACd;AACD,EACE,YAAY;AAEP,IAAM,iBAAiBA,WAAU,OAAO;AAAA,EAC9C,IAAkB,sBAAQ;AAAA,EAC1B,YAAY,aAAE,MAAoB,sBAAQ,MAAM,EAAE,SAAS;AAC5D,CAAC;AAKM,IAAM,EAAE,SAAS,kBAAkB,QAAQ,QAAI,YAAAE,SAA4B;AAAA,EACjF,WAAAF;AAAA,EACA;AAAA,EACA,aAAa;AAAA,EACb,eAAe;AAChB,CAAC;AAIM,IAAM,EAAE,QAAQ,IAAI,KAAK,IAAI;AAE7B,IAAMC,WAAU;AAAA,EACtB,GAAG;AAAA,EACH,QAAQ,iBAAiB,OAAO,UAAU,SAAO,GAA6B;AAC/E;","names":["rawSchema","schemas","createType"]}
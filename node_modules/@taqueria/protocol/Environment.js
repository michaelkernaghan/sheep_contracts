"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from2, except, desc) => {
  if (from2 && typeof from2 === "object" || typeof from2 === "function") {
    for (let key of __getOwnPropNames(from2))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// Environment.ts
var Environment_exports = {};
__export(Environment_exports, {
  create: () => create,
  factory: () => factory,
  from: () => from,
  generatedSchemas: () => generatedSchemas,
  make: () => make,
  of: () => of,
  rawSchema: () => rawSchema,
  schemas: () => schemas
});
module.exports = __toCommonJS(Environment_exports);
var import_Base = __toESM(require("@taqueria/protocol/Base"));
var import_zod = require("zod");
var rawSchema = import_zod.z.object({
  networks: import_zod.z.array(
    import_zod.z.string({ description: "Environment network" }).min(1, "Must reference the name of an existing network configuration")
  ),
  sandboxes: import_zod.z.array(
    import_zod.z.string({ description: "Environment sandbox" }).min(1, "Must reference the name of an existing sandbox configuration")
  ),
  storage: import_zod.z.record(
    import_zod.z.any({ description: "Environment storage value" }),
    { description: "Environment storage" }
  ).optional(),
  aliases: import_zod.z.record(
    import_zod.z.any({ description: "Environment address alias" }),
    { description: "Environment alias" }
  ).optional()
}).describe("Environment Config");
var { schemas: generatedSchemas, factory } = (0, import_Base.default)({
  rawSchema,
  parseErrMsg: (value) => `${value} is not an valid environment configuration`,
  unknownErrMsg: "Something went wrong trying to parse the environment configuration"
});
var { create, make, of, from } = factory;
var schemas = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  create,
  factory,
  from,
  generatedSchemas,
  make,
  of,
  rawSchema,
  schemas
});
//# sourceMappingURL=Environment.js.map
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// Template.ts
var Template_exports = {};
__export(Template_exports, {
  create: () => create,
  factory: () => factory,
  generatedSchemas: () => generatedSchemas,
  internalSchema: () => internalSchema,
  make: () => make,
  of: () => of,
  rawSchema: () => rawSchema5,
  schemas: () => schemas8
});
module.exports = __toCommonJS(Template_exports);
var import_Base = __toESM(require("@taqueria/protocol/Base"));
var Command = __toESM(require("@taqueria/protocol/Command"));
var Option = __toESM(require("@taqueria/protocol/Option"));
var PluginJsonResponse = __toESM(require("@taqueria/protocol/PluginJsonResponse"));
var PluginResponseEncoding = __toESM(require("@taqueria/protocol/PluginResponseEncoding"));
var PositionalArg = __toESM(require("@taqueria/protocol/PositionalArg"));
var RequestArgs = __toESM(require("@taqueria/protocol/RequestArgs"));
var Verb = __toESM(require("@taqueria/protocol/Verb"));
var import_zod = require("zod");
var handlerSchema = import_zod.z.union([
  import_zod.z.string().min(1),
  import_zod.z.function().args(RequestArgs.schemas.schema).returns(import_zod.z.union([
    import_zod.z.void(),
    PluginJsonResponse.schemas.schema,
    PluginJsonResponse.schemas.internalSchema,
    import_zod.z.promise(
      import_zod.z.union([
        import_zod.z.promise(import_zod.z.void()),
        import_zod.z.void(),
        PluginJsonResponse.schemas.schema,
        PluginJsonResponse.schemas.internalSchema
      ])
    )
  ]))
]);
var rawSchema5 = import_zod.z.object({
  template: Verb.rawSchema,
  command: Command.rawSchema,
  description: import_zod.z.string().min(4),
  hidden: import_zod.z.preprocess(
    (val) => val ?? false,
    import_zod.z.boolean()
  ).optional(),
  options: import_zod.z.preprocess(
    (val) => val ?? [],
    import_zod.z.array(Option.rawSchema)
  ).optional(),
  positionals: import_zod.z.preprocess(
    (val) => val ?? [],
    import_zod.z.array(PositionalArg.rawSchema)
  ).optional(),
  handler: handlerSchema.describe("Template Handler"),
  encoding: PluginResponseEncoding.schemas.schema.optional()
});
var internalSchema = rawSchema5.extend({
  template: Verb.schemas.schema,
  command: Command.schemas.schema,
  options: import_zod.z.preprocess(
    (val) => val ?? [],
    import_zod.z.array(Option.schemas.schema)
  ).optional(),
  positionals: import_zod.z.preprocess(
    (val) => val ?? [],
    import_zod.z.array(PositionalArg.schemas.schema)
  ).optional()
});
var { schemas: generatedSchemas, factory } = (0, import_Base.default)({
  rawSchema: rawSchema5,
  internalSchema,
  parseErrMsg: (value) => `The following template is invalid: ${value}`,
  unknownErrMsg: "Something went wrong trying to parse the template"
});
var { create, make, of } = factory;
var schemas8 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  create,
  factory,
  generatedSchemas,
  internalSchema,
  make,
  of,
  rawSchema,
  schemas
});
//# sourceMappingURL=Template.js.map
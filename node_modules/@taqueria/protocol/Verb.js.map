{"version":3,"sources":["Verb.ts"],"sourcesContent":["import createType from '@taqueria/protocol/Base';\nimport { z } from 'zod';\n\nexport const rawSchema = z\n\t.string({ description: 'Verb' })\n\t.min(1, 'Must be a valid verb')\n\t.regex(/^[A-Za-z\\-\\ ]+/, 'Must be a valid verb');\n\ntype Input = z.infer<typeof rawSchema>;\n\nexport const { factory, schemas: generatedSchemas } = createType<Input, Input>({\n\tisStringLike: true,\n\trawSchema,\n\tparseErrMsg: (value: unknown) => `${value} is not an invalid verb`,\n\tunknownErrMsg: `Something went wrong trying to parse a verb`,\n});\nexport type Verb = z.infer<typeof generatedSchemas.schema>;\nexport type t = Verb;\nexport const { create, make, of } = factory;\nexport const schemas = {\n\t...generatedSchemas,\n\tschema: generatedSchemas.schema.transform(val => val as Verb),\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAuB;AACvB,iBAAkB;AAEX,IAAM,YAAY,aACvB,OAAO,EAAE,aAAa,OAAO,CAAC,EAC9B,IAAI,GAAG,sBAAsB,EAC7B,MAAM,kBAAkB,sBAAsB;AAIzC,IAAM,EAAE,SAAS,SAAS,iBAAiB,QAAI,YAAAA,SAAyB;AAAA,EAC9E,cAAc;AAAA,EACd;AAAA,EACA,aAAa,CAAC,UAAmB,GAAG;AAAA,EACpC,eAAe;AAChB,CAAC;AAGM,IAAM,EAAE,QAAQ,MAAM,GAAG,IAAI;AAC7B,IAAM,UAAU;AAAA,EACtB,GAAG;AAAA,EACH,QAAQ,iBAAiB,OAAO,UAAU,SAAO,GAAW;AAC7D;","names":["createType"]}
{"version":3,"sources":["PluginJsonResponse.ts"],"sourcesContent":["import createType from '@taqueria/protocol/Base';\nimport { z } from 'zod';\n\nexport const rawSchema = z.object({\n\tdata: z.unknown().optional(),\n\trender: z.union([\n\t\tz.literal('none'),\n\t\tz.literal('table'),\n\t\tz.literal('string'),\n\t]).optional(),\n});\n\ntype RawPluginJsonResponseInput = z.infer<typeof rawSchema>;\n\nexport const pluginJsonResponse = createType<RawPluginJsonResponseInput, RawPluginJsonResponseInput>({\n\trawSchema: rawSchema,\n\tinternalSchema: rawSchema,\n\tparseErrMsg: (value: unknown) => `The following JSON response is invalid: ${value}`,\n\tunknownErrMsg: 'Something went wrong trying to parse the template',\n});\n\nexport type PluginJsonResponse = z.infer<typeof pluginJsonResponse.schemas.schema>;\n\nexport type t = PluginJsonResponse;\n\nexport const { schemas, factory } = pluginJsonResponse;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAuB;AACvB,iBAAkB;AAEX,IAAM,YAAY,aAAE,OAAO;AAAA,EACjC,MAAM,aAAE,QAAQ,EAAE,SAAS;AAAA,EAC3B,QAAQ,aAAE,MAAM;AAAA,IACf,aAAE,QAAQ,MAAM;AAAA,IAChB,aAAE,QAAQ,OAAO;AAAA,IACjB,aAAE,QAAQ,QAAQ;AAAA,EACnB,CAAC,EAAE,SAAS;AACb,CAAC;AAIM,IAAM,yBAAqB,YAAAA,SAAmE;AAAA,EACpG;AAAA,EACA,gBAAgB;AAAA,EAChB,aAAa,CAAC,UAAmB,2CAA2C;AAAA,EAC5E,eAAe;AAChB,CAAC;AAMM,IAAM,EAAE,SAAS,QAAQ,IAAI;","names":["createType"]}
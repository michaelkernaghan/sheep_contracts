import { z } from 'zod';
declare const internalOpSchema: z.ZodObject<{
    hash: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __kind: any;
    }, any>, string & {
        readonly __kind: any;
    }, any>;
    time: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, number & {
        readonly __kind: any;
    }, any>, number & {
        readonly __kind: any;
    }, any>;
    output: z.ZodUnknown;
}, "strip", z.ZodTypeAny, {
    output?: unknown;
    hash: string & {
        readonly __kind: any;
    };
    time: number & {
        readonly __kind: any;
    };
}, {
    hash?: any;
    time?: any;
    output?: unknown;
}>;
declare const internalTaskSchema: z.ZodObject<{
    task: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __kind: any;
    }, any>, string & {
        readonly __kind: any;
    }, any>;
    plugin: z.ZodString;
    time: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, number & {
        readonly __kind: any;
    }, any>, number & {
        readonly __kind: any;
    }, any>;
    output: z.ZodUnknown;
}, "strip", z.ZodTypeAny, {
    output?: unknown;
    plugin: string;
    time: number & {
        readonly __kind: any;
    };
    task: string & {
        readonly __kind: any;
    };
}, {
    time?: any;
    output?: unknown;
    task?: any;
    plugin: string;
}>;
export declare type PersistedTask = z.infer<typeof internalTaskSchema>;
export declare type PersistedOperation = z.infer<typeof internalOpSchema>;
export declare const rawSchema: z.ZodObject<{
    operations: z.ZodRecord<z.ZodString, z.ZodObject<{
        hash: z.ZodString;
        time: z.ZodNumber;
        output: z.ZodUnknown;
    }, "strip", z.ZodTypeAny, {
        output?: unknown;
        hash: string;
        time: number;
    }, {
        output?: unknown;
        hash: string;
        time: number;
    }>>;
    tasks: z.ZodRecord<z.ZodString, z.ZodObject<{
        task: z.ZodType<any, z.ZodTypeDef, any>;
        plugin: z.ZodString;
        time: z.ZodNumber;
        output: z.ZodUnknown;
    }, "strip", z.ZodTypeAny, {
        output?: unknown;
        task?: any;
        plugin: string;
        time: number;
    }, {
        output?: unknown;
        task?: any;
        plugin: string;
        time: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    operations: Record<string, {
        output?: unknown;
        hash: string;
        time: number;
    }>;
    tasks: Record<string, {
        output?: unknown;
        task?: any;
        plugin: string;
        time: number;
    }>;
}, {
    operations: Record<string, {
        output?: unknown;
        hash: string;
        time: number;
    }>;
    tasks: Record<string, {
        output?: unknown;
        task?: any;
        plugin: string;
        time: number;
    }>;
}>;
export declare const internalSchema: z.ZodEffects<z.ZodObject<{
    operations: z.ZodRecord<z.ZodString, z.ZodObject<{
        hash: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
            readonly __kind: any;
        }, any>, string & {
            readonly __kind: any;
        }, any>;
        time: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, number & {
            readonly __kind: any;
        }, any>, number & {
            readonly __kind: any;
        }, any>;
        output: z.ZodUnknown;
    }, "strip", z.ZodTypeAny, {
        output?: unknown;
        hash: string & {
            readonly __kind: any;
        };
        time: number & {
            readonly __kind: any;
        };
    }, {
        hash?: any;
        time?: any;
        output?: unknown;
    }>>;
    tasks: z.ZodRecord<z.ZodString, z.ZodObject<{
        task: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
            readonly __kind: any;
        }, any>, string & {
            readonly __kind: any;
        }, any>;
        plugin: z.ZodString;
        time: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, number & {
            readonly __kind: any;
        }, any>, number & {
            readonly __kind: any;
        }, any>;
        output: z.ZodUnknown;
    }, "strip", z.ZodTypeAny, {
        output?: unknown;
        plugin: string;
        time: number & {
            readonly __kind: any;
        };
        task: string & {
            readonly __kind: any;
        };
    }, {
        time?: any;
        output?: unknown;
        task?: any;
        plugin: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    operations: Record<string, {
        output?: unknown;
        hash: string & {
            readonly __kind: any;
        };
        time: number & {
            readonly __kind: any;
        };
    }>;
    tasks: Record<string, {
        output?: unknown;
        plugin: string;
        time: number & {
            readonly __kind: any;
        };
        task: string & {
            readonly __kind: any;
        };
    }>;
}, {
    operations: Record<string, {
        hash?: any;
        time?: any;
        output?: unknown;
    }>;
    tasks: Record<string, {
        time?: any;
        output?: unknown;
        task?: any;
        plugin: string;
    }>;
}>, {
    operations: Record<string, {
        output?: unknown;
        hash: string & {
            readonly __kind: any;
        };
        time: number & {
            readonly __kind: any;
        };
    }>;
    tasks: Record<string, {
        output?: unknown;
        plugin: string;
        time: number & {
            readonly __kind: any;
        };
        task: string & {
            readonly __kind: any;
        };
    }>;
}, {
    operations: Record<string, {
        hash?: any;
        time?: any;
        output?: unknown;
    }>;
    tasks: Record<string, {
        time?: any;
        output?: unknown;
        task?: any;
        plugin: string;
    }>;
}>;
export declare const generatedSchemas: {
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
    schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        operations: Record<string, {
            output?: unknown;
            hash: string & {
                readonly __kind: any;
            };
            time: number & {
                readonly __kind: any;
            };
        }>;
        tasks: Record<string, {
            output?: unknown;
            plugin: string;
            time: number & {
                readonly __kind: any;
            };
            task: string & {
                readonly __kind: any;
            };
        }>;
    } & {
        readonly __kind: any;
    }, any>;
}, factory: {
    make: (input: {
        operations: Record<string, {
            output?: unknown;
            hash: string & {
                readonly __kind: any;
            };
            time: number & {
                readonly __kind: any;
            };
        }>;
        tasks: Record<string, {
            output?: unknown;
            plugin: string;
            time: number & {
                readonly __kind: any;
            };
            task: string & {
                readonly __kind: any;
            };
        }>;
    }) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        operations: Record<string, {
            output?: unknown;
            hash: string & {
                readonly __kind: any;
            };
            time: number & {
                readonly __kind: any;
            };
        }>;
        tasks: Record<string, {
            output?: unknown;
            plugin: string;
            time: number & {
                readonly __kind: any;
            };
            task: string & {
                readonly __kind: any;
            };
        }>;
    } & {
        readonly __kind: any;
    }>;
    of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        operations: Record<string, {
            output?: unknown;
            hash: string & {
                readonly __kind: any;
            };
            time: number & {
                readonly __kind: any;
            };
        }>;
        tasks: Record<string, {
            output?: unknown;
            plugin: string;
            time: number & {
                readonly __kind: any;
            };
            task: string & {
                readonly __kind: any;
            };
        }>;
    } & {
        readonly __kind: any;
    }>;
    create: (input: {
        operations: Record<string, {
            output?: unknown;
            hash: string;
            time: number;
        }>;
        tasks: Record<string, {
            output?: unknown;
            task?: any;
            plugin: string;
            time: number;
        }>;
    } | {
        operations: Record<string, {
            output?: unknown;
            hash: string & {
                readonly __kind: any;
            };
            time: number & {
                readonly __kind: any;
            };
        }>;
        tasks: Record<string, {
            output?: unknown;
            plugin: string;
            time: number & {
                readonly __kind: any;
            };
            task: string & {
                readonly __kind: any;
            };
        }>;
    }) => {
        operations: Record<string, {
            output?: unknown;
            hash: string & {
                readonly __kind: any;
            };
            time: number & {
                readonly __kind: any;
            };
        }>;
        tasks: Record<string, {
            output?: unknown;
            plugin: string;
            time: number & {
                readonly __kind: any;
            };
            task: string & {
                readonly __kind: any;
            };
        }>;
    } & {
        readonly __kind: any;
    };
    from: (input: unknown) => {
        operations: Record<string, {
            output?: unknown;
            hash: string & {
                readonly __kind: any;
            };
            time: number & {
                readonly __kind: any;
            };
        }>;
        tasks: Record<string, {
            output?: unknown;
            plugin: string;
            time: number & {
                readonly __kind: any;
            };
            task: string & {
                readonly __kind: any;
            };
        }>;
    } & {
        readonly __kind: any;
    };
};
export declare type PersistentState = z.infer<typeof generatedSchemas.schema>;
export declare type t = PersistentState;
export declare type State = PersistentState;
export declare const create: (input: {
    operations: Record<string, {
        output?: unknown;
        hash: string;
        time: number;
    }>;
    tasks: Record<string, {
        output?: unknown;
        task?: any;
        plugin: string;
        time: number;
    }>;
} | {
    operations: Record<string, {
        output?: unknown;
        hash: string & {
            readonly __kind: any;
        };
        time: number & {
            readonly __kind: any;
        };
    }>;
    tasks: Record<string, {
        output?: unknown;
        plugin: string;
        time: number & {
            readonly __kind: any;
        };
        task: string & {
            readonly __kind: any;
        };
    }>;
}) => {
    operations: Record<string, {
        output?: unknown;
        hash: string & {
            readonly __kind: any;
        };
        time: number & {
            readonly __kind: any;
        };
    }>;
    tasks: Record<string, {
        output?: unknown;
        plugin: string;
        time: number & {
            readonly __kind: any;
        };
        task: string & {
            readonly __kind: any;
        };
    }>;
} & {
    readonly __kind: any;
}, of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    operations: Record<string, {
        output?: unknown;
        hash: string & {
            readonly __kind: any;
        };
        time: number & {
            readonly __kind: any;
        };
    }>;
    tasks: Record<string, {
        output?: unknown;
        plugin: string;
        time: number & {
            readonly __kind: any;
        };
        task: string & {
            readonly __kind: any;
        };
    }>;
} & {
    readonly __kind: any;
}>, make: (input: {
    operations: Record<string, {
        output?: unknown;
        hash: string & {
            readonly __kind: any;
        };
        time: number & {
            readonly __kind: any;
        };
    }>;
    tasks: Record<string, {
        output?: unknown;
        plugin: string;
        time: number & {
            readonly __kind: any;
        };
        task: string & {
            readonly __kind: any;
        };
    }>;
}) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    operations: Record<string, {
        output?: unknown;
        hash: string & {
            readonly __kind: any;
        };
        time: number & {
            readonly __kind: any;
        };
    }>;
    tasks: Record<string, {
        output?: unknown;
        plugin: string;
        time: number & {
            readonly __kind: any;
        };
        task: string & {
            readonly __kind: any;
        };
    }>;
} & {
    readonly __kind: any;
}>;
export declare const schemas: {
    schema: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        operations: Record<string, {
            output?: unknown;
            hash: string & {
                readonly __kind: any;
            };
            time: number & {
                readonly __kind: any;
            };
        }>;
        tasks: Record<string, {
            output?: unknown;
            plugin: string;
            time: number & {
                readonly __kind: any;
            };
            task: string & {
                readonly __kind: any;
            };
        }>;
    } & {
        readonly __kind: any;
    }, any>, {
        operations: Record<string, {
            output?: unknown;
            hash: string & {
                readonly __kind: any;
            };
            time: number & {
                readonly __kind: any;
            };
        }>;
        tasks: Record<string, {
            output?: unknown;
            plugin: string;
            time: number & {
                readonly __kind: any;
            };
            task: string & {
                readonly __kind: any;
            };
        }>;
    } & {
        readonly __kind: any;
    }, any>;
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
};
export {};
//# sourceMappingURL=PersistentState.d.ts.map
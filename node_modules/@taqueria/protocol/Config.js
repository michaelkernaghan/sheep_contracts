"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// Config.ts
var Config_exports = {};
__export(Config_exports, {
  create: () => create,
  factory: () => factory,
  generatedSchemas: () => generatedSchemas,
  internalSchema: () => internalSchema,
  make: () => make,
  of: () => of,
  pluginsInternalSchema: () => pluginsInternalSchema,
  pluginsRawSchema: () => pluginsRawSchema,
  rawSchema: () => rawSchema8,
  schemas: () => schemas7
});
module.exports = __toCommonJS(Config_exports);
var import_Base = __toESM(require("@taqueria/protocol/Base"));
var Contract = __toESM(require("@taqueria/protocol/Contract"));
var Environment = __toESM(require("@taqueria/protocol/Environment"));
var InstalledPlugin = __toESM(require("@taqueria/protocol/InstalledPlugin"));
var MetadataConfig = __toESM(require("@taqueria/protocol/MetadataConfig"));
var NetworkConfig = __toESM(require("@taqueria/protocol/NetworkConfig"));
var SandboxConfig = __toESM(require("@taqueria/protocol/SandboxConfig"));
var Tz = __toESM(require("@taqueria/protocol/Tz"));
var import_zod = require("zod");
var pluginsRawSchema = import_zod.z.preprocess(
  (val) => val ?? [],
  import_zod.z.array(
    InstalledPlugin.rawSchema,
    { description: "config.plugins" }
  )
);
var pluginsInternalSchema = import_zod.z.preprocess(
  (val) => val ?? [],
  import_zod.z.array(
    InstalledPlugin.schemas.schema,
    { description: "config.plugins" }
  )
);
var networkMap = import_zod.z.record(
  NetworkConfig.schemas.schema,
  { description: "Network configurations" }
).optional();
var sandboxMap = import_zod.z.record(
  SandboxConfig.schemas.schema,
  { description: "Sandbox configurations" }
).optional();
var environmentMap = import_zod.z.record(
  import_zod.z.union([
    Environment.schemas.schema,
    import_zod.z.string().min(1, "Default environment must reference the name of an existing environment.")
  ]),
  { description: "Environment configurations" }
).optional();
var accountsMap = import_zod.z.preprocess(
  (val) => val ?? {
    "bob": "5_000_000_000",
    "alice": "5_000_000_000",
    "john": "5_000_000_000"
  },
  import_zod.z.record(
    import_zod.z.union([Tz.rawSchema, import_zod.z.number()]),
    { description: "config.accounts" }
  )
);
var commonSchema = import_zod.z.object({
  language: import_zod.z.preprocess(
    (val) => val ?? "en",
    import_zod.z.union([
      import_zod.z.literal("en"),
      import_zod.z.literal("fr")
    ], { description: "config.language" }).optional()
  ),
  plugins: pluginsInternalSchema.optional(),
  contractsDir: import_zod.z.preprocess(
    (val) => val ?? "contracts",
    import_zod.z.string({ description: "config.contractsDir" }).min(1, "config.contractsDir must have a value")
  ),
  artifactsDir: import_zod.z.preprocess(
    (val) => val ?? "artifacts",
    import_zod.z.string({ description: "config.artifactsDir" }).min(1, "config.artifactsDir must have a value")
  ),
  contracts: import_zod.z.record(
    Contract.rawSchema
  ).optional()
}).describe("config");
var internalSchema = commonSchema.extend({
  network: networkMap,
  sandbox: sandboxMap,
  environment: environmentMap,
  accounts: accountsMap,
  contracts: import_zod.z.record(Contract.schemas.schema).optional(),
  metadata: MetadataConfig.schemas.schema.optional()
});
var rawSchema8 = commonSchema.extend({
  plugins: pluginsRawSchema.optional(),
  network: import_zod.z.record(NetworkConfig.rawSchema).optional(),
  sandbox: import_zod.z.record(SandboxConfig.rawSchema).optional(),
  environment: import_zod.z.record(
    import_zod.z.union([
      Environment.rawSchema,
      import_zod.z.string({ description: "config.environment" }).min(1, "Default environment must reference the name of an existing environment.")
    ])
  ).optional(),
  accounts: import_zod.z.record(
    import_zod.z.union([Tz.rawSchema, import_zod.z.number()]),
    { description: "config.accounts" }
  ).optional(),
  metadata: MetadataConfig.rawSchema.optional()
}).describe("config");
var { schemas: generatedSchemas, factory } = (0, import_Base.default)({
  rawSchema: rawSchema8,
  internalSchema,
  parseErrMsg: (_value, previous) => {
    if (previous instanceof import_zod.ZodError) {
      const msgs = previous.errors.reduce(
        (retval, issue) => {
          const path = issue.path.join(" \u2192 ");
          const msg = `  ${path}: ${issue.message}`;
          return [...retval, msg];
        },
        [`Your .taq/config.json file is invalid:`]
      );
      return msgs.join("\n") + "\n";
    }
    return `Your .taq/config.json file is invalid.`;
  },
  unknownErrMsg: "Something went wrong trying to parse your configuration"
});
var { create, of, make } = factory;
var schemas7 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  create,
  factory,
  generatedSchemas,
  internalSchema,
  make,
  of,
  pluginsInternalSchema,
  pluginsRawSchema,
  rawSchema,
  schemas
});
//# sourceMappingURL=Config.js.map
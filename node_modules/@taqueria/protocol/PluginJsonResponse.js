"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// PluginJsonResponse.ts
var PluginJsonResponse_exports = {};
__export(PluginJsonResponse_exports, {
  factory: () => factory,
  pluginJsonResponse: () => pluginJsonResponse,
  rawSchema: () => rawSchema,
  schemas: () => schemas
});
module.exports = __toCommonJS(PluginJsonResponse_exports);
var import_Base = __toESM(require("@taqueria/protocol/Base"));
var import_zod = require("zod");
var rawSchema = import_zod.z.object({
  data: import_zod.z.unknown().optional(),
  render: import_zod.z.union([
    import_zod.z.literal("none"),
    import_zod.z.literal("table"),
    import_zod.z.literal("string")
  ]).optional()
});
var pluginJsonResponse = (0, import_Base.default)({
  rawSchema,
  internalSchema: rawSchema,
  parseErrMsg: (value) => `The following JSON response is invalid: ${value}`,
  unknownErrMsg: "Something went wrong trying to parse the template"
});
var { schemas, factory } = pluginJsonResponse;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  factory,
  pluginJsonResponse,
  rawSchema,
  schemas
});
//# sourceMappingURL=PluginJsonResponse.js.map
// LoadedConfig.ts
import createType from "@taqueria/protocol/Base";
import * as Config from "@taqueria/protocol/Config";
import * as SanitizedAbsPath from "@taqueria/protocol/SanitizedAbsPath";
import * as SHA256 from "@taqueria/protocol/SHA256";
var rawSchema4 = Config.rawSchema.omit({ plugins: true }).extend({
  plugins: Config.pluginsRawSchema,
  projectDir: SanitizedAbsPath.rawSchema.describe("loadedConfig.projectDir"),
  configFile: SanitizedAbsPath.rawSchema.describe("loadedConfig.configFile"),
  hash: SHA256.rawSchema.describe("loadedConfig.hash")
}).describe("LoadedConfig");
var internalSchema2 = Config.internalSchema.omit({ plugins: true }).extend({
  plugins: Config.pluginsInternalSchema,
  projectDir: SanitizedAbsPath.schemas.schema.describe("loadedConfig.projectDir"),
  configFile: SanitizedAbsPath.schemas.schema.describe("loadedConfig.configFile"),
  hash: SHA256.schemas.schema.describe("loadedConfig.hash")
}).describe("LoadedConfig");
var { schemas: generatedSchemas, factory } = createType({
  rawSchema: rawSchema4,
  internalSchema: internalSchema2,
  parseErrMsg: (value) => `The following configuration is invalid: ${value}`,
  unknownErrMsg: "Something went wrong trying to parse the configuration to load"
});
var { create, of, make: make2 } = factory;
var schemas3 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
var toConfig = (config) => Config.make(config);
export {
  create,
  factory,
  generatedSchemas,
  internalSchema2 as internalSchema,
  make2 as make,
  of,
  rawSchema4 as rawSchema,
  schemas3 as schemas,
  toConfig
};
//# sourceMappingURL=LoadedConfig.mjs.map
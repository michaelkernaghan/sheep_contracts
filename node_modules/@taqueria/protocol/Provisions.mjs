// Provisions.ts
import createType from "@taqueria/protocol/Base";
import * as Provisioner from "@taqueria/protocol/Provisioner";
import { uniq } from "rambda";
import { memoize, partition } from "rambdax";
import { z } from "zod";
var getInvalidIds = memoize(
  (provisions) => {
    const ids = provisions.map((p) => p.id);
    return provisions.reduce(
      (retval, provision) => {
        const depends_on = provision.depends_on ?? [];
        const results = partition(
          (id) => ids.includes(id),
          depends_on
        );
        const invalid = results.pop();
        return uniq([...retval, ...invalid]);
      },
      []
    );
  }
);
var rawSchema2 = z.array(
  Provisioner.rawSchema
).refine(
  (provisions) => getInvalidIds(provisions).length === 0,
  (provisions) => ({
    message: `One or more of your provisioners depends on an invalid provisioner. The following provisioner ids were referenced that do not exist: ${getInvalidIds(provisions).join(", ")}`
  })
).describe("Provisions");
var internalSchema = z.array(Provisioner.schemas.schema).refine(
  (provisions) => getInvalidIds(provisions).length === 0,
  (provisions) => ({
    message: `One or more of your provisioners depends on an invalid provisioner. The following provisioner ids were referenced that do not exist: ${getInvalidIds(provisions).join(", ")}`
  })
).describe("Provisions");
var { schemas: generatedSchemas, factory } = createType({
  rawSchema: rawSchema2,
  internalSchema,
  parseErrMsg: (value) => `The following provision is invalid: ${value}`,
  unknownErrMsg: "Something went wrong parsing the list of provisioners"
});
var { create, of, make } = factory;
var schemas2 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
export {
  create,
  factory,
  generatedSchemas,
  make,
  of,
  schemas2 as schemas
};
//# sourceMappingURL=Provisions.mjs.map
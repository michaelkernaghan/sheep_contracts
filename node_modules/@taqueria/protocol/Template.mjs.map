{"version":3,"sources":["Template.ts"],"sourcesContent":["import createType from '@taqueria/protocol/Base';\nimport * as Command from '@taqueria/protocol/Command';\nimport * as Option from '@taqueria/protocol/Option';\nimport * as PluginJsonResponse from '@taqueria/protocol/PluginJsonResponse';\nimport * as PluginResponseEncoding from '@taqueria/protocol/PluginResponseEncoding';\nimport * as PositionalArg from '@taqueria/protocol/PositionalArg';\nimport * as RequestArgs from '@taqueria/protocol/RequestArgs';\nimport * as Verb from '@taqueria/protocol/Verb';\nimport { z } from 'zod';\n\nconst handlerSchema = z.union([\n\tz.string().min(1),\n\tz.function().args(RequestArgs.schemas.schema).returns(z.union([\n\t\tz.void(),\n\t\tPluginJsonResponse.schemas.schema,\n\t\tPluginJsonResponse.schemas.internalSchema,\n\t\tz.promise(\n\t\t\tz.union([\n\t\t\t\tz.promise(z.void()),\n\t\t\t\tz.void(),\n\t\t\t\tPluginJsonResponse.schemas.schema,\n\t\t\t\tPluginJsonResponse.schemas.internalSchema,\n\t\t\t]),\n\t\t),\n\t])),\n]);\n\nexport const rawSchema = z.object({\n\ttemplate: Verb.rawSchema,\n\tcommand: Command.rawSchema,\n\tdescription: z.string().min(4),\n\thidden: z.preprocess(\n\t\tval => val ?? false,\n\t\tz.boolean(),\n\t).optional(),\n\toptions: z.preprocess(\n\t\tval => val ?? [],\n\t\tz.array(Option.rawSchema),\n\t).optional(),\n\tpositionals: z.preprocess(\n\t\tval => val ?? [],\n\t\tz.array(PositionalArg.rawSchema),\n\t).optional(),\n\thandler: handlerSchema.describe('Template Handler'),\n\tencoding: PluginResponseEncoding.schemas.schema.optional(),\n});\n\nexport const internalSchema = rawSchema.extend({\n\ttemplate: Verb.schemas.schema,\n\tcommand: Command.schemas.schema,\n\toptions: z.preprocess(\n\t\tval => val ?? [],\n\t\tz.array(Option.schemas.schema),\n\t).optional(),\n\tpositionals: z.preprocess(\n\t\tval => val ?? [],\n\t\tz.array(PositionalArg.schemas.schema),\n\t).optional(),\n});\n\ntype RawInput = z.infer<typeof rawSchema>;\ntype Input = z.infer<typeof internalSchema>;\n\nexport const { schemas: generatedSchemas, factory } = createType<RawInput, Input>({\n\trawSchema,\n\tinternalSchema,\n\tparseErrMsg: (value: unknown) => `The following template is invalid: ${value}`,\n\tunknownErrMsg: 'Something went wrong trying to parse the template',\n});\n\nexport type Template = z.infer<typeof generatedSchemas.schema>;\nexport type t = Template;\nexport const { create, make, of } = factory;\nexport const schemas = {\n\t...generatedSchemas,\n\tschema: generatedSchemas.schema.transform(val => val as unknown as Template),\n};\n"],"mappings":";AAAA,OAAO,gBAAgB;AACvB,YAAY,aAAa;AACzB,YAAY,YAAY;AACxB,YAAY,wBAAwB;AACpC,YAAY,4BAA4B;AACxC,YAAY,mBAAmB;AAC/B,YAAY,iBAAiB;AAC7B,YAAY,UAAU;AACtB,SAAS,SAAS;AAElB,IAAM,gBAAgB,EAAE,MAAM;AAAA,EAC7B,EAAE,OAAO,EAAE,IAAI,CAAC;AAAA,EAChB,EAAE,SAAS,EAAE,KAAiB,oBAAQ,MAAM,EAAE,QAAQ,EAAE,MAAM;AAAA,IAC7D,EAAE,KAAK;AAAA,IACY,2BAAQ;AAAA,IACR,2BAAQ;AAAA,IAC3B,EAAE;AAAA,MACD,EAAE,MAAM;AAAA,QACP,EAAE,QAAQ,EAAE,KAAK,CAAC;AAAA,QAClB,EAAE,KAAK;AAAA,QACY,2BAAQ;AAAA,QACR,2BAAQ;AAAA,MAC5B,CAAC;AAAA,IACF;AAAA,EACD,CAAC,CAAC;AACH,CAAC;AAEM,IAAMA,aAAY,EAAE,OAAO;AAAA,EACjC,UAAe;AAAA,EACf,SAAiB;AAAA,EACjB,aAAa,EAAE,OAAO,EAAE,IAAI,CAAC;AAAA,EAC7B,QAAQ,EAAE;AAAA,IACT,SAAO,OAAO;AAAA,IACd,EAAE,QAAQ;AAAA,EACX,EAAE,SAAS;AAAA,EACX,SAAS,EAAE;AAAA,IACV,SAAO,OAAO,CAAC;AAAA,IACf,EAAE,MAAa,gBAAS;AAAA,EACzB,EAAE,SAAS;AAAA,EACX,aAAa,EAAE;AAAA,IACd,SAAO,OAAO,CAAC;AAAA,IACf,EAAE,MAAoB,uBAAS;AAAA,EAChC,EAAE,SAAS;AAAA,EACX,SAAS,cAAc,SAAS,kBAAkB;AAAA,EAClD,UAAiC,+BAAQ,OAAO,SAAS;AAC1D,CAAC;AAEM,IAAM,iBAAiBA,WAAU,OAAO;AAAA,EAC9C,UAAe,aAAQ;AAAA,EACvB,SAAiB,gBAAQ;AAAA,EACzB,SAAS,EAAE;AAAA,IACV,SAAO,OAAO,CAAC;AAAA,IACf,EAAE,MAAa,eAAQ,MAAM;AAAA,EAC9B,EAAE,SAAS;AAAA,EACX,aAAa,EAAE;AAAA,IACd,SAAO,OAAO,CAAC;AAAA,IACf,EAAE,MAAoB,sBAAQ,MAAM;AAAA,EACrC,EAAE,SAAS;AACZ,CAAC;AAKM,IAAM,EAAE,SAAS,kBAAkB,QAAQ,IAAI,WAA4B;AAAA,EACjF,WAAAA;AAAA,EACA;AAAA,EACA,aAAa,CAAC,UAAmB,sCAAsC;AAAA,EACvE,eAAe;AAChB,CAAC;AAIM,IAAM,EAAE,QAAQ,MAAM,GAAG,IAAI;AAC7B,IAAMC,WAAU;AAAA,EACtB,GAAG;AAAA,EACH,QAAQ,iBAAiB,OAAO,UAAU,SAAO,GAA0B;AAC5E;","names":["rawSchema","schemas"]}
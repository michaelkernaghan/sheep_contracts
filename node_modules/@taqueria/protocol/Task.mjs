// Task.ts
import * as Alias from "@taqueria/protocol/Alias";
import createType from "@taqueria/protocol/Base";
import * as Command from "@taqueria/protocol/Command";
import * as Option from "@taqueria/protocol/Option";
import * as PluginResponseEncoding from "@taqueria/protocol/PluginResponseEncoding";
import * as PositionalArg from "@taqueria/protocol/PositionalArg";
import * as Verb from "@taqueria/protocol/Verb";
import { z } from "zod";
var taskHandlerSchema = z.union([
  z.literal("proxy"),
  z.string().min(1)
]);
var rawSchema7 = z.object({
  task: Verb.rawSchema.describe("Task Name"),
  command: Command.rawSchema.describe("Task Command"),
  aliases: z.array(Alias.rawSchema).default([]).describe("Task Aliases").optional(),
  description: z.string({ description: "Task Description" }).min(3),
  example: z.string({ description: "Task Example" }).optional(),
  hidden: z.boolean({ description: "Task Is Hidden" }).default(false).optional(),
  encoding: PluginResponseEncoding.rawSchema.optional(),
  handler: taskHandlerSchema.describe("Task Handler"),
  options: z.array(Option.rawSchema).default([]).describe("Task Options").optional(),
  positionals: z.array(PositionalArg.rawSchema).default([]).describe("Task Positional Args").optional()
}).describe("Task");
var internalSchema = rawSchema7.extend({
  task: Verb.schemas.schema.describe("Task Name"),
  command: Command.schemas.schema.describe("Task Command"),
  aliases: z.array(Alias.schemas.schema).default([]).describe("Task Aliases").optional(),
  encoding: PluginResponseEncoding.schemas.schema.optional(),
  handler: taskHandlerSchema.describe("Task Handler"),
  options: z.preprocess(
    (val) => val ?? [],
    z.array(Option.schemas.schema).describe("Task Options").optional()
  ),
  positionals: z.array(PositionalArg.schemas.schema).default([]).describe("Task Positional Args").optional()
}).describe("Task");
var { schemas: generatedSchemas, factory } = createType({
  rawSchema: rawSchema7,
  internalSchema,
  parseErrMsg: (value) => `The following task is invalid: ${value}`,
  unknownErrMsg: "Something went wrong trying to parse the task"
});
var { create, make, of } = factory;
var schemas7 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
export {
  create,
  factory,
  generatedSchemas,
  make,
  of,
  rawSchema7 as rawSchema,
  schemas7 as schemas
};
//# sourceMappingURL=Task.mjs.map
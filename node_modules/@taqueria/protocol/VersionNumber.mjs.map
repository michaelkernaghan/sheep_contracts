{"version":3,"sources":["VersionNumber.ts"],"sourcesContent":["import createType from '@taqueria/protocol/Base';\nimport { z } from 'zod';\n\nexport const rawSchema = z.string({ description: 'Version Number' })\n\t.min(1)\n\t.regex(/^\\d+\\.\\d+(\\.\\d+)*$/);\n\ntype RawInput = z.infer<typeof rawSchema>;\n\nconst { schemas: generatedSchemas, factory } = createType<RawInput, RawInput>({\n\tisStringLike: true,\n\trawSchema,\n\tparseErrMsg: (value: unknown) => `${value} is an invalid version number`,\n\tunknownErrMsg: 'Something went wrong trying to parse the version number',\n});\n\nexport const internalSchema = generatedSchemas.schema;\n\nexport type VersionNumber = z.infer<typeof internalSchema>;\nexport type t = VersionNumber;\nexport const { create, of, make } = factory;\nexport const schemas = {\n\t...generatedSchemas,\n\tschema: generatedSchemas.schema.transform(val => val as VersionNumber),\n};\n"],"mappings":";AAAA,OAAO,gBAAgB;AACvB,SAAS,SAAS;AAEX,IAAM,YAAY,EAAE,OAAO,EAAE,aAAa,iBAAiB,CAAC,EACjE,IAAI,CAAC,EACL,MAAM,oBAAoB;AAI5B,IAAM,EAAE,SAAS,kBAAkB,QAAQ,IAAI,WAA+B;AAAA,EAC7E,cAAc;AAAA,EACd;AAAA,EACA,aAAa,CAAC,UAAmB,GAAG;AAAA,EACpC,eAAe;AAChB,CAAC;AAEM,IAAM,iBAAiB,iBAAiB;AAIxC,IAAM,EAAE,QAAQ,IAAI,KAAK,IAAI;AAC7B,IAAM,UAAU;AAAA,EACtB,GAAG;AAAA,EACH,QAAQ,iBAAiB,OAAO,UAAU,SAAO,GAAoB;AACtE;","names":[]}
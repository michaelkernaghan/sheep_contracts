import { Flatten } from '@taqueria/protocol/Base';
import { z } from 'zod';
export declare const rawSchema: z.ZodObject<{
    task: z.ZodString;
    command: z.ZodString;
    aliases: z.ZodOptional<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>>;
    description: z.ZodString;
    example: z.ZodOptional<z.ZodString>;
    hidden: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    encoding: z.ZodOptional<z.ZodEffects<z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"json">, z.ZodLiteral<"application/json">, z.ZodLiteral<"none">]>>>, "none" | "json" | "application/json" | undefined, unknown>>;
    handler: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodString]>;
    options: z.ZodOptional<z.ZodDefault<z.ZodArray<z.ZodObject<{
        shortFlag: z.ZodOptional<z.ZodString>;
        flag: z.ZodString;
        description: z.ZodString;
        defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
        choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        required: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        boolean: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
    }, "strip", z.ZodTypeAny, {
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: string | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string;
    }, {
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: string | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string;
    }>, "many">>>;
    positionals: z.ZodOptional<z.ZodDefault<z.ZodArray<z.ZodObject<{
        placeholder: z.ZodString;
        description: z.ZodString;
        defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
        type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
        required: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string;
    }, {
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    options?: {
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: string | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string;
    }[] | undefined;
    aliases?: string[] | undefined;
    positionals?: {
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string;
    }[] | undefined;
    hidden?: boolean | undefined;
    encoding?: "none" | "json" | "application/json" | undefined;
    example?: string | undefined;
    description: string;
    task: string;
    command: string;
    handler: string;
}, {
    options?: {
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: string | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string;
    }[] | undefined;
    aliases?: string[] | undefined;
    positionals?: {
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string;
    }[] | undefined;
    hidden?: boolean | undefined;
    encoding?: unknown;
    example?: string | undefined;
    description: string;
    task: string;
    command: string;
    handler: string;
}>;
export declare const generatedSchemas: {
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
    schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        options?: Flatten<{
            boolean?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: (string & {
                readonly __kind: any;
            }) | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            required?: boolean | undefined;
            description: string;
            flag: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>[] | undefined;
        aliases?: (string & {
            readonly __kind: any;
        })[] | undefined;
        positionals?: ({
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            required?: boolean | undefined;
            description: string;
            placeholder: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        })[] | undefined;
        hidden?: boolean | undefined;
        encoding?: (("none" | "json" | "application/json" | undefined) & {
            readonly __kind: any;
        }) | undefined;
        example?: string | undefined;
        description: string;
        task: string & {
            readonly __kind: any;
        };
        command: string & {
            readonly __kind: any;
        };
        handler: string;
    } & {
        readonly __kind: any;
    }, any>;
}, factory: {
    make: (input: {
        options?: Flatten<{
            boolean?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: (string & {
                readonly __kind: any;
            }) | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            required?: boolean | undefined;
            description: string;
            flag: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>[] | undefined;
        aliases?: (string & {
            readonly __kind: any;
        })[] | undefined;
        positionals?: ({
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            required?: boolean | undefined;
            description: string;
            placeholder: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        })[] | undefined;
        hidden?: boolean | undefined;
        encoding?: (("none" | "json" | "application/json" | undefined) & {
            readonly __kind: any;
        }) | undefined;
        example?: string | undefined;
        description: string;
        task: string & {
            readonly __kind: any;
        };
        command: string & {
            readonly __kind: any;
        };
        handler: string;
    }) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        options?: Flatten<{
            boolean?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: (string & {
                readonly __kind: any;
            }) | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            required?: boolean | undefined;
            description: string;
            flag: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>[] | undefined;
        aliases?: (string & {
            readonly __kind: any;
        })[] | undefined;
        positionals?: ({
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            required?: boolean | undefined;
            description: string;
            placeholder: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        })[] | undefined;
        hidden?: boolean | undefined;
        encoding?: (("none" | "json" | "application/json" | undefined) & {
            readonly __kind: any;
        }) | undefined;
        example?: string | undefined;
        description: string;
        task: string & {
            readonly __kind: any;
        };
        command: string & {
            readonly __kind: any;
        };
        handler: string;
    } & {
        readonly __kind: any;
    }>;
    of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        options?: Flatten<{
            boolean?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: (string & {
                readonly __kind: any;
            }) | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            required?: boolean | undefined;
            description: string;
            flag: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>[] | undefined;
        aliases?: (string & {
            readonly __kind: any;
        })[] | undefined;
        positionals?: ({
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            required?: boolean | undefined;
            description: string;
            placeholder: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        })[] | undefined;
        hidden?: boolean | undefined;
        encoding?: (("none" | "json" | "application/json" | undefined) & {
            readonly __kind: any;
        }) | undefined;
        example?: string | undefined;
        description: string;
        task: string & {
            readonly __kind: any;
        };
        command: string & {
            readonly __kind: any;
        };
        handler: string;
    } & {
        readonly __kind: any;
    }>;
    create: (input: {
        options?: {
            boolean?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            required?: boolean | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        aliases?: string[] | undefined;
        positionals?: {
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            required?: boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        example?: string | undefined;
        description: string;
        task: string;
        command: string;
        handler: string;
    } | {
        options?: Flatten<{
            boolean?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: (string & {
                readonly __kind: any;
            }) | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            required?: boolean | undefined;
            description: string;
            flag: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>[] | undefined;
        aliases?: (string & {
            readonly __kind: any;
        })[] | undefined;
        positionals?: ({
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            required?: boolean | undefined;
            description: string;
            placeholder: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        })[] | undefined;
        hidden?: boolean | undefined;
        encoding?: (("none" | "json" | "application/json" | undefined) & {
            readonly __kind: any;
        }) | undefined;
        example?: string | undefined;
        description: string;
        task: string & {
            readonly __kind: any;
        };
        command: string & {
            readonly __kind: any;
        };
        handler: string;
    }) => {
        options?: Flatten<{
            boolean?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: (string & {
                readonly __kind: any;
            }) | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            required?: boolean | undefined;
            description: string;
            flag: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>[] | undefined;
        aliases?: (string & {
            readonly __kind: any;
        })[] | undefined;
        positionals?: ({
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            required?: boolean | undefined;
            description: string;
            placeholder: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        })[] | undefined;
        hidden?: boolean | undefined;
        encoding?: (("none" | "json" | "application/json" | undefined) & {
            readonly __kind: any;
        }) | undefined;
        example?: string | undefined;
        description: string;
        task: string & {
            readonly __kind: any;
        };
        command: string & {
            readonly __kind: any;
        };
        handler: string;
    } & {
        readonly __kind: any;
    };
    from: (input: unknown) => {
        options?: Flatten<{
            boolean?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: (string & {
                readonly __kind: any;
            }) | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            required?: boolean | undefined;
            description: string;
            flag: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>[] | undefined;
        aliases?: (string & {
            readonly __kind: any;
        })[] | undefined;
        positionals?: ({
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            required?: boolean | undefined;
            description: string;
            placeholder: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        })[] | undefined;
        hidden?: boolean | undefined;
        encoding?: (("none" | "json" | "application/json" | undefined) & {
            readonly __kind: any;
        }) | undefined;
        example?: string | undefined;
        description: string;
        task: string & {
            readonly __kind: any;
        };
        command: string & {
            readonly __kind: any;
        };
        handler: string;
    } & {
        readonly __kind: any;
    };
};
export declare type Task = z.infer<typeof generatedSchemas.schema>;
export declare type t = Task;
export declare const create: (input: {
    options?: {
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: string | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string;
    }[] | undefined;
    aliases?: string[] | undefined;
    positionals?: {
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string;
    }[] | undefined;
    hidden?: boolean | undefined;
    encoding?: "none" | "json" | "application/json" | undefined;
    example?: string | undefined;
    description: string;
    task: string;
    command: string;
    handler: string;
} | {
    options?: Flatten<{
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: (string & {
            readonly __kind: any;
        }) | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>[] | undefined;
    aliases?: (string & {
        readonly __kind: any;
    })[] | undefined;
    positionals?: ({
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    })[] | undefined;
    hidden?: boolean | undefined;
    encoding?: (("none" | "json" | "application/json" | undefined) & {
        readonly __kind: any;
    }) | undefined;
    example?: string | undefined;
    description: string;
    task: string & {
        readonly __kind: any;
    };
    command: string & {
        readonly __kind: any;
    };
    handler: string;
}) => {
    options?: Flatten<{
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: (string & {
            readonly __kind: any;
        }) | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>[] | undefined;
    aliases?: (string & {
        readonly __kind: any;
    })[] | undefined;
    positionals?: ({
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    })[] | undefined;
    hidden?: boolean | undefined;
    encoding?: (("none" | "json" | "application/json" | undefined) & {
        readonly __kind: any;
    }) | undefined;
    example?: string | undefined;
    description: string;
    task: string & {
        readonly __kind: any;
    };
    command: string & {
        readonly __kind: any;
    };
    handler: string;
} & {
    readonly __kind: any;
}, make: (input: {
    options?: Flatten<{
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: (string & {
            readonly __kind: any;
        }) | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>[] | undefined;
    aliases?: (string & {
        readonly __kind: any;
    })[] | undefined;
    positionals?: ({
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    })[] | undefined;
    hidden?: boolean | undefined;
    encoding?: (("none" | "json" | "application/json" | undefined) & {
        readonly __kind: any;
    }) | undefined;
    example?: string | undefined;
    description: string;
    task: string & {
        readonly __kind: any;
    };
    command: string & {
        readonly __kind: any;
    };
    handler: string;
}) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    options?: Flatten<{
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: (string & {
            readonly __kind: any;
        }) | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>[] | undefined;
    aliases?: (string & {
        readonly __kind: any;
    })[] | undefined;
    positionals?: ({
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    })[] | undefined;
    hidden?: boolean | undefined;
    encoding?: (("none" | "json" | "application/json" | undefined) & {
        readonly __kind: any;
    }) | undefined;
    example?: string | undefined;
    description: string;
    task: string & {
        readonly __kind: any;
    };
    command: string & {
        readonly __kind: any;
    };
    handler: string;
} & {
    readonly __kind: any;
}>, of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    options?: Flatten<{
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: (string & {
            readonly __kind: any;
        }) | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>[] | undefined;
    aliases?: (string & {
        readonly __kind: any;
    })[] | undefined;
    positionals?: ({
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    })[] | undefined;
    hidden?: boolean | undefined;
    encoding?: (("none" | "json" | "application/json" | undefined) & {
        readonly __kind: any;
    }) | undefined;
    example?: string | undefined;
    description: string;
    task: string & {
        readonly __kind: any;
    };
    command: string & {
        readonly __kind: any;
    };
    handler: string;
} & {
    readonly __kind: any;
}>;
export declare const schemas: {
    schema: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        options?: Flatten<{
            boolean?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: (string & {
                readonly __kind: any;
            }) | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            required?: boolean | undefined;
            description: string;
            flag: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>[] | undefined;
        aliases?: (string & {
            readonly __kind: any;
        })[] | undefined;
        positionals?: ({
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            required?: boolean | undefined;
            description: string;
            placeholder: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        })[] | undefined;
        hidden?: boolean | undefined;
        encoding?: (("none" | "json" | "application/json" | undefined) & {
            readonly __kind: any;
        }) | undefined;
        example?: string | undefined;
        description: string;
        task: string & {
            readonly __kind: any;
        };
        command: string & {
            readonly __kind: any;
        };
        handler: string;
    } & {
        readonly __kind: any;
    }, any>, {
        options?: Flatten<{
            boolean?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: (string & {
                readonly __kind: any;
            }) | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            required?: boolean | undefined;
            description: string;
            flag: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>[] | undefined;
        aliases?: (string & {
            readonly __kind: any;
        })[] | undefined;
        positionals?: ({
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            required?: boolean | undefined;
            description: string;
            placeholder: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        })[] | undefined;
        hidden?: boolean | undefined;
        encoding?: (("none" | "json" | "application/json" | undefined) & {
            readonly __kind: any;
        }) | undefined;
        example?: string | undefined;
        description: string;
        task: string & {
            readonly __kind: any;
        };
        command: string & {
            readonly __kind: any;
        };
        handler: string;
    } & {
        readonly __kind: any;
    }, any>;
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
};
//# sourceMappingURL=Task.d.ts.map
import { z } from 'zod';
export declare const rawSchema: z.ZodObject<{
    encryptedKey: z.ZodString;
    publicKeyHash: z.ZodString;
    secretKey: z.ZodString;
}, "strip", z.ZodTypeAny, {
    encryptedKey: string;
    publicKeyHash: string;
    secretKey: string;
}, {
    encryptedKey: string;
    publicKeyHash: string;
    secretKey: string;
}>;
export declare const generatedSchemas: {
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
    schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        encryptedKey: string;
        publicKeyHash: string & {
            readonly __kind: any;
        };
        secretKey: string;
    } & {
        readonly __kind: any;
    }, any>;
}, factory: {
    make: (input: {
        encryptedKey: string;
        publicKeyHash: string & {
            readonly __kind: any;
        };
        secretKey: string;
    }) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        encryptedKey: string;
        publicKeyHash: string & {
            readonly __kind: any;
        };
        secretKey: string;
    } & {
        readonly __kind: any;
    }>;
    of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        encryptedKey: string;
        publicKeyHash: string & {
            readonly __kind: any;
        };
        secretKey: string;
    } & {
        readonly __kind: any;
    }>;
    create: (input: {
        encryptedKey: string;
        publicKeyHash: string & {
            readonly __kind: any;
        };
        secretKey: string;
    } | {
        encryptedKey: string;
        publicKeyHash: string;
        secretKey: string;
    }) => {
        encryptedKey: string;
        publicKeyHash: string & {
            readonly __kind: any;
        };
        secretKey: string;
    } & {
        readonly __kind: any;
    };
    from: (input: unknown) => {
        encryptedKey: string;
        publicKeyHash: string & {
            readonly __kind: any;
        };
        secretKey: string;
    } & {
        readonly __kind: any;
    };
};
export declare type SandboxAccountConfig = z.infer<typeof generatedSchemas.schema>;
export declare type t = SandboxAccountConfig;
export declare const create: (input: {
    encryptedKey: string;
    publicKeyHash: string & {
        readonly __kind: any;
    };
    secretKey: string;
} | {
    encryptedKey: string;
    publicKeyHash: string;
    secretKey: string;
}) => {
    encryptedKey: string;
    publicKeyHash: string & {
        readonly __kind: any;
    };
    secretKey: string;
} & {
    readonly __kind: any;
}, of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    encryptedKey: string;
    publicKeyHash: string & {
        readonly __kind: any;
    };
    secretKey: string;
} & {
    readonly __kind: any;
}>, make: (input: {
    encryptedKey: string;
    publicKeyHash: string & {
        readonly __kind: any;
    };
    secretKey: string;
}) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    encryptedKey: string;
    publicKeyHash: string & {
        readonly __kind: any;
    };
    secretKey: string;
} & {
    readonly __kind: any;
}>;
export declare const schemas: {
    schema: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        encryptedKey: string;
        publicKeyHash: string & {
            readonly __kind: any;
        };
        secretKey: string;
    } & {
        readonly __kind: any;
    }, any>, {
        encryptedKey: string;
        publicKeyHash: string & {
            readonly __kind: any;
        };
        secretKey: string;
    } & {
        readonly __kind: any;
    }, any>;
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
};
//# sourceMappingURL=SandboxAccountConfig.d.ts.map
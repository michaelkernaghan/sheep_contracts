import { z } from 'zod';
export declare const rawSchema: z.ZodObject<{
    name: z.ZodString;
    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
}, "strip", z.ZodTypeAny, {
    type: "npm" | "binary" | "deno";
    name: string;
}, {
    type: "npm" | "binary" | "deno";
    name: string;
}>;
export declare const generatedSchemas: {
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
    schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        type: "npm" | "binary" | "deno";
        name: string;
    } & {
        readonly __kind: any;
    }, any>;
}, factory: {
    make: (input: {
        type: "npm" | "binary" | "deno";
        name: string;
    }) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        type: "npm" | "binary" | "deno";
        name: string;
    } & {
        readonly __kind: any;
    }>;
    of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        type: "npm" | "binary" | "deno";
        name: string;
    } & {
        readonly __kind: any;
    }>;
    create: (input: {
        type: "npm" | "binary" | "deno";
        name: string;
    }) => {
        type: "npm" | "binary" | "deno";
        name: string;
    } & {
        readonly __kind: any;
    };
    from: (input: unknown) => {
        type: "npm" | "binary" | "deno";
        name: string;
    } & {
        readonly __kind: any;
    };
};
export declare type InstalledPlugin = z.infer<typeof generatedSchemas.schema>;
export declare type t = InstalledPlugin;
export declare const create: (input: {
    type: "npm" | "binary" | "deno";
    name: string;
}) => {
    type: "npm" | "binary" | "deno";
    name: string;
} & {
    readonly __kind: any;
}, of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    type: "npm" | "binary" | "deno";
    name: string;
} & {
    readonly __kind: any;
}>, make: (input: {
    type: "npm" | "binary" | "deno";
    name: string;
}) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    type: "npm" | "binary" | "deno";
    name: string;
} & {
    readonly __kind: any;
}>;
export declare const schemas: {
    schema: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        type: "npm" | "binary" | "deno";
        name: string;
    } & {
        readonly __kind: any;
    }, any>, {
        type: "npm" | "binary" | "deno";
        name: string;
    } & {
        readonly __kind: any;
    }, any>;
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
};
//# sourceMappingURL=InstalledPlugin.d.ts.map
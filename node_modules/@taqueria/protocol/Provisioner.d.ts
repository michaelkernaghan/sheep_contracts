import { z } from 'zod';
export declare const rawSchema: z.ZodObject<{
    id: z.ZodString;
    plugin: z.ZodOptional<z.ZodString>;
    operation: z.ZodUnion<[z.ZodString, z.ZodLiteral<"custom">]>;
    command: z.ZodOptional<z.ZodString>;
    label: z.ZodOptional<z.ZodString>;
    depends_on: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "passthrough", z.ZodTypeAny, {
    label?: string | undefined;
    plugin?: string | undefined;
    command?: string | undefined;
    depends_on?: string[] | undefined;
    operation: string;
    id: string;
}, {
    label?: string | undefined;
    plugin?: string | undefined;
    command?: string | undefined;
    depends_on?: string[] | undefined;
    operation: string;
    id: string;
}>;
export declare const internalSchema: z.ZodObject<z.extendShape<{
    id: z.ZodString;
    plugin: z.ZodOptional<z.ZodString>;
    operation: z.ZodUnion<[z.ZodString, z.ZodLiteral<"custom">]>;
    command: z.ZodOptional<z.ZodString>;
    label: z.ZodOptional<z.ZodString>;
    depends_on: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, {
    id: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __kind: any;
    }, any>, string & {
        readonly __kind: any;
    }, any>;
    depends_on: z.ZodOptional<z.ZodArray<z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __kind: any;
    }, any>, string & {
        readonly __kind: any;
    }, any>, "many">>;
}>, "passthrough", z.ZodTypeAny, {
    label?: string | undefined;
    plugin?: string | undefined;
    command?: string | undefined;
    depends_on?: (string & {
        readonly __kind: any;
    })[] | undefined;
    operation: string;
    id: string & {
        readonly __kind: any;
    };
}, {
    label?: string | undefined;
    plugin?: string | undefined;
    command?: string | undefined;
    id?: any;
    depends_on?: any[] | undefined;
    operation: string;
}>;
export declare type RawInput = z.infer<typeof rawSchema>;
export declare type Input = z.infer<typeof internalSchema>;
export declare const generatedSchemas: {
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
    schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        label?: string | undefined;
        plugin?: string | undefined;
        command?: string | undefined;
        depends_on?: (string & {
            readonly __kind: any;
        })[] | undefined;
        operation: string;
        id: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }, any>;
}, factory: {
    make: (input: {
        label?: string | undefined;
        plugin?: string | undefined;
        command?: string | undefined;
        depends_on?: (string & {
            readonly __kind: any;
        })[] | undefined;
        operation: string;
        id: string & {
            readonly __kind: any;
        };
    }) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        label?: string | undefined;
        plugin?: string | undefined;
        command?: string | undefined;
        depends_on?: (string & {
            readonly __kind: any;
        })[] | undefined;
        operation: string;
        id: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>;
    of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        label?: string | undefined;
        plugin?: string | undefined;
        command?: string | undefined;
        depends_on?: (string & {
            readonly __kind: any;
        })[] | undefined;
        operation: string;
        id: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>;
    create: (input: {
        label?: string | undefined;
        plugin?: string | undefined;
        command?: string | undefined;
        depends_on?: string[] | undefined;
        operation: string;
        id: string;
    } | {
        label?: string | undefined;
        plugin?: string | undefined;
        command?: string | undefined;
        depends_on?: (string & {
            readonly __kind: any;
        })[] | undefined;
        operation: string;
        id: string & {
            readonly __kind: any;
        };
    }) => {
        label?: string | undefined;
        plugin?: string | undefined;
        command?: string | undefined;
        depends_on?: (string & {
            readonly __kind: any;
        })[] | undefined;
        operation: string;
        id: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    };
    from: (input: unknown) => {
        label?: string | undefined;
        plugin?: string | undefined;
        command?: string | undefined;
        depends_on?: (string & {
            readonly __kind: any;
        })[] | undefined;
        operation: string;
        id: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    };
};
export declare type Provisioner = z.infer<typeof generatedSchemas.schema>;
export declare type t = Provisioner;
export declare const create: (input: {
    label?: string | undefined;
    plugin?: string | undefined;
    command?: string | undefined;
    depends_on?: string[] | undefined;
    operation: string;
    id: string;
} | {
    label?: string | undefined;
    plugin?: string | undefined;
    command?: string | undefined;
    depends_on?: (string & {
        readonly __kind: any;
    })[] | undefined;
    operation: string;
    id: string & {
        readonly __kind: any;
    };
}) => {
    label?: string | undefined;
    plugin?: string | undefined;
    command?: string | undefined;
    depends_on?: (string & {
        readonly __kind: any;
    })[] | undefined;
    operation: string;
    id: string & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
}, of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    label?: string | undefined;
    plugin?: string | undefined;
    command?: string | undefined;
    depends_on?: (string & {
        readonly __kind: any;
    })[] | undefined;
    operation: string;
    id: string & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
}>, make: (input: {
    label?: string | undefined;
    plugin?: string | undefined;
    command?: string | undefined;
    depends_on?: (string & {
        readonly __kind: any;
    })[] | undefined;
    operation: string;
    id: string & {
        readonly __kind: any;
    };
}) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    label?: string | undefined;
    plugin?: string | undefined;
    command?: string | undefined;
    depends_on?: (string & {
        readonly __kind: any;
    })[] | undefined;
    operation: string;
    id: string & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
}>;
export declare const schemas: {
    schema: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        label?: string | undefined;
        plugin?: string | undefined;
        command?: string | undefined;
        depends_on?: (string & {
            readonly __kind: any;
        })[] | undefined;
        operation: string;
        id: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }, any>, {
        label?: string | undefined;
        plugin?: string | undefined;
        command?: string | undefined;
        depends_on?: (string & {
            readonly __kind: any;
        })[] | undefined;
        operation: string;
        id: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }, any>;
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
};
//# sourceMappingURL=Provisioner.d.ts.map
// SanitizedArgs.ts
import createType from "@taqueria/protocol/Base";
import * as SanitizedAbsPath from "@taqueria/protocol/SanitizedAbsPath";
import { z } from "zod";
var rawSchema = z.object({
  _: z.array(z.union([z.string().min(1), z.number()])),
  projectDir: SanitizedAbsPath.schemas.schema,
  maxConcurrency: z.preprocess(
    (val) => typeof val === "string" ? parseInt(val) : Number(val),
    z.number().int().min(1).default(10)
  ),
  debug: z.preprocess(
    (val) => Boolean(val),
    z.boolean().default(false)
  ),
  disableState: z.preprocess(
    (val) => Boolean(val),
    z.boolean().default(false)
  ),
  logPluginRequests: z.preprocess(
    (val) => Boolean(val),
    z.boolean().default(false)
  ),
  fromVsCode: z.preprocess(
    (val) => Boolean(val),
    z.boolean().default(false)
  ),
  version: z.preprocess(
    (val) => Boolean(val),
    z.boolean().optional()
  ),
  build: z.preprocess(
    (val) => Boolean(val),
    z.boolean().optional()
  ),
  help: z.preprocess(
    (val) => Boolean(val),
    z.boolean().optional()
  ),
  yes: z.preprocess(
    (val) => Boolean(val),
    z.boolean().optional()
  ),
  plugin: z.string().min(1).optional(),
  env: z.union([z.literal("production"), z.literal("testing"), z.literal("development"), z.string().nonempty()]).default("development"),
  quickstart: z.string().min(1).optional(),
  setBuild: z.preprocess(
    (val) => String(val),
    z.string().min(3)
  ),
  setVersion: z.string().min(3),
  pluginName: z.string().min(1).optional()
}, { description: "Sanitizied Args" }).passthrough();
var scaffoldRawSchema = rawSchema.extend({
  scaffoldProjectDir: z.string().min(1).transform((val) => val),
  scaffoldUrl: z.string().min(1).url().transform((val) => val)
});
var provisionRawSchema = rawSchema.extend({
  operation: z.string().min(1).describe("Operation name"),
  name: z.string().min(1).regex(
    /^[a-z0-9]+[a-z0-9-_]$/,
    "Provisioner name must consist of one or more letters/numbers and may not start with an underscore or dash."
  ).describe("Provisioner name").optional()
}).passthrough();
var templateRawSchema = rawSchema.extend({
  template: z.string().min(1)
}).passthrough();
var managePluginRawSchema = rawSchema.omit({ pluginName: true }).extend({
  pluginName: z.string().min(1)
});
var versionRawSchema = rawSchema.extend({
  version: z.boolean().default(true)
});
var addContractsRawSchema = z.preprocess(
  (val) => {
    const obj = typeof val === "object" ? Object(val) : { contractName: "", sourceFile: "" };
    return !obj.contractName && obj.sourceFile ? { ...obj, contractName: obj["sourceFile"] } : obj;
  },
  rawSchema.extend({
    sourceFile: z.string().min(1),
    contractName: z.string().min(1)
  })
);
var removeContractsRawSchema = rawSchema.extend({
  contractName: z.string().min(1)
});
var { schemas: generatedSchemas, factory } = createType({
  rawSchema,
  parseErrMsg: "The arguments provided are invalid",
  unknownErrMsg: "Something went wrong parsing the command-line arguments"
});
var { create, of, make } = factory;
var schemas2 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
var scaffoldTaskArgs = createType({
  rawSchema: scaffoldRawSchema,
  parseErrMsg: "The arguments provided are invalid for the scaffold task",
  unknownErrMsg: "Something went wrong parsing the arguments for the scaffold task"
});
var provisionTaskArgs = createType({
  rawSchema: provisionRawSchema,
  parseErrMsg: "The arguments provided are invalid for the provision task",
  unknownErrMsg: "Something went wrong parsing the arguments for the provision task"
});
var installTaskArgs = createType({
  rawSchema: managePluginRawSchema,
  parseErrMsg: "The arguments provided are invalid for the install task",
  unknownErrMsg: "Something went wrong parsing the arguments for the install task"
});
var uninstallTaskArgs = createType({
  rawSchema: managePluginRawSchema,
  parseErrMsg: "The arguments provided are invalid for the uninstall task",
  unknownErrMsg: "Something went wrong parsing the arguments for the uninstall task"
});
var createTaskArgs = createType({
  rawSchema: templateRawSchema,
  parseErrMsg: "The arguments provided are invalid for the create task",
  unknownErrMsg: "Something went wrong parsing the arguments for the create task"
});
var addContractArgs = createType({
  rawSchema: addContractsRawSchema,
  parseErrMsg: "Please specify the source file to register.",
  unknownErrMsg: "Something went wrong parsing the arguments for registering a contract."
});
var removeContractsArgs = createType({
  rawSchema: removeContractsRawSchema,
  parseErrMsg: "Please specify the contract name to unregister.",
  unknownErrMsg: "Something went wrong parsing the arguments to unregister a contract."
});
var createScaffoldTaskArgs = scaffoldTaskArgs.factory.from;
var makeScaffoldTaskArgs = scaffoldTaskArgs.factory.make;
var ofScaffoldTaskArgs = scaffoldTaskArgs.factory.of;
var createProvisionTaskArgs = provisionTaskArgs.factory.create;
var makeProvisionTaskArgs = provisionTaskArgs.factory.make;
var ofProvisionTaskArgs = provisionTaskArgs.factory.of;
var createInstallTaskArgs = installTaskArgs.factory.create;
var makeInstallTaskArgs = installTaskArgs.factory.make;
var ofInstallTaskArgs = installTaskArgs.factory.of;
var createUninstallTaskArgs = uninstallTaskArgs.factory.create;
var makeUninstallTaskArgs = uninstallTaskArgs.factory.make;
var ofUninstallTaskArgs = uninstallTaskArgs.factory.of;
var createCreateTaskArgs = createTaskArgs.factory.create;
var makeCreateTaskArgs = createTaskArgs.factory.make;
var ofCreateTaskArgs = createTaskArgs.factory.of;
var createAddContractArgs = addContractArgs.factory.create;
var makeAddContractArgs = addContractArgs.factory.make;
var ofAddContractArgs = addContractArgs.factory.of;
var createRemoveContractsArgs = removeContractsArgs.factory.create;
var makeRemoveContractsArgs = removeContractsArgs.factory.make;
var ofRemoveContractsArgs = removeContractsArgs.factory.of;
export {
  addContractArgs,
  addContractsRawSchema,
  create,
  createAddContractArgs,
  createCreateTaskArgs,
  createInstallTaskArgs,
  createProvisionTaskArgs,
  createRemoveContractsArgs,
  createScaffoldTaskArgs,
  createTaskArgs,
  createUninstallTaskArgs,
  factory,
  generatedSchemas,
  installTaskArgs,
  make,
  makeAddContractArgs,
  makeCreateTaskArgs,
  makeInstallTaskArgs,
  makeProvisionTaskArgs,
  makeRemoveContractsArgs,
  makeScaffoldTaskArgs,
  makeUninstallTaskArgs,
  managePluginRawSchema,
  of,
  ofAddContractArgs,
  ofCreateTaskArgs,
  ofInstallTaskArgs,
  ofProvisionTaskArgs,
  ofRemoveContractsArgs,
  ofScaffoldTaskArgs,
  ofUninstallTaskArgs,
  provisionRawSchema,
  provisionTaskArgs,
  rawSchema,
  removeContractsArgs,
  removeContractsRawSchema,
  scaffoldRawSchema,
  scaffoldTaskArgs,
  schemas2 as schemas,
  templateRawSchema,
  uninstallTaskArgs,
  versionRawSchema
};
//# sourceMappingURL=SanitizedArgs.mjs.map
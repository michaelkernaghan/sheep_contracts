import { z } from 'zod';
export declare const rawSchema: z.ZodObject<{
    data: z.ZodOptional<z.ZodUnknown>;
    render: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"table">, z.ZodLiteral<"string">]>>;
}, "strip", z.ZodTypeAny, {
    data?: unknown;
    render?: "string" | "none" | "table" | undefined;
}, {
    data?: unknown;
    render?: "string" | "none" | "table" | undefined;
}>;
export declare const pluginJsonResponse: {
    schemas: {
        rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
        internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
        schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } & {
            readonly __kind: any;
        }, any>;
    };
    factory: {
        make: (input: {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } & {
            readonly __kind: any;
        }>;
        of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } & {
            readonly __kind: any;
        }>;
        create: (input: {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }) => {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } & {
            readonly __kind: any;
        };
        from: (input: unknown) => {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        } & {
            readonly __kind: any;
        };
    };
};
export declare type PluginJsonResponse = z.infer<typeof pluginJsonResponse.schemas.schema>;
export declare type t = PluginJsonResponse;
export declare const schemas: {
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
    schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        data?: unknown;
        render?: "string" | "none" | "table" | undefined;
    } & {
        readonly __kind: any;
    }, any>;
}, factory: {
    make: (input: {
        data?: unknown;
        render?: "string" | "none" | "table" | undefined;
    }) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        data?: unknown;
        render?: "string" | "none" | "table" | undefined;
    } & {
        readonly __kind: any;
    }>;
    of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        data?: unknown;
        render?: "string" | "none" | "table" | undefined;
    } & {
        readonly __kind: any;
    }>;
    create: (input: {
        data?: unknown;
        render?: "string" | "none" | "table" | undefined;
    }) => {
        data?: unknown;
        render?: "string" | "none" | "table" | undefined;
    } & {
        readonly __kind: any;
    };
    from: (input: unknown) => {
        data?: unknown;
        render?: "string" | "none" | "table" | undefined;
    } & {
        readonly __kind: any;
    };
};
//# sourceMappingURL=PluginJsonResponse.d.ts.map
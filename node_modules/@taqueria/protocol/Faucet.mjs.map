{"version":3,"sources":["Faucet.ts"],"sourcesContent":["import createType, { Flatten } from '@taqueria/protocol/Base';\nimport * as PublicKeyHash from '@taqueria/protocol/PublicKeyHash';\nimport { z } from 'zod';\n\nconst commonSchema = z.object({\n\tmnemonic: z.preprocess(\n\t\targ => typeof arg === 'string' ? arg.split(' ') : arg,\n\t\tz.array(\n\t\t\tz.string({ description: 'Faucet Mnemonic Word' }).min(1).regex(/^[a-z]{2,}$/),\n\t\t\t{ description: 'Faucet Mnemonic' },\n\t\t),\n\t),\n\temail: z.string({ description: 'Faucet E-mail' }).regex(/^([\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4})?$/).optional(),\n\tpassword: z.string({ description: 'Faucet Password' }).optional(),\n\tamount: z.string({ description: 'Faucet Amount' }).refine(\n\t\tval => val.length === 0 || /^\\d+$/.test(val),\n\t\t'Amount, if present, must be numeric',\n\t).optional(),\n\tactivation_code: z.string({ description: 'Faucet Activation Code' }).optional(),\n});\n\nexport const rawSchema = commonSchema.extend({\n\tpkh: z.string({ description: 'Faucet Public Key Hash' }).min(1),\n}).describe('Faucet');\n\nconst internalSchema = z.preprocess(\n\tinput => {\n\t\tconst defaults = {\n\t\t\tpkh: '',\n\t\t\tmnemonic: [],\n\t\t\temail: '',\n\t\t\tpassword: '',\n\t\t\tactivation_code: '',\n\t\t};\n\t\treturn typeof input === 'object'\n\t\t\t? { ...defaults, ...input }\n\t\t\t: defaults;\n\t},\n\tcommonSchema.extend({\n\t\tpkh: PublicKeyHash.schemas.schema,\n\t}),\n).describe('Faucet');\n\ntype RawInput = z.infer<typeof rawSchema>;\ntype Input = z.infer<typeof internalSchema>;\n\nexport const { schemas: generatedSchemas, factory } = createType<RawInput, Input>({\n\trawSchema,\n\tinternalSchema,\n\tparseErrMsg: (value: unknown) => `${value} is not a valid faucet configuration`,\n\tunknownErrMsg: 'Something went wrong trying to parse the faucet',\n});\n\nexport type Faucet = Flatten<z.infer<typeof generatedSchemas.schema>>;\nexport type t = Faucet;\nexport const { create, of, make } = factory;\n\nexport const schemas = {\n\t...generatedSchemas,\n\tschema: generatedSchemas.schema.transform(val => val as Faucet),\n};\n"],"mappings":";AAAA,OAAO,gBAA6B;AACpC,YAAY,mBAAmB;AAC/B,SAAS,SAAS;AAElB,IAAM,eAAe,EAAE,OAAO;AAAA,EAC7B,UAAU,EAAE;AAAA,IACX,SAAO,OAAO,QAAQ,WAAW,IAAI,MAAM,GAAG,IAAI;AAAA,IAClD,EAAE;AAAA,MACD,EAAE,OAAO,EAAE,aAAa,uBAAuB,CAAC,EAAE,IAAI,CAAC,EAAE,MAAM,aAAa;AAAA,MAC5E,EAAE,aAAa,kBAAkB;AAAA,IAClC;AAAA,EACD;AAAA,EACA,OAAO,EAAE,OAAO,EAAE,aAAa,gBAAgB,CAAC,EAAE,MAAM,qCAAqC,EAAE,SAAS;AAAA,EACxG,UAAU,EAAE,OAAO,EAAE,aAAa,kBAAkB,CAAC,EAAE,SAAS;AAAA,EAChE,QAAQ,EAAE,OAAO,EAAE,aAAa,gBAAgB,CAAC,EAAE;AAAA,IAClD,SAAO,IAAI,WAAW,KAAK,QAAQ,KAAK,GAAG;AAAA,IAC3C;AAAA,EACD,EAAE,SAAS;AAAA,EACX,iBAAiB,EAAE,OAAO,EAAE,aAAa,yBAAyB,CAAC,EAAE,SAAS;AAC/E,CAAC;AAEM,IAAM,YAAY,aAAa,OAAO;AAAA,EAC5C,KAAK,EAAE,OAAO,EAAE,aAAa,yBAAyB,CAAC,EAAE,IAAI,CAAC;AAC/D,CAAC,EAAE,SAAS,QAAQ;AAEpB,IAAM,iBAAiB,EAAE;AAAA,EACxB,WAAS;AACR,UAAM,WAAW;AAAA,MAChB,KAAK;AAAA,MACL,UAAU,CAAC;AAAA,MACX,OAAO;AAAA,MACP,UAAU;AAAA,MACV,iBAAiB;AAAA,IAClB;AACA,WAAO,OAAO,UAAU,WACrB,EAAE,GAAG,UAAU,GAAG,MAAM,IACxB;AAAA,EACJ;AAAA,EACA,aAAa,OAAO;AAAA,IACnB,KAAmB,sBAAQ;AAAA,EAC5B,CAAC;AACF,EAAE,SAAS,QAAQ;AAKZ,IAAM,EAAE,SAAS,kBAAkB,QAAQ,IAAI,WAA4B;AAAA,EACjF;AAAA,EACA;AAAA,EACA,aAAa,CAAC,UAAmB,GAAG;AAAA,EACpC,eAAe;AAChB,CAAC;AAIM,IAAM,EAAE,QAAQ,IAAI,KAAK,IAAI;AAE7B,IAAMA,WAAU;AAAA,EACtB,GAAG;AAAA,EACH,QAAQ,iBAAiB,OAAO,UAAU,SAAO,GAAa;AAC/D;","names":["schemas"]}
import { TaqError } from '@taqueria/protocol/TaqError';
import { FutureInstance as Future } from 'fluture';
import { z } from 'zod';
export declare const rawSchema: z.ZodString;
export declare const toSHA256: (value: string) => Promise<string & {
    readonly __kind: any;
}>;
export declare const internalSchema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
    readonly __kind: any;
}, any>;
export declare type SHA256 = z.infer<typeof internalSchema>;
export declare type t = SHA256;
export declare const create: (input: string) => string & {
    readonly __kind: any;
}, of: (input: unknown) => Future<TaqError, string & {
    readonly __kind: any;
}>, make: (input: string) => Future<TaqError, string & {
    readonly __kind: any;
}>;
export declare const schemas: {
    schema: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __kind: any;
    }, any>, string & {
        readonly __kind: any;
    }, any>;
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
};
//# sourceMappingURL=SHA256.d.ts.map
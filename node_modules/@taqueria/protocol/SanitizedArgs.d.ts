import { z } from 'zod';
export declare const rawSchema: z.ZodObject<{
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __kind: any;
    }, any>, string & {
        readonly __kind: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodString>;
    env: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"production">, z.ZodLiteral<"testing">, z.ZodLiteral<"development">, z.ZodString]>>;
    quickstart: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
}, "passthrough", z.ZodTypeAny, {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
}, {
    plugin?: string | undefined;
    debug?: unknown;
    fromVsCode?: unknown;
    projectDir?: any;
    maxConcurrency?: unknown;
    disableState?: unknown;
    logPluginRequests?: unknown;
    version?: unknown;
    build?: unknown;
    help?: unknown;
    yes?: unknown;
    env?: string | undefined;
    quickstart?: string | undefined;
    setBuild?: unknown;
    pluginName?: string | undefined;
    _: (string | number)[];
    setVersion: string;
}>;
export declare const scaffoldRawSchema: z.ZodObject<z.extendShape<{
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __kind: any;
    }, any>, string & {
        readonly __kind: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodString>;
    env: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"production">, z.ZodLiteral<"testing">, z.ZodLiteral<"development">, z.ZodString]>>;
    quickstart: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
}, {
    scaffoldProjectDir: z.ZodEffects<z.ZodString, string & {
        readonly __kind: any;
    }, string>;
    scaffoldUrl: z.ZodEffects<z.ZodString, string & {
        readonly __kind: any;
    }, string>;
}>, "passthrough", z.ZodTypeAny, {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    scaffoldProjectDir: string & {
        readonly __kind: any;
    };
    scaffoldUrl: string & {
        readonly __kind: any;
    };
}, {
    plugin?: string | undefined;
    debug?: unknown;
    fromVsCode?: unknown;
    projectDir?: any;
    maxConcurrency?: unknown;
    disableState?: unknown;
    logPluginRequests?: unknown;
    version?: unknown;
    build?: unknown;
    help?: unknown;
    yes?: unknown;
    env?: string | undefined;
    quickstart?: string | undefined;
    setBuild?: unknown;
    pluginName?: string | undefined;
    _: (string | number)[];
    setVersion: string;
    scaffoldProjectDir: string;
    scaffoldUrl: string;
}>;
export declare const provisionRawSchema: z.ZodObject<z.extendShape<{
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __kind: any;
    }, any>, string & {
        readonly __kind: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodString>;
    env: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"production">, z.ZodLiteral<"testing">, z.ZodLiteral<"development">, z.ZodString]>>;
    quickstart: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
}, {
    operation: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
}>, "passthrough", z.ZodTypeAny, {
    name?: string | undefined;
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    operation: string;
}, {
    name?: string | undefined;
    plugin?: string | undefined;
    debug?: unknown;
    fromVsCode?: unknown;
    projectDir?: any;
    maxConcurrency?: unknown;
    disableState?: unknown;
    logPluginRequests?: unknown;
    version?: unknown;
    build?: unknown;
    help?: unknown;
    yes?: unknown;
    env?: string | undefined;
    quickstart?: string | undefined;
    setBuild?: unknown;
    pluginName?: string | undefined;
    _: (string | number)[];
    setVersion: string;
    operation: string;
}>;
export declare const templateRawSchema: z.ZodObject<z.extendShape<{
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __kind: any;
    }, any>, string & {
        readonly __kind: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodString>;
    env: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"production">, z.ZodLiteral<"testing">, z.ZodLiteral<"development">, z.ZodString]>>;
    quickstart: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
}, {
    template: z.ZodString;
}>, "passthrough", z.ZodTypeAny, {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    template: string;
}, {
    plugin?: string | undefined;
    debug?: unknown;
    fromVsCode?: unknown;
    projectDir?: any;
    maxConcurrency?: unknown;
    disableState?: unknown;
    logPluginRequests?: unknown;
    version?: unknown;
    build?: unknown;
    help?: unknown;
    yes?: unknown;
    env?: string | undefined;
    quickstart?: string | undefined;
    setBuild?: unknown;
    pluginName?: string | undefined;
    _: (string | number)[];
    setVersion: string;
    template: string;
}>;
export declare const managePluginRawSchema: z.ZodObject<z.extendShape<Omit<{
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __kind: any;
    }, any>, string & {
        readonly __kind: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodString>;
    env: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"production">, z.ZodLiteral<"testing">, z.ZodLiteral<"development">, z.ZodString]>>;
    quickstart: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
}, "pluginName">, {
    pluginName: z.ZodString;
}>, "passthrough", z.ZodTypeAny, {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    pluginName: string;
}, {
    plugin?: string | undefined;
    debug?: unknown;
    fromVsCode?: unknown;
    projectDir?: any;
    maxConcurrency?: unknown;
    disableState?: unknown;
    logPluginRequests?: unknown;
    version?: unknown;
    build?: unknown;
    help?: unknown;
    yes?: unknown;
    env?: string | undefined;
    quickstart?: string | undefined;
    setBuild?: unknown;
    _: (string | number)[];
    setVersion: string;
    pluginName: string;
}>;
export declare const versionRawSchema: z.ZodObject<z.extendShape<{
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __kind: any;
    }, any>, string & {
        readonly __kind: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodString>;
    env: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"production">, z.ZodLiteral<"testing">, z.ZodLiteral<"development">, z.ZodString]>>;
    quickstart: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
}, {
    version: z.ZodDefault<z.ZodBoolean>;
}>, "passthrough", z.ZodTypeAny, {
    plugin?: string | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    version: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
}, {
    plugin?: string | undefined;
    debug?: unknown;
    fromVsCode?: unknown;
    projectDir?: any;
    maxConcurrency?: unknown;
    disableState?: unknown;
    logPluginRequests?: unknown;
    version?: boolean | undefined;
    build?: unknown;
    help?: unknown;
    yes?: unknown;
    env?: string | undefined;
    quickstart?: string | undefined;
    setBuild?: unknown;
    pluginName?: string | undefined;
    _: (string | number)[];
    setVersion: string;
}>;
export declare const addContractsRawSchema: z.ZodEffects<z.ZodObject<z.extendShape<{
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __kind: any;
    }, any>, string & {
        readonly __kind: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodString>;
    env: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"production">, z.ZodLiteral<"testing">, z.ZodLiteral<"development">, z.ZodString]>>;
    quickstart: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
}, {
    sourceFile: z.ZodString;
    contractName: z.ZodString;
}>, "passthrough", z.ZodTypeAny, {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    sourceFile: string;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    contractName: string;
}, {
    plugin?: string | undefined;
    debug?: unknown;
    fromVsCode?: unknown;
    projectDir?: any;
    maxConcurrency?: unknown;
    disableState?: unknown;
    logPluginRequests?: unknown;
    version?: unknown;
    build?: unknown;
    help?: unknown;
    yes?: unknown;
    env?: string | undefined;
    quickstart?: string | undefined;
    setBuild?: unknown;
    pluginName?: string | undefined;
    sourceFile: string;
    _: (string | number)[];
    setVersion: string;
    contractName: string;
}>, {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    sourceFile: string;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    contractName: string;
}, unknown>;
export declare const removeContractsRawSchema: z.ZodObject<z.extendShape<{
    _: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
    projectDir: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __kind: any;
    }, any>, string & {
        readonly __kind: any;
    }, any>;
    maxConcurrency: z.ZodEffects<z.ZodDefault<z.ZodNumber>, number, unknown>;
    debug: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    disableState: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    logPluginRequests: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    fromVsCode: z.ZodEffects<z.ZodDefault<z.ZodBoolean>, boolean, unknown>;
    version: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    build: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    help: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    yes: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, unknown>;
    plugin: z.ZodOptional<z.ZodString>;
    env: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"production">, z.ZodLiteral<"testing">, z.ZodLiteral<"development">, z.ZodString]>>;
    quickstart: z.ZodOptional<z.ZodString>;
    setBuild: z.ZodEffects<z.ZodString, string, unknown>;
    setVersion: z.ZodString;
    pluginName: z.ZodOptional<z.ZodString>;
}, {
    contractName: z.ZodString;
}>, "passthrough", z.ZodTypeAny, {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    contractName: string;
}, {
    plugin?: string | undefined;
    debug?: unknown;
    fromVsCode?: unknown;
    projectDir?: any;
    maxConcurrency?: unknown;
    disableState?: unknown;
    logPluginRequests?: unknown;
    version?: unknown;
    build?: unknown;
    help?: unknown;
    yes?: unknown;
    env?: string | undefined;
    quickstart?: string | undefined;
    setBuild?: unknown;
    pluginName?: string | undefined;
    _: (string | number)[];
    setVersion: string;
    contractName: string;
}>;
export declare const generatedSchemas: {
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
    schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        plugin?: string | undefined;
        version?: boolean | undefined;
        build?: boolean | undefined;
        help?: boolean | undefined;
        yes?: boolean | undefined;
        quickstart?: string | undefined;
        pluginName?: string | undefined;
        debug: boolean;
        fromVsCode: boolean;
        projectDir: string & {
            readonly __kind: any;
        };
        _: (string | number)[];
        maxConcurrency: number;
        disableState: boolean;
        logPluginRequests: boolean;
        env: string;
        setBuild: string;
        setVersion: string;
    } & {
        readonly __kind: any;
    }, any>;
}, factory: {
    make: (input: {
        plugin?: string | undefined;
        version?: boolean | undefined;
        build?: boolean | undefined;
        help?: boolean | undefined;
        yes?: boolean | undefined;
        quickstart?: string | undefined;
        pluginName?: string | undefined;
        debug: boolean;
        fromVsCode: boolean;
        projectDir: string & {
            readonly __kind: any;
        };
        _: (string | number)[];
        maxConcurrency: number;
        disableState: boolean;
        logPluginRequests: boolean;
        env: string;
        setBuild: string;
        setVersion: string;
    }) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        plugin?: string | undefined;
        version?: boolean | undefined;
        build?: boolean | undefined;
        help?: boolean | undefined;
        yes?: boolean | undefined;
        quickstart?: string | undefined;
        pluginName?: string | undefined;
        debug: boolean;
        fromVsCode: boolean;
        projectDir: string & {
            readonly __kind: any;
        };
        _: (string | number)[];
        maxConcurrency: number;
        disableState: boolean;
        logPluginRequests: boolean;
        env: string;
        setBuild: string;
        setVersion: string;
    } & {
        readonly __kind: any;
    }>;
    of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        plugin?: string | undefined;
        version?: boolean | undefined;
        build?: boolean | undefined;
        help?: boolean | undefined;
        yes?: boolean | undefined;
        quickstart?: string | undefined;
        pluginName?: string | undefined;
        debug: boolean;
        fromVsCode: boolean;
        projectDir: string & {
            readonly __kind: any;
        };
        _: (string | number)[];
        maxConcurrency: number;
        disableState: boolean;
        logPluginRequests: boolean;
        env: string;
        setBuild: string;
        setVersion: string;
    } & {
        readonly __kind: any;
    }>;
    create: (input: {
        plugin?: string | undefined;
        version?: boolean | undefined;
        build?: boolean | undefined;
        help?: boolean | undefined;
        yes?: boolean | undefined;
        quickstart?: string | undefined;
        pluginName?: string | undefined;
        debug: boolean;
        fromVsCode: boolean;
        projectDir: string & {
            readonly __kind: any;
        };
        _: (string | number)[];
        maxConcurrency: number;
        disableState: boolean;
        logPluginRequests: boolean;
        env: string;
        setBuild: string;
        setVersion: string;
    }) => {
        plugin?: string | undefined;
        version?: boolean | undefined;
        build?: boolean | undefined;
        help?: boolean | undefined;
        yes?: boolean | undefined;
        quickstart?: string | undefined;
        pluginName?: string | undefined;
        debug: boolean;
        fromVsCode: boolean;
        projectDir: string & {
            readonly __kind: any;
        };
        _: (string | number)[];
        maxConcurrency: number;
        disableState: boolean;
        logPluginRequests: boolean;
        env: string;
        setBuild: string;
        setVersion: string;
    } & {
        readonly __kind: any;
    };
    from: (input: unknown) => {
        plugin?: string | undefined;
        version?: boolean | undefined;
        build?: boolean | undefined;
        help?: boolean | undefined;
        yes?: boolean | undefined;
        quickstart?: string | undefined;
        pluginName?: string | undefined;
        debug: boolean;
        fromVsCode: boolean;
        projectDir: string & {
            readonly __kind: any;
        };
        _: (string | number)[];
        maxConcurrency: number;
        disableState: boolean;
        logPluginRequests: boolean;
        env: string;
        setBuild: string;
        setVersion: string;
    } & {
        readonly __kind: any;
    };
};
export declare const create: (input: {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
}) => {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
} & {
    readonly __kind: any;
}, of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
} & {
    readonly __kind: any;
}>, make: (input: {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
}) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
} & {
    readonly __kind: any;
}>;
export declare type SanitizedArgs = z.infer<typeof generatedSchemas.schema>;
export declare type t = SanitizedArgs;
export declare const schemas: {
    schema: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        plugin?: string | undefined;
        version?: boolean | undefined;
        build?: boolean | undefined;
        help?: boolean | undefined;
        yes?: boolean | undefined;
        quickstart?: string | undefined;
        pluginName?: string | undefined;
        debug: boolean;
        fromVsCode: boolean;
        projectDir: string & {
            readonly __kind: any;
        };
        _: (string | number)[];
        maxConcurrency: number;
        disableState: boolean;
        logPluginRequests: boolean;
        env: string;
        setBuild: string;
        setVersion: string;
    } & {
        readonly __kind: any;
    }, any>, {
        plugin?: string | undefined;
        version?: boolean | undefined;
        build?: boolean | undefined;
        help?: boolean | undefined;
        yes?: boolean | undefined;
        quickstart?: string | undefined;
        pluginName?: string | undefined;
        debug: boolean;
        fromVsCode: boolean;
        projectDir: string & {
            readonly __kind: any;
        };
        _: (string | number)[];
        maxConcurrency: number;
        disableState: boolean;
        logPluginRequests: boolean;
        env: string;
        setBuild: string;
        setVersion: string;
    } & {
        readonly __kind: any;
    }, any>;
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
};
export declare const scaffoldTaskArgs: {
    schemas: {
        rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
        internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
        schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            scaffoldProjectDir: string & {
                readonly __kind: any;
            };
            scaffoldUrl: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }, any>;
    };
    factory: {
        make: (input: {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            scaffoldProjectDir: string & {
                readonly __kind: any;
            };
            scaffoldUrl: string & {
                readonly __kind: any;
            };
        }) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            scaffoldProjectDir: string & {
                readonly __kind: any;
            };
            scaffoldUrl: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>;
        of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            scaffoldProjectDir: string & {
                readonly __kind: any;
            };
            scaffoldUrl: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>;
        create: (input: {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            scaffoldProjectDir: string & {
                readonly __kind: any;
            };
            scaffoldUrl: string & {
                readonly __kind: any;
            };
        }) => {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            scaffoldProjectDir: string & {
                readonly __kind: any;
            };
            scaffoldUrl: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        };
        from: (input: unknown) => {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            scaffoldProjectDir: string & {
                readonly __kind: any;
            };
            scaffoldUrl: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        };
    };
};
export declare const provisionTaskArgs: {
    schemas: {
        rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
        internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
        schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
            name?: string | undefined;
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            operation: string;
        } & {
            readonly __kind: any;
        }, any>;
    };
    factory: {
        make: (input: {
            name?: string | undefined;
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            operation: string;
        }) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            name?: string | undefined;
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            operation: string;
        } & {
            readonly __kind: any;
        }>;
        of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            name?: string | undefined;
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            operation: string;
        } & {
            readonly __kind: any;
        }>;
        create: (input: {
            name?: string | undefined;
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            operation: string;
        }) => {
            name?: string | undefined;
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            operation: string;
        } & {
            readonly __kind: any;
        };
        from: (input: unknown) => {
            name?: string | undefined;
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            operation: string;
        } & {
            readonly __kind: any;
        };
    };
};
export declare const installTaskArgs: {
    schemas: {
        rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
        internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
        schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            pluginName: string;
        } & {
            readonly __kind: any;
        }, any>;
    };
    factory: {
        make: (input: {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            pluginName: string;
        }) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            pluginName: string;
        } & {
            readonly __kind: any;
        }>;
        of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            pluginName: string;
        } & {
            readonly __kind: any;
        }>;
        create: (input: {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            pluginName: string;
        }) => {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            pluginName: string;
        } & {
            readonly __kind: any;
        };
        from: (input: unknown) => {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            pluginName: string;
        } & {
            readonly __kind: any;
        };
    };
};
export declare const uninstallTaskArgs: {
    schemas: {
        rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
        internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
        schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            pluginName: string;
        } & {
            readonly __kind: any;
        }, any>;
    };
    factory: {
        make: (input: {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            pluginName: string;
        }) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            pluginName: string;
        } & {
            readonly __kind: any;
        }>;
        of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            pluginName: string;
        } & {
            readonly __kind: any;
        }>;
        create: (input: {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            pluginName: string;
        }) => {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            pluginName: string;
        } & {
            readonly __kind: any;
        };
        from: (input: unknown) => {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            pluginName: string;
        } & {
            readonly __kind: any;
        };
    };
};
export declare const createTaskArgs: {
    schemas: {
        rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
        internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
        schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            template: string;
        } & {
            readonly __kind: any;
        }, any>;
    };
    factory: {
        make: (input: {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            template: string;
        }) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            template: string;
        } & {
            readonly __kind: any;
        }>;
        of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            template: string;
        } & {
            readonly __kind: any;
        }>;
        create: (input: {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            template: string;
        }) => {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            template: string;
        } & {
            readonly __kind: any;
        };
        from: (input: unknown) => {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            template: string;
        } & {
            readonly __kind: any;
        };
    };
};
export declare const addContractArgs: {
    schemas: {
        rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
        internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
        schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            sourceFile: string;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            contractName: string;
        } & {
            readonly __kind: any;
        }, any>;
    };
    factory: {
        make: (input: {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            sourceFile: string;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            contractName: string;
        }) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            sourceFile: string;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            contractName: string;
        } & {
            readonly __kind: any;
        }>;
        of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            sourceFile: string;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            contractName: string;
        } & {
            readonly __kind: any;
        }>;
        create: (input: {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            sourceFile: string;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            contractName: string;
        }) => {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            sourceFile: string;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            contractName: string;
        } & {
            readonly __kind: any;
        };
        from: (input: unknown) => {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            sourceFile: string;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            contractName: string;
        } & {
            readonly __kind: any;
        };
    };
};
export declare const removeContractsArgs: {
    schemas: {
        rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
        internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
        schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            contractName: string;
        } & {
            readonly __kind: any;
        }, any>;
    };
    factory: {
        make: (input: {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            contractName: string;
        }) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            contractName: string;
        } & {
            readonly __kind: any;
        }>;
        of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            contractName: string;
        } & {
            readonly __kind: any;
        }>;
        create: (input: {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            contractName: string;
        }) => {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            contractName: string;
        } & {
            readonly __kind: any;
        };
        from: (input: unknown) => {
            plugin?: string | undefined;
            version?: boolean | undefined;
            build?: boolean | undefined;
            help?: boolean | undefined;
            yes?: boolean | undefined;
            quickstart?: string | undefined;
            pluginName?: string | undefined;
            debug: boolean;
            fromVsCode: boolean;
            projectDir: string & {
                readonly __kind: any;
            };
            _: (string | number)[];
            maxConcurrency: number;
            disableState: boolean;
            logPluginRequests: boolean;
            env: string;
            setBuild: string;
            setVersion: string;
            contractName: string;
        } & {
            readonly __kind: any;
        };
    };
};
export declare type ScaffoldTaskArgs = z.infer<typeof scaffoldTaskArgs.schemas.schema>;
export declare type ProvisionTaskArgs = z.infer<typeof provisionTaskArgs.schemas.schema>;
export declare type InstallTaskArgs = z.infer<typeof installTaskArgs.schemas.schema>;
export declare type UninstallTaskArgs = z.infer<typeof uninstallTaskArgs.schemas.schema>;
export declare type CreateTaskArgs = z.infer<typeof createTaskArgs.schemas.schema>;
export declare type AddContractArgs = z.infer<typeof addContractArgs.schemas.schema>;
export declare type RemoveContractArgs = z.infer<typeof removeContractsArgs.schemas.schema>;
export declare const createScaffoldTaskArgs: (input: unknown) => {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    scaffoldProjectDir: string & {
        readonly __kind: any;
    };
    scaffoldUrl: string & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
};
export declare const makeScaffoldTaskArgs: (input: {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    scaffoldProjectDir: string & {
        readonly __kind: any;
    };
    scaffoldUrl: string & {
        readonly __kind: any;
    };
}) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    scaffoldProjectDir: string & {
        readonly __kind: any;
    };
    scaffoldUrl: string & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
}>;
export declare const ofScaffoldTaskArgs: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    scaffoldProjectDir: string & {
        readonly __kind: any;
    };
    scaffoldUrl: string & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
}>;
export declare const createProvisionTaskArgs: (input: {
    name?: string | undefined;
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    operation: string;
}) => {
    name?: string | undefined;
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    operation: string;
} & {
    readonly __kind: any;
};
export declare const makeProvisionTaskArgs: (input: {
    name?: string | undefined;
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    operation: string;
}) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    name?: string | undefined;
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    operation: string;
} & {
    readonly __kind: any;
}>;
export declare const ofProvisionTaskArgs: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    name?: string | undefined;
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    operation: string;
} & {
    readonly __kind: any;
}>;
export declare const createInstallTaskArgs: (input: {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    pluginName: string;
}) => {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    pluginName: string;
} & {
    readonly __kind: any;
};
export declare const makeInstallTaskArgs: (input: {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    pluginName: string;
}) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    pluginName: string;
} & {
    readonly __kind: any;
}>;
export declare const ofInstallTaskArgs: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    pluginName: string;
} & {
    readonly __kind: any;
}>;
export declare const createUninstallTaskArgs: (input: {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    pluginName: string;
}) => {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    pluginName: string;
} & {
    readonly __kind: any;
};
export declare const makeUninstallTaskArgs: (input: {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    pluginName: string;
}) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    pluginName: string;
} & {
    readonly __kind: any;
}>;
export declare const ofUninstallTaskArgs: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    pluginName: string;
} & {
    readonly __kind: any;
}>;
export declare const createCreateTaskArgs: (input: {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    template: string;
}) => {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    template: string;
} & {
    readonly __kind: any;
};
export declare const makeCreateTaskArgs: (input: {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    template: string;
}) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    template: string;
} & {
    readonly __kind: any;
}>;
export declare const ofCreateTaskArgs: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    template: string;
} & {
    readonly __kind: any;
}>;
export declare const createAddContractArgs: (input: {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    sourceFile: string;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    contractName: string;
}) => {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    sourceFile: string;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    contractName: string;
} & {
    readonly __kind: any;
};
export declare const makeAddContractArgs: (input: {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    sourceFile: string;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    contractName: string;
}) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    sourceFile: string;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    contractName: string;
} & {
    readonly __kind: any;
}>;
export declare const ofAddContractArgs: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    sourceFile: string;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    contractName: string;
} & {
    readonly __kind: any;
}>;
export declare const createRemoveContractsArgs: (input: {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    contractName: string;
}) => {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    contractName: string;
} & {
    readonly __kind: any;
};
export declare const makeRemoveContractsArgs: (input: {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    contractName: string;
}) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    contractName: string;
} & {
    readonly __kind: any;
}>;
export declare const ofRemoveContractsArgs: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    plugin?: string | undefined;
    version?: boolean | undefined;
    build?: boolean | undefined;
    help?: boolean | undefined;
    yes?: boolean | undefined;
    quickstart?: string | undefined;
    pluginName?: string | undefined;
    debug: boolean;
    fromVsCode: boolean;
    projectDir: string & {
        readonly __kind: any;
    };
    _: (string | number)[];
    maxConcurrency: number;
    disableState: boolean;
    logPluginRequests: boolean;
    env: string;
    setBuild: string;
    setVersion: string;
    contractName: string;
} & {
    readonly __kind: any;
}>;
//# sourceMappingURL=SanitizedArgs.d.ts.map
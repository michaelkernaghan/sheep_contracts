// SandboxAccountConfig.ts
import createType from "@taqueria/protocol/Base";
import * as PublicKeyHash from "@taqueria/protocol/PublicKeyHash";
import { z } from "zod";
var internalSchema = z.object({
  encryptedKey: z.string({ description: "Sandbox Account Encrypted Key" }).min(1),
  publicKeyHash: PublicKeyHash.schemas.schema.describe("Sandbox Account Public Key Hash"),
  secretKey: z.string({ description: "Sandbox Account Secret Key" }).min(1)
}, { description: "Sandbox Account Configuration" });
var rawSchema = z.object({
  encryptedKey: z.string({ description: "Sandbox Account Encrypted Key" }).min(1),
  publicKeyHash: z.string({ description: "Sandbox Account Public Key Hash" }).min(1),
  secretKey: z.string({ description: "Sandbox Account Secret Key" }).min(1)
}, { description: "Sandbox Account Configuration" });
var { schemas: generatedSchemas, factory } = createType({
  rawSchema,
  internalSchema,
  parseErrMsg: "The sandbox account configuration is invalid",
  unknownErrMsg: "Something went wrong trying to parse the sandbox account configuration"
});
var { create, of, make } = factory;
var schemas2 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
export {
  create,
  factory,
  generatedSchemas,
  make,
  of,
  rawSchema,
  schemas2 as schemas
};
//# sourceMappingURL=SandboxAccountConfig.mjs.map
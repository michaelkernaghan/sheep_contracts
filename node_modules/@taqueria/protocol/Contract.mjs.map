{"version":3,"sources":["Contract.ts"],"sourcesContent":["import createType, { Flatten } from '@taqueria/protocol/Base';\nimport * as SHA256 from '@taqueria/protocol/SHA256';\nimport { z } from 'zod';\n\nexport const rawSchema = z.object({\n\tsourceFile: z.string().min(1),\n\thash: SHA256.rawSchema,\n\t// TODO: Should plugin also be provided here?\n});\n\nexport const internalSchema = z.object({\n\tsourceFile: z.string().min(1),\n\thash: SHA256.schemas.schema,\n});\n\ntype RawInput = z.infer<typeof rawSchema>;\ntype Input = z.infer<typeof internalSchema>;\n\nconst { schemas: generatedSchemas, factory } = createType<RawInput, Input>({\n\trawSchema,\n\tinternalSchema,\n\tparseErrMsg: (value: unknown) => `${value} is not a valid contract`,\n\tunknownErrMsg: 'Something went wrong trying to parse a contract',\n});\n\nexport type Contract = z.infer<typeof internalSchema>;\n\nexport type t = Contract;\n\nexport const { create, of, make } = factory;\n\nexport const schemas = {\n\t...generatedSchemas,\n\tschema: generatedSchemas.schema.transform(val => val as Contract),\n};\n"],"mappings":";AAAA,OAAO,gBAA6B;AACpC,YAAY,YAAY;AACxB,SAAS,SAAS;AAEX,IAAMA,aAAY,EAAE,OAAO;AAAA,EACjC,YAAY,EAAE,OAAO,EAAE,IAAI,CAAC;AAAA,EAC5B,MAAa;AAEd,CAAC;AAEM,IAAM,iBAAiB,EAAE,OAAO;AAAA,EACtC,YAAY,EAAE,OAAO,EAAE,IAAI,CAAC;AAAA,EAC5B,MAAa,eAAQ;AACtB,CAAC;AAKD,IAAM,EAAE,SAAS,kBAAkB,QAAQ,IAAI,WAA4B;AAAA,EAC1E,WAAAA;AAAA,EACA;AAAA,EACA,aAAa,CAAC,UAAmB,GAAG;AAAA,EACpC,eAAe;AAChB,CAAC;AAMM,IAAM,EAAE,QAAQ,IAAI,KAAK,IAAI;AAE7B,IAAMC,WAAU;AAAA,EACtB,GAAG;AAAA,EACH,QAAQ,iBAAiB,OAAO,UAAU,SAAO,GAAe;AACjE;","names":["rawSchema","schemas"]}
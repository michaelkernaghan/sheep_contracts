{"version":3,"sources":["EconomicalProtocolHash.ts"],"sourcesContent":["import createType from '@taqueria/protocol/Base';\nimport { z } from 'zod';\n\nexport const rawSchema = z\n\t.string({ description: 'Protocol hash' })\n\t.refine(\n\t\tvalue => (value.length === 51 && value[0] === 'P' && /[A-Za-z0-9]+/.test(value)),\n\t\tvalue => ({ message: `${value} is an invalid hash for an economical protocol` }),\n\t);\n\ntype RawInput = z.infer<typeof rawSchema>;\n\nexport const { schemas: generatedSchemas, factory } = createType<RawInput, RawInput>({\n\trawSchema,\n\tparseErrMsg: (value: unknown) => `${value} is an invalid economical protocol hash`,\n\tunknownErrMsg: 'Somethign went wrong trying to parse the economical protocol hash',\n});\n\nexport type EconomicalPrototypeHash = z.infer<typeof generatedSchemas.schema>;\nexport type t = EconomicalPrototypeHash;\n\nexport const { create, of, make } = factory;\nexport const schemas = {\n\t...generatedSchemas,\n\tschema: generatedSchemas.schema.transform(val => val as EconomicalPrototypeHash),\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAuB;AACvB,iBAAkB;AAEX,IAAM,YAAY,aACvB,OAAO,EAAE,aAAa,gBAAgB,CAAC,EACvC;AAAA,EACA,WAAU,MAAM,WAAW,MAAM,MAAM,OAAO,OAAO,eAAe,KAAK,KAAK;AAAA,EAC9E,YAAU,EAAE,SAAS,GAAG,sDAAsD;AAC/E;AAIM,IAAM,EAAE,SAAS,kBAAkB,QAAQ,QAAI,YAAAA,SAA+B;AAAA,EACpF;AAAA,EACA,aAAa,CAAC,UAAmB,GAAG;AAAA,EACpC,eAAe;AAChB,CAAC;AAKM,IAAM,EAAE,QAAQ,IAAI,KAAK,IAAI;AAC7B,IAAM,UAAU;AAAA,EACtB,GAAG;AAAA,EACH,QAAQ,iBAAiB,OAAO,UAAU,SAAO,GAA8B;AAChF;","names":["createType"]}
// MetadataConfig.ts
import createType from "@taqueria/protocol/Base";
import { z } from "zod";
var rawSchema = z.object({
  name: z.string({ description: "Project Name" }).optional(),
  projectDescription: z.string({ description: "Project Description" }).optional(),
  authors: z.array(z.string({ description: "Project Author" })).default([]).describe("Project Authors").optional(),
  license: z.string({ description: "Project License" }).optional(),
  homepage: z.string({ description: "Project Web Url" }).optional()
});
var internalSchema = z.object({
  name: z.string({ description: "Project Name" }).optional(),
  projectDescription: z.string({ description: "Project Description" }).optional(),
  authors: z.array(z.string({ description: "Project Author" })).default([]).describe("Project Authors").optional(),
  license: z.string({ description: "Project License" }).optional(),
  homepage: z.string({ description: "Project Web Url" }).optional()
}, { description: "Project Metadata" });
var { schemas: generatedSchemas, factory } = createType({
  rawSchema,
  internalSchema,
  parseErrMsg: (value) => `${value} is not a valid metadata configuration `,
  unknownErrMsg: "Something went wrong trying to parse the metadata configuration"
});
var { create, of, make } = factory;
var schemas = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
export {
  create,
  factory,
  generatedSchemas,
  make,
  of,
  rawSchema,
  schemas
};
//# sourceMappingURL=MetadataConfig.mjs.map
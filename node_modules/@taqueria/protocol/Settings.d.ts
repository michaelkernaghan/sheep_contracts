import { z } from 'zod';
export declare const rawSchema: z.ZodObject<{
    consent: z.ZodUnion<[z.ZodLiteral<"opt_in">, z.ZodLiteral<"opt_out">]>;
}, "strip", z.ZodTypeAny, {
    consent: "opt_in" | "opt_out";
}, {
    consent: "opt_in" | "opt_out";
}>;
export declare const generatedSchemas: {
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
    schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        consent: "opt_in" | "opt_out";
    } & {
        readonly __kind: any;
    }, any>;
}, factory: {
    make: (input: {
        consent: "opt_in" | "opt_out";
    }) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        consent: "opt_in" | "opt_out";
    } & {
        readonly __kind: any;
    }>;
    of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        consent: "opt_in" | "opt_out";
    } & {
        readonly __kind: any;
    }>;
    create: (input: {
        consent: "opt_in" | "opt_out";
    }) => {
        consent: "opt_in" | "opt_out";
    } & {
        readonly __kind: any;
    };
    from: (input: unknown) => {
        consent: "opt_in" | "opt_out";
    } & {
        readonly __kind: any;
    };
};
export declare type Settings = z.infer<typeof generatedSchemas.schema>;
export declare type t = Settings;
export declare const create: (input: {
    consent: "opt_in" | "opt_out";
}) => {
    consent: "opt_in" | "opt_out";
} & {
    readonly __kind: any;
}, of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    consent: "opt_in" | "opt_out";
} & {
    readonly __kind: any;
}>, make: (input: {
    consent: "opt_in" | "opt_out";
}) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    consent: "opt_in" | "opt_out";
} & {
    readonly __kind: any;
}>;
export declare const schemas: {
    schema: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        consent: "opt_in" | "opt_out";
    } & {
        readonly __kind: any;
    }, any>, {
        consent: "opt_in" | "opt_out";
    } & {
        readonly __kind: any;
    }, any>;
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
};
//# sourceMappingURL=Settings.d.ts.map
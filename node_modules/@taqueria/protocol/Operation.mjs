// Operation.ts
import createType from "@taqueria/protocol/Base";
import * as Command from "@taqueria/protocol/Command";
import * as Option from "@taqueria/protocol/Option";
import * as PersistentState from "@taqueria/protocol/PersistentState";
import * as PositionalArg from "@taqueria/protocol/PositionalArg";
import * as RequestArgs from "@taqueria/protocol/RequestArgs";
import * as Verb from "@taqueria/protocol/Verb";
import { z } from "zod";
var rawSchema6 = z.object({
  operation: Verb.rawSchema.describe("Operation Name"),
  command: Command.rawSchema.describe("Operation Command"),
  description: z.string({ description: "Operation Description" }).optional(),
  positionals: z.array(PositionalArg.rawSchema).default([]).describe("Operation Positional Args").optional(),
  options: z.preprocess(
    (val) => val ?? [],
    z.array(
      Option.rawSchema.describe("Operation Option"),
      { description: "Operation Options" }
    ).optional()
  ),
  handler: z.function().args(PersistentState.rawSchema).returns(
    z.function().args(RequestArgs.schemas.internalSchema)
  ).describe("Operation Handler").transform((val) => val)
}).describe("Operation");
var internalSchema = z.object({
  operation: Verb.schemas.schema.describe("Operation Name"),
  command: Command.schemas.schema.describe("Operation Command"),
  description: z.string({ description: "Optionation Description" }).optional(),
  positionals: z.array(PositionalArg.schemas.schema).default([]).describe("Operation Positional Args").optional(),
  options: z.preprocess(
    (val) => val ?? [],
    z.array(Option.schemas.schema.describe("Operation Option"), { description: "Operation Options" }).optional()
  ),
  handler: z.function().args(PersistentState.rawSchema).returns(
    z.function().args(RequestArgs.schemas.schema)
  ).describe("Operation Handler").transform((val) => val)
}).describe("Operation");
var { schemas: generatedSchemas, factory } = createType({
  rawSchema: rawSchema6,
  internalSchema,
  parseErrMsg: (value) => `The following operation is invalid: ${value}`,
  unknownErrMsg: "Something went wrong trying to parse the operation"
});
var { make, of, create } = factory;
var schemas6 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
export {
  create,
  factory,
  generatedSchemas,
  internalSchema,
  make,
  of,
  rawSchema6 as rawSchema,
  schemas6 as schemas
};
//# sourceMappingURL=Operation.mjs.map
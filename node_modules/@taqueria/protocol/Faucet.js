"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// Faucet.ts
var Faucet_exports = {};
__export(Faucet_exports, {
  create: () => create,
  factory: () => factory,
  generatedSchemas: () => generatedSchemas,
  make: () => make,
  of: () => of,
  rawSchema: () => rawSchema,
  schemas: () => schemas2
});
module.exports = __toCommonJS(Faucet_exports);
var import_Base = __toESM(require("@taqueria/protocol/Base"));
var PublicKeyHash = __toESM(require("@taqueria/protocol/PublicKeyHash"));
var import_zod = require("zod");
var commonSchema = import_zod.z.object({
  mnemonic: import_zod.z.preprocess(
    (arg) => typeof arg === "string" ? arg.split(" ") : arg,
    import_zod.z.array(
      import_zod.z.string({ description: "Faucet Mnemonic Word" }).min(1).regex(/^[a-z]{2,}$/),
      { description: "Faucet Mnemonic" }
    )
  ),
  email: import_zod.z.string({ description: "Faucet E-mail" }).regex(/^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/).optional(),
  password: import_zod.z.string({ description: "Faucet Password" }).optional(),
  amount: import_zod.z.string({ description: "Faucet Amount" }).refine(
    (val) => val.length === 0 || /^\d+$/.test(val),
    "Amount, if present, must be numeric"
  ).optional(),
  activation_code: import_zod.z.string({ description: "Faucet Activation Code" }).optional()
});
var rawSchema = commonSchema.extend({
  pkh: import_zod.z.string({ description: "Faucet Public Key Hash" }).min(1)
}).describe("Faucet");
var internalSchema = import_zod.z.preprocess(
  (input) => {
    const defaults = {
      pkh: "",
      mnemonic: [],
      email: "",
      password: "",
      activation_code: ""
    };
    return typeof input === "object" ? { ...defaults, ...input } : defaults;
  },
  commonSchema.extend({
    pkh: PublicKeyHash.schemas.schema
  })
).describe("Faucet");
var { schemas: generatedSchemas, factory } = (0, import_Base.default)({
  rawSchema,
  internalSchema,
  parseErrMsg: (value) => `${value} is not a valid faucet configuration`,
  unknownErrMsg: "Something went wrong trying to parse the faucet"
});
var { create, of, make } = factory;
var schemas2 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  create,
  factory,
  generatedSchemas,
  make,
  of,
  rawSchema,
  schemas
});
//# sourceMappingURL=Faucet.js.map
// Command.ts
import createType from "@taqueria/protocol/Base";
import { z } from "zod";
var rawSchema = z.string({ description: "Command" }).min(1).regex(/^([A-Za-z-_ ]+ ?)((\[.+\] ?)|(\<.+\>) ?)*$/, "Must be a command that can be interpreted using yargs");
var { schemas: generatedSchemas, factory } = createType({
  isStringLike: true,
  rawSchema,
  parseErrMsg: (value) => `${value} is an invalid command. Expected format is: taskName [optional] <required>`,
  unknownErrMsg: "Something went wrong when parsing the command"
});
var internalSchema = generatedSchemas.schema;
var { create, make, of } = factory;
var schemas = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
export {
  create,
  internalSchema,
  make,
  of,
  rawSchema,
  schemas
};
//# sourceMappingURL=Command.mjs.map
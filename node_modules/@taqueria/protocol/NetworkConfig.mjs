// NetworkConfig.ts
import createType from "@taqueria/protocol/Base";
import * as EconomicalProtocolHash from "@taqueria/protocol/EconomicalProtocolHash";
import * as Faucet from "@taqueria/protocol/Faucet";
import * as HumanReadableIdentifier from "@taqueria/protocol/HumanReadableIdentifier";
import * as Url from "@taqueria/protocol/Url";
import { z } from "zod";
var rawSchema5 = z.object({
  label: HumanReadableIdentifier.rawSchema,
  rpcUrl: Url.rawSchema,
  protocol: EconomicalProtocolHash.rawSchema,
  accounts: z.record(
    z.any({ description: "Accounts" }),
    { description: "Accounts" }
  ).optional(),
  faucet: Faucet.rawSchema.describe("Network Faucet").optional()
}).describe("Network Config");
var internalSchema = z.object({
  label: HumanReadableIdentifier.schemas.schema.describe("Network Label"),
  rpcUrl: Url.schemas.schema.describe("Network RPC Url"),
  protocol: EconomicalProtocolHash.schemas.schema.describe("Network Protocol Hash"),
  accounts: z.record(
    z.any({ description: "Accounts" }),
    { description: "Accounts" }
  ).optional(),
  faucet: Faucet.schemas.schema.describe("Network Faucet").optional()
}).describe("Network Config");
var { schemas: generatedSchemas, factory } = createType({
  rawSchema: rawSchema5,
  internalSchema,
  parseErrMsg: (value) => `${value} is not a valid network configuration`,
  unknownErrMsg: "Something went wrong trying to parse the network configuration"
});
var { create, of, make } = factory;
var schemas5 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
export {
  create,
  factory,
  generatedSchemas,
  make,
  of,
  rawSchema5 as rawSchema,
  schemas5 as schemas
};
//# sourceMappingURL=NetworkConfig.mjs.map
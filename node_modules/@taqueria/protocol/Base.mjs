// Base.ts
import { toFutureParseErr, toFutureParseUnknownErr } from "@taqueria/protocol/TaqError";
import { resolve } from "fluture";
import { ZodError } from "zod";
var createSchema = (params) => {
  const { rawSchema, isStringLike } = params;
  const internalSchema = params.internalSchema ?? params.rawSchema;
  const noop = (val) => val;
  const transformer = params.transformer ?? noop;
  const schema = isStringLike ? internalSchema.transform(
    (val) => transformer(val)
  ) : internalSchema.transform(
    (val) => transformer(val)
  );
  return {
    rawSchema,
    internalSchema,
    schema
  };
};
var createType = (params) => {
  const schemas = createSchema(params);
  const { parseErrMsg, unknownErrMsg } = params;
  const internalOf = (input) => {
    try {
      return resolve(schemas.schema.parse(input));
    } catch (previous) {
      const parseMsg = typeof parseErrMsg === "string" ? parseErrMsg : parseErrMsg(input, previous);
      const unknownMsg = typeof unknownErrMsg === "string" ? unknownErrMsg : unknownErrMsg(input);
      if (previous instanceof ZodError) {
        return toFutureParseErr(previous, parseMsg, input);
      }
      return toFutureParseUnknownErr(previous, unknownMsg, input);
    }
  };
  const of = internalOf;
  const make = (input) => internalOf(input);
  const create = (input) => schemas.schema.parse(input);
  const from = (input) => schemas.schema.parse(input);
  const factory = {
    make,
    of,
    create,
    from
  };
  return {
    schemas,
    factory
  };
};
var Base_default = createType;
export {
  createSchema,
  createType,
  Base_default as default
};
//# sourceMappingURL=Base.mjs.map
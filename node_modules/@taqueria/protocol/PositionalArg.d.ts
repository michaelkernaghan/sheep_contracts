import { z } from 'zod';
export declare const rawSchema: z.ZodObject<{
    placeholder: z.ZodString;
    description: z.ZodString;
    defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
    type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
    required: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    type?: "string" | "number" | "boolean" | undefined;
    defaultValue?: string | number | boolean | undefined;
    required?: boolean | undefined;
    description: string;
    placeholder: string;
}, {
    type?: "string" | "number" | "boolean" | undefined;
    defaultValue?: string | number | boolean | undefined;
    required?: boolean | undefined;
    description: string;
    placeholder: string;
}>;
export declare const generatedSchemas: {
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
    schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }, any>;
}, factory: {
    make: (input: {
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string & {
            readonly __kind: any;
        };
    }) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>;
    of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>;
    create: (input: {
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string;
    } | {
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string & {
            readonly __kind: any;
        };
    }) => {
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    };
    from: (input: unknown) => {
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    };
};
export declare type PositionalArg = z.infer<typeof generatedSchemas.schema>;
export declare type t = PositionalArg;
export declare const create: (input: {
    type?: "string" | "number" | "boolean" | undefined;
    defaultValue?: string | number | boolean | undefined;
    required?: boolean | undefined;
    description: string;
    placeholder: string;
} | {
    type?: "string" | "number" | "boolean" | undefined;
    defaultValue?: string | number | boolean | undefined;
    required?: boolean | undefined;
    description: string;
    placeholder: string & {
        readonly __kind: any;
    };
}) => {
    type?: "string" | "number" | "boolean" | undefined;
    defaultValue?: string | number | boolean | undefined;
    required?: boolean | undefined;
    description: string;
    placeholder: string & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
}, of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    type?: "string" | "number" | "boolean" | undefined;
    defaultValue?: string | number | boolean | undefined;
    required?: boolean | undefined;
    description: string;
    placeholder: string & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
}>, make: (input: {
    type?: "string" | "number" | "boolean" | undefined;
    defaultValue?: string | number | boolean | undefined;
    required?: boolean | undefined;
    description: string;
    placeholder: string & {
        readonly __kind: any;
    };
}) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    type?: "string" | "number" | "boolean" | undefined;
    defaultValue?: string | number | boolean | undefined;
    required?: boolean | undefined;
    description: string;
    placeholder: string & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
}>;
export declare const schemas: {
    schema: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }, any>, {
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }, any>;
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
};
//# sourceMappingURL=PositionalArg.d.ts.map
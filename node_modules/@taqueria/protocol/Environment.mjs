// Environment.ts
import createType from "@taqueria/protocol/Base";
import { z } from "zod";
var rawSchema = z.object({
  networks: z.array(
    z.string({ description: "Environment network" }).min(1, "Must reference the name of an existing network configuration")
  ),
  sandboxes: z.array(
    z.string({ description: "Environment sandbox" }).min(1, "Must reference the name of an existing sandbox configuration")
  ),
  storage: z.record(
    z.any({ description: "Environment storage value" }),
    { description: "Environment storage" }
  ).optional(),
  aliases: z.record(
    z.any({ description: "Environment address alias" }),
    { description: "Environment alias" }
  ).optional()
}).describe("Environment Config");
var { schemas: generatedSchemas, factory } = createType({
  rawSchema,
  parseErrMsg: (value) => `${value} is not an valid environment configuration`,
  unknownErrMsg: "Something went wrong trying to parse the environment configuration"
});
var { create, make, of, from } = factory;
var schemas = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
export {
  create,
  factory,
  from,
  generatedSchemas,
  make,
  of,
  rawSchema,
  schemas
};
//# sourceMappingURL=Environment.mjs.map
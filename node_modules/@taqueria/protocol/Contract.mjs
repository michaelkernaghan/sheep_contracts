// Contract.ts
import createType from "@taqueria/protocol/Base";
import * as SHA256 from "@taqueria/protocol/SHA256";
import { z } from "zod";
var rawSchema2 = z.object({
  sourceFile: z.string().min(1),
  hash: SHA256.rawSchema
});
var internalSchema = z.object({
  sourceFile: z.string().min(1),
  hash: SHA256.schemas.schema
});
var { schemas: generatedSchemas, factory } = createType({
  rawSchema: rawSchema2,
  internalSchema,
  parseErrMsg: (value) => `${value} is not a valid contract`,
  unknownErrMsg: "Something went wrong trying to parse a contract"
});
var { create, of, make } = factory;
var schemas2 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
export {
  create,
  internalSchema,
  make,
  of,
  rawSchema2 as rawSchema,
  schemas2 as schemas
};
//# sourceMappingURL=Contract.mjs.map
import { z } from 'zod';
export declare const rawSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    projectDescription: z.ZodOptional<z.ZodString>;
    authors: z.ZodOptional<z.ZodDefault<z.ZodArray<z.ZodString, "many">>>;
    license: z.ZodOptional<z.ZodString>;
    homepage: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    name?: string | undefined;
    projectDescription?: string | undefined;
    authors?: string[] | undefined;
    license?: string | undefined;
    homepage?: string | undefined;
}, {
    name?: string | undefined;
    projectDescription?: string | undefined;
    authors?: string[] | undefined;
    license?: string | undefined;
    homepage?: string | undefined;
}>;
export declare const generatedSchemas: {
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
    schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        name?: string | undefined;
        projectDescription?: string | undefined;
        authors?: string[] | undefined;
        license?: string | undefined;
        homepage?: string | undefined;
    } & {
        readonly __kind: any;
    }, any>;
}, factory: {
    make: (input: {
        name?: string | undefined;
        projectDescription?: string | undefined;
        authors?: string[] | undefined;
        license?: string | undefined;
        homepage?: string | undefined;
    }) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        name?: string | undefined;
        projectDescription?: string | undefined;
        authors?: string[] | undefined;
        license?: string | undefined;
        homepage?: string | undefined;
    } & {
        readonly __kind: any;
    }>;
    of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        name?: string | undefined;
        projectDescription?: string | undefined;
        authors?: string[] | undefined;
        license?: string | undefined;
        homepage?: string | undefined;
    } & {
        readonly __kind: any;
    }>;
    create: (input: {
        name?: string | undefined;
        projectDescription?: string | undefined;
        authors?: string[] | undefined;
        license?: string | undefined;
        homepage?: string | undefined;
    } | {
        name?: string | undefined;
        projectDescription?: string | undefined;
        authors?: string[] | undefined;
        license?: string | undefined;
        homepage?: string | undefined;
    }) => {
        name?: string | undefined;
        projectDescription?: string | undefined;
        authors?: string[] | undefined;
        license?: string | undefined;
        homepage?: string | undefined;
    } & {
        readonly __kind: any;
    };
    from: (input: unknown) => {
        name?: string | undefined;
        projectDescription?: string | undefined;
        authors?: string[] | undefined;
        license?: string | undefined;
        homepage?: string | undefined;
    } & {
        readonly __kind: any;
    };
};
export declare type MetadataConfig = z.infer<typeof generatedSchemas.schema>;
export declare type t = MetadataConfig;
export declare const create: (input: {
    name?: string | undefined;
    projectDescription?: string | undefined;
    authors?: string[] | undefined;
    license?: string | undefined;
    homepage?: string | undefined;
} | {
    name?: string | undefined;
    projectDescription?: string | undefined;
    authors?: string[] | undefined;
    license?: string | undefined;
    homepage?: string | undefined;
}) => {
    name?: string | undefined;
    projectDescription?: string | undefined;
    authors?: string[] | undefined;
    license?: string | undefined;
    homepage?: string | undefined;
} & {
    readonly __kind: any;
}, of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    name?: string | undefined;
    projectDescription?: string | undefined;
    authors?: string[] | undefined;
    license?: string | undefined;
    homepage?: string | undefined;
} & {
    readonly __kind: any;
}>, make: (input: {
    name?: string | undefined;
    projectDescription?: string | undefined;
    authors?: string[] | undefined;
    license?: string | undefined;
    homepage?: string | undefined;
}) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    name?: string | undefined;
    projectDescription?: string | undefined;
    authors?: string[] | undefined;
    license?: string | undefined;
    homepage?: string | undefined;
} & {
    readonly __kind: any;
}>;
export declare const schemas: {
    schema: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        name?: string | undefined;
        projectDescription?: string | undefined;
        authors?: string[] | undefined;
        license?: string | undefined;
        homepage?: string | undefined;
    } & {
        readonly __kind: any;
    }, any>, {
        name?: string | undefined;
        projectDescription?: string | undefined;
        authors?: string[] | undefined;
        license?: string | undefined;
        homepage?: string | undefined;
    } & {
        readonly __kind: any;
    }, any>;
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
};
//# sourceMappingURL=MetadataConfig.d.ts.map
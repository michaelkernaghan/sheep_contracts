{"version":3,"sources":["PublicKeyHash.ts"],"sourcesContent":["import createType from '@taqueria/protocol/Base';\nimport { z } from 'zod';\n\nexport const rawSchema = z\n\t.string({ description: 'Public Key Hash' })\n\t.min(1) // TODO: what's the actual minimum length here?\n\t.refine(\n\t\tval => val.startsWith('tz1'),\n\t\tval => ({ message: `${val} is not a valid public key hash` }),\n\t);\n\ntype RawInput = z.infer<typeof rawSchema>;\n\nexport const { schemas: generatedSchemas, factory } = createType<RawInput, RawInput>({\n\tisStringLike: true,\n\trawSchema,\n\tparseErrMsg: (value: unknown) => `${value} is an invalid public key hash`,\n\tunknownErrMsg: 'Something went wrong parsing the public key hash',\n});\n\nexport type PublicKeyHash = z.infer<typeof generatedSchemas.schema>;\nexport type t = PublicKeyHash;\nexport type PKH = PublicKeyHash;\nexport const { create, of, make } = factory;\nexport const schemas = {\n\t...generatedSchemas,\n\tschema: generatedSchemas.schema.transform(val => val as PublicKeyHash),\n};\n"],"mappings":";AAAA,OAAO,gBAAgB;AACvB,SAAS,SAAS;AAEX,IAAM,YAAY,EACvB,OAAO,EAAE,aAAa,kBAAkB,CAAC,EACzC,IAAI,CAAC,EACL;AAAA,EACA,SAAO,IAAI,WAAW,KAAK;AAAA,EAC3B,UAAQ,EAAE,SAAS,GAAG,qCAAqC;AAC5D;AAIM,IAAM,EAAE,SAAS,kBAAkB,QAAQ,IAAI,WAA+B;AAAA,EACpF,cAAc;AAAA,EACd;AAAA,EACA,aAAa,CAAC,UAAmB,GAAG;AAAA,EACpC,eAAe;AAChB,CAAC;AAKM,IAAM,EAAE,QAAQ,IAAI,KAAK,IAAI;AAC7B,IAAM,UAAU;AAAA,EACtB,GAAG;AAAA,EACH,QAAQ,iBAAiB,OAAO,UAAU,SAAO,GAAoB;AACtE;","names":[]}
import { z } from 'zod';
export declare const schemas: {
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
    schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        path: string;
        name: string;
        version: string;
        kind: "required" | "optional";
    } & {
        readonly __kind: any;
    }, any>;
}, factory: {
    make: (input: {
        path: string;
        name: string;
        version: string;
        kind: "required" | "optional";
    }) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        path: string;
        name: string;
        version: string;
        kind: "required" | "optional";
    } & {
        readonly __kind: any;
    }>;
    of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        path: string;
        name: string;
        version: string;
        kind: "required" | "optional";
    } & {
        readonly __kind: any;
    }>;
    create: (input: {
        path: string;
        name: string;
        version: string;
        kind: "required" | "optional";
    }) => {
        path: string;
        name: string;
        version: string;
        kind: "required" | "optional";
    } & {
        readonly __kind: any;
    };
    from: (input: unknown) => {
        path: string;
        name: string;
        version: string;
        kind: "required" | "optional";
    } & {
        readonly __kind: any;
    };
};
export declare type RuntimeDependency = z.infer<typeof schemas.schema>;
declare const runtimeDependencyReport: z.ZodObject<z.extendShape<{
    name: z.ZodString;
    path: z.ZodString;
    version: z.ZodString;
    kind: z.ZodUnion<[z.ZodLiteral<"required">, z.ZodLiteral<"optional">]>;
}, {
    met: z.ZodBoolean;
}>, "strip", z.ZodTypeAny, {
    path: string;
    name: string;
    version: string;
    kind: "required" | "optional";
    met: boolean;
}, {
    path: string;
    name: string;
    version: string;
    kind: "required" | "optional";
    met: boolean;
}>;
export declare type RuntimeDependencyReport = z.infer<typeof runtimeDependencyReport>;
declare const dependenciesResponseSchema: z.ZodObject<{
    report: z.ZodArray<z.ZodObject<z.extendShape<{
        name: z.ZodString;
        path: z.ZodString;
        version: z.ZodString;
        kind: z.ZodUnion<[z.ZodLiteral<"required">, z.ZodLiteral<"optional">]>;
    }, {
        met: z.ZodBoolean;
    }>, "strip", z.ZodTypeAny, {
        path: string;
        name: string;
        version: string;
        kind: "required" | "optional";
        met: boolean;
    }, {
        path: string;
        name: string;
        version: string;
        kind: "required" | "optional";
        met: boolean;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    report: {
        path: string;
        name: string;
        version: string;
        kind: "required" | "optional";
        met: boolean;
    }[];
}, {
    report: {
        path: string;
        name: string;
        version: string;
        kind: "required" | "optional";
        met: boolean;
    }[];
}>;
export declare type PluginDependenciesResponse = z.infer<typeof dependenciesResponseSchema>;
export declare type t = PluginDependenciesResponse;
export declare const of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    path: string;
    name: string;
    version: string;
    kind: "required" | "optional";
} & {
    readonly __kind: any;
}>, make: (input: {
    path: string;
    name: string;
    version: string;
    kind: "required" | "optional";
}) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    path: string;
    name: string;
    version: string;
    kind: "required" | "optional";
} & {
    readonly __kind: any;
}>, create: (input: {
    path: string;
    name: string;
    version: string;
    kind: "required" | "optional";
}) => {
    path: string;
    name: string;
    version: string;
    kind: "required" | "optional";
} & {
    readonly __kind: any;
};
export {};
//# sourceMappingURL=PluginDependenciesResponse.d.ts.map
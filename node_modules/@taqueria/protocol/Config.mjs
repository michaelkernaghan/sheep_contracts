// Config.ts
import createType from "@taqueria/protocol/Base";
import * as Contract from "@taqueria/protocol/Contract";
import * as Environment from "@taqueria/protocol/Environment";
import * as InstalledPlugin from "@taqueria/protocol/InstalledPlugin";
import * as MetadataConfig from "@taqueria/protocol/MetadataConfig";
import * as NetworkConfig from "@taqueria/protocol/NetworkConfig";
import * as SandboxConfig from "@taqueria/protocol/SandboxConfig";
import * as Tz from "@taqueria/protocol/Tz";
import { z, ZodError } from "zod";
var pluginsRawSchema = z.preprocess(
  (val) => val ?? [],
  z.array(
    InstalledPlugin.rawSchema,
    { description: "config.plugins" }
  )
);
var pluginsInternalSchema = z.preprocess(
  (val) => val ?? [],
  z.array(
    InstalledPlugin.schemas.schema,
    { description: "config.plugins" }
  )
);
var networkMap = z.record(
  NetworkConfig.schemas.schema,
  { description: "Network configurations" }
).optional();
var sandboxMap = z.record(
  SandboxConfig.schemas.schema,
  { description: "Sandbox configurations" }
).optional();
var environmentMap = z.record(
  z.union([
    Environment.schemas.schema,
    z.string().min(1, "Default environment must reference the name of an existing environment.")
  ]),
  { description: "Environment configurations" }
).optional();
var accountsMap = z.preprocess(
  (val) => val ?? {
    "bob": "5_000_000_000",
    "alice": "5_000_000_000",
    "john": "5_000_000_000"
  },
  z.record(
    z.union([Tz.rawSchema, z.number()]),
    { description: "config.accounts" }
  )
);
var commonSchema = z.object({
  language: z.preprocess(
    (val) => val ?? "en",
    z.union([
      z.literal("en"),
      z.literal("fr")
    ], { description: "config.language" }).optional()
  ),
  plugins: pluginsInternalSchema.optional(),
  contractsDir: z.preprocess(
    (val) => val ?? "contracts",
    z.string({ description: "config.contractsDir" }).min(1, "config.contractsDir must have a value")
  ),
  artifactsDir: z.preprocess(
    (val) => val ?? "artifacts",
    z.string({ description: "config.artifactsDir" }).min(1, "config.artifactsDir must have a value")
  ),
  contracts: z.record(
    Contract.rawSchema
  ).optional()
}).describe("config");
var internalSchema = commonSchema.extend({
  network: networkMap,
  sandbox: sandboxMap,
  environment: environmentMap,
  accounts: accountsMap,
  contracts: z.record(Contract.schemas.schema).optional(),
  metadata: MetadataConfig.schemas.schema.optional()
});
var rawSchema8 = commonSchema.extend({
  plugins: pluginsRawSchema.optional(),
  network: z.record(NetworkConfig.rawSchema).optional(),
  sandbox: z.record(SandboxConfig.rawSchema).optional(),
  environment: z.record(
    z.union([
      Environment.rawSchema,
      z.string({ description: "config.environment" }).min(1, "Default environment must reference the name of an existing environment.")
    ])
  ).optional(),
  accounts: z.record(
    z.union([Tz.rawSchema, z.number()]),
    { description: "config.accounts" }
  ).optional(),
  metadata: MetadataConfig.rawSchema.optional()
}).describe("config");
var { schemas: generatedSchemas, factory } = createType({
  rawSchema: rawSchema8,
  internalSchema,
  parseErrMsg: (_value, previous) => {
    if (previous instanceof ZodError) {
      const msgs = previous.errors.reduce(
        (retval, issue) => {
          const path = issue.path.join(" \u2192 ");
          const msg = `  ${path}: ${issue.message}`;
          return [...retval, msg];
        },
        [`Your .taq/config.json file is invalid:`]
      );
      return msgs.join("\n") + "\n";
    }
    return `Your .taq/config.json file is invalid.`;
  },
  unknownErrMsg: "Something went wrong trying to parse your configuration"
});
var { create, of, make } = factory;
var schemas7 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
export {
  create,
  factory,
  generatedSchemas,
  internalSchema,
  make,
  of,
  pluginsInternalSchema,
  pluginsRawSchema,
  rawSchema8 as rawSchema,
  schemas7 as schemas
};
//# sourceMappingURL=Config.mjs.map
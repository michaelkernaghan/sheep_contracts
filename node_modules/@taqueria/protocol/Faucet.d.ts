import { Flatten } from '@taqueria/protocol/Base';
import { z } from 'zod';
export declare const rawSchema: z.ZodObject<z.extendShape<{
    mnemonic: z.ZodEffects<z.ZodArray<z.ZodString, "many">, string[], unknown>;
    email: z.ZodOptional<z.ZodString>;
    password: z.ZodOptional<z.ZodString>;
    amount: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    activation_code: z.ZodOptional<z.ZodString>;
}, {
    pkh: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    email?: string | undefined;
    password?: string | undefined;
    amount?: string | undefined;
    activation_code?: string | undefined;
    mnemonic: string[];
    pkh: string;
}, {
    mnemonic?: unknown;
    email?: string | undefined;
    password?: string | undefined;
    amount?: string | undefined;
    activation_code?: string | undefined;
    pkh: string;
}>;
export declare const generatedSchemas: {
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
    schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        email?: string | undefined;
        password?: string | undefined;
        amount?: string | undefined;
        activation_code?: string | undefined;
        mnemonic: string[];
        pkh: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }, any>;
}, factory: {
    make: (input: {
        email?: string | undefined;
        password?: string | undefined;
        amount?: string | undefined;
        activation_code?: string | undefined;
        mnemonic: string[];
        pkh: string & {
            readonly __kind: any;
        };
    }) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        email?: string | undefined;
        password?: string | undefined;
        amount?: string | undefined;
        activation_code?: string | undefined;
        mnemonic: string[];
        pkh: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>;
    of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        email?: string | undefined;
        password?: string | undefined;
        amount?: string | undefined;
        activation_code?: string | undefined;
        mnemonic: string[];
        pkh: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>;
    create: (input: {
        email?: string | undefined;
        password?: string | undefined;
        amount?: string | undefined;
        activation_code?: string | undefined;
        mnemonic: string[];
        pkh: string;
    } | {
        email?: string | undefined;
        password?: string | undefined;
        amount?: string | undefined;
        activation_code?: string | undefined;
        mnemonic: string[];
        pkh: string & {
            readonly __kind: any;
        };
    }) => {
        email?: string | undefined;
        password?: string | undefined;
        amount?: string | undefined;
        activation_code?: string | undefined;
        mnemonic: string[];
        pkh: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    };
    from: (input: unknown) => {
        email?: string | undefined;
        password?: string | undefined;
        amount?: string | undefined;
        activation_code?: string | undefined;
        mnemonic: string[];
        pkh: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    };
};
export declare type Faucet = Flatten<z.infer<typeof generatedSchemas.schema>>;
export declare type t = Faucet;
export declare const create: (input: {
    email?: string | undefined;
    password?: string | undefined;
    amount?: string | undefined;
    activation_code?: string | undefined;
    mnemonic: string[];
    pkh: string;
} | {
    email?: string | undefined;
    password?: string | undefined;
    amount?: string | undefined;
    activation_code?: string | undefined;
    mnemonic: string[];
    pkh: string & {
        readonly __kind: any;
    };
}) => {
    email?: string | undefined;
    password?: string | undefined;
    amount?: string | undefined;
    activation_code?: string | undefined;
    mnemonic: string[];
    pkh: string & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
}, of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    email?: string | undefined;
    password?: string | undefined;
    amount?: string | undefined;
    activation_code?: string | undefined;
    mnemonic: string[];
    pkh: string & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
}>, make: (input: {
    email?: string | undefined;
    password?: string | undefined;
    amount?: string | undefined;
    activation_code?: string | undefined;
    mnemonic: string[];
    pkh: string & {
        readonly __kind: any;
    };
}) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    email?: string | undefined;
    password?: string | undefined;
    amount?: string | undefined;
    activation_code?: string | undefined;
    mnemonic: string[];
    pkh: string & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
}>;
export declare const schemas: {
    schema: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        email?: string | undefined;
        password?: string | undefined;
        amount?: string | undefined;
        activation_code?: string | undefined;
        mnemonic: string[];
        pkh: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }, any>, Flatten<{
        email?: string | undefined;
        password?: string | undefined;
        amount?: string | undefined;
        activation_code?: string | undefined;
        mnemonic: string[];
        pkh: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>, any>;
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
};
//# sourceMappingURL=Faucet.d.ts.map
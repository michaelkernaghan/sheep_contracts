{"version":3,"sources":["Config.ts"],"sourcesContent":["import createType, { Flatten } from '@taqueria/protocol/Base';\nimport * as Contract from '@taqueria/protocol/Contract';\nimport * as Environment from '@taqueria/protocol/Environment';\nimport * as InstalledPlugin from '@taqueria/protocol/InstalledPlugin';\nimport * as MetadataConfig from '@taqueria/protocol/MetadataConfig';\nimport * as NetworkConfig from '@taqueria/protocol/NetworkConfig';\nimport * as SandboxConfig from '@taqueria/protocol/SandboxConfig';\nimport * as Tz from '@taqueria/protocol/Tz';\nimport { z, ZodError } from 'zod';\n\nexport const pluginsRawSchema = z.preprocess(\n\tval => val ?? [],\n\tz.array(\n\t\tInstalledPlugin.rawSchema,\n\t\t{ description: 'config.plugins' },\n\t),\n);\n\nexport const pluginsInternalSchema = z.preprocess(\n\tval => val ?? [],\n\tz.array(\n\t\tInstalledPlugin.schemas.schema,\n\t\t{ description: 'config.plugins' },\n\t),\n);\n\nconst networkMap = z\n\t.record(\n\t\tNetworkConfig.schemas.schema,\n\t\t{ description: 'Network configurations' },\n\t)\n\t.optional();\n\nconst sandboxMap = z\n\t.record(\n\t\tSandboxConfig.schemas.schema,\n\t\t{ description: 'Sandbox configurations' },\n\t)\n\t.optional();\n\nconst environmentMap = z\n\t.record(\n\t\tz.union([\n\t\t\tEnvironment.schemas.schema,\n\t\t\tz.string().min(1, 'Default environment must reference the name of an existing environment.'),\n\t\t]),\n\t\t{ description: 'Environment configurations' },\n\t)\n\t.optional();\n\nconst accountsMap = z.preprocess(\n\t(val: unknown) =>\n\t\tval ?? {\n\t\t\t'bob': '5_000_000_000',\n\t\t\t'alice': '5_000_000_000',\n\t\t\t'john': '5_000_000_000',\n\t\t},\n\tz.record(\n\t\tz.union([Tz.rawSchema, z.number()]),\n\t\t{ description: 'config.accounts' },\n\t),\n);\n\nconst commonSchema = z.object({\n\tlanguage: z.preprocess(\n\t\tval => val ?? 'en',\n\t\tz.union([\n\t\t\tz.literal('en'),\n\t\t\tz.literal('fr'),\n\t\t], { description: 'config.language' })\n\t\t\t.optional(),\n\t),\n\tplugins: pluginsInternalSchema.optional(),\n\tcontractsDir: z\n\t\t.preprocess(\n\t\t\t(val: unknown) => val ?? 'contracts',\n\t\t\tz.string({ description: 'config.contractsDir' })\n\t\t\t\t.min(1, 'config.contractsDir must have a value'),\n\t\t),\n\tartifactsDir: z\n\t\t.preprocess(\n\t\t\t(val: unknown) => val ?? 'artifacts',\n\t\t\tz.string({ description: 'config.artifactsDir' })\n\t\t\t\t.min(1, 'config.artifactsDir must have a value'),\n\t\t),\n\tcontracts: z.record(\n\t\tContract.rawSchema,\n\t).optional(),\n}).describe('config');\n\nexport const internalSchema = commonSchema.extend({\n\tnetwork: networkMap,\n\tsandbox: sandboxMap,\n\tenvironment: environmentMap,\n\taccounts: accountsMap,\n\tcontracts: z.record(Contract.schemas.schema).optional(),\n\tmetadata: MetadataConfig.schemas.schema.optional(),\n});\n\nexport const rawSchema = commonSchema.extend({\n\tplugins: pluginsRawSchema.optional(),\n\tnetwork: z\n\t\t.record(NetworkConfig.rawSchema)\n\t\t.optional(),\n\tsandbox: z\n\t\t.record(SandboxConfig.rawSchema)\n\t\t.optional(),\n\tenvironment: z\n\t\t.record(\n\t\t\tz.union([\n\t\t\t\tEnvironment.rawSchema,\n\t\t\t\tz.string({ description: 'config.environment' })\n\t\t\t\t\t.min(1, 'Default environment must reference the name of an existing environment.'),\n\t\t\t]),\n\t\t)\n\t\t.optional(),\n\taccounts: z\n\t\t.record(\n\t\t\tz.union([Tz.rawSchema, z.number()]),\n\t\t\t{ description: 'config.accounts' },\n\t\t)\n\t\t.optional(),\n\tmetadata: MetadataConfig.rawSchema.optional(),\n}).describe('config');\n\ntype RawInput = z.infer<typeof rawSchema>;\ntype Input = z.infer<typeof internalSchema>;\n\nexport const { schemas: generatedSchemas, factory } = createType<RawInput, Input>({\n\trawSchema,\n\tinternalSchema,\n\tparseErrMsg: (_value, previous) => {\n\t\tif (previous instanceof ZodError) {\n\t\t\tconst msgs: string[] = previous.errors.reduce(\n\t\t\t\t(retval, issue) => {\n\t\t\t\t\tconst path = issue.path.join(' â†’ ');\n\t\t\t\t\tconst msg = `  ${path}: ${issue.message}`;\n\t\t\t\t\treturn [...retval, msg];\n\t\t\t\t},\n\t\t\t\t[`Your .taq/config.json file is invalid:`],\n\t\t\t);\n\t\t\treturn msgs.join('\\n') + '\\n';\n\t\t}\n\t\treturn `Your .taq/config.json file is invalid.`;\n\t},\n\tunknownErrMsg: 'Something went wrong trying to parse your configuration',\n});\n\nexport const { create, of, make } = factory;\nexport type Config = z.infer<typeof generatedSchemas.schema>;\nexport type t = Config;\n\nexport const schemas = {\n\t...generatedSchemas,\n\tschema: generatedSchemas.schema.transform(val => val as Config),\n};\n"],"mappings":"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","names":["rawSchema","schemas","createType"]}
// SandboxConfig.ts
import createType from "@taqueria/protocol/Base";
import * as EconomicalProtocolHash from "@taqueria/protocol/EconomicalProtocolHash";
import * as HumanReadableIdentifier from "@taqueria/protocol/HumanReadableIdentifier";
import * as SandboxAccountConfig from "@taqueria/protocol/SandboxAccountConfig";
import * as TzKt from "@taqueria/protocol/tzkt-config";
import * as Url from "@taqueria/protocol/Url";
import * as Verb from "@taqueria/protocol/Verb";
import { z } from "zod";
var accountMapSchema = z.record(
  z.union([
    z.string().nonempty(),
    SandboxAccountConfig.schemas.schema
  ])
);
var rawSchema4 = z.object({
  label: z.string({ description: "Sandbox Label" }).min(1),
  rpcUrl: z.string({ description: "Sandbox RPC Url" }).min(5).url(),
  protocol: z.string({ description: "Sandbox Protocol Hash" }).min(8),
  attributes: z.record(
    z.union(
      [z.string(), z.number(), z.boolean()],
      { description: "Sandbox Attribute" }
    ),
    { description: "Sandbox Attributes" }
  ).optional(),
  plugin: Verb.rawSchema.describe("Sandbox Plugin").optional(),
  accounts: z.union([
    z.object({ default: z.string().min(1) }),
    z.record(SandboxAccountConfig.rawSchema)
  ], { description: "Sandbox Accounts" }).optional(),
  tzkt: TzKt.rawSchema.describe("TzKt config").optional()
});
var internalSchema = z.object({
  label: HumanReadableIdentifier.schemas.schema.describe("Sandbox Label"),
  rpcUrl: Url.schemas.schema.describe("Sandbox RPC Url"),
  protocol: EconomicalProtocolHash.schemas.schema.describe("Sandbox Protocol Hash"),
  attributes: z.record(
    z.union([z.string(), z.number(), z.boolean()]),
    { description: "Sandbox Attributes" }
  ).optional(),
  plugin: Verb.schemas.schema.describe("Sandbox Plugin").optional(),
  accounts: accountMapSchema.optional(),
  tzkt: TzKt.rawSchema.describe("TzKt config").optional()
}, { description: "Sandbox Configuration" });
var { schemas: generatedSchemas, factory } = createType({
  rawSchema: rawSchema4,
  internalSchema,
  parseErrMsg: (value) => `${value} is not a valid sandbox configuration `,
  unknownErrMsg: "Something went wrong trying to parse the sandbox configuration"
});
var { create, of, make } = factory;
var schemas6 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
export {
  create,
  factory,
  generatedSchemas,
  make,
  of,
  rawSchema4 as rawSchema,
  schemas6 as schemas
};
//# sourceMappingURL=SandboxConfig.mjs.map
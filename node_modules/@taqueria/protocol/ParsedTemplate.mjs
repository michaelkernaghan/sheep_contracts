// ParsedTemplate.ts
import createType from "@taqueria/protocol/Base";
import * as PluginResponseEncoding from "@taqueria/protocol/PluginResponseEncoding";
import * as Template from "@taqueria/protocol/Template";
import { z } from "zod";
var internalSchema2 = Template.internalSchema.extend({
  handler: z.string(),
  encoding: PluginResponseEncoding.schemas.schema
}).describe("ParsedTemplate");
var rawSchema2 = Template.rawSchema.extend({
  handler: z.string(),
  encoding: PluginResponseEncoding.schemas.schema
}).describe("ParsedTemplate");
var { schemas: generatedSchemas, factory } = createType({
  rawSchema: rawSchema2,
  internalSchema: internalSchema2,
  parseErrMsg: (value) => `Could not parse the following template: ${value}`,
  unknownErrMsg: "Something went wrong trying to parse an template"
});
var { create, make, of } = factory;
var schemas2 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
export {
  create,
  factory,
  generatedSchemas,
  make,
  of,
  rawSchema2 as rawSchema,
  schemas2 as schemas
};
//# sourceMappingURL=ParsedTemplate.mjs.map
{"version":3,"sources":["SandboxConfig.ts"],"sourcesContent":["import createType from '@taqueria/protocol/Base';\nimport * as EconomicalProtocolHash from '@taqueria/protocol/EconomicalProtocolHash';\nimport * as HumanReadableIdentifier from '@taqueria/protocol/HumanReadableIdentifier';\nimport * as SandboxAccountConfig from '@taqueria/protocol/SandboxAccountConfig';\nimport * as TzKt from '@taqueria/protocol/tzkt-config';\nimport * as Url from '@taqueria/protocol/Url';\nimport * as Verb from '@taqueria/protocol/Verb';\nimport { z } from 'zod';\n\nconst accountMapSchema = z.record(\n\tz.union([\n\t\tz.string().nonempty(),\n\t\tSandboxAccountConfig.schemas.schema,\n\t]),\n);\n\nexport const rawSchema = z.object({\n\tlabel: z.string({ description: 'Sandbox Label' }).min(1),\n\trpcUrl: z.string({ description: 'Sandbox RPC Url' }).min(5).url(),\n\tprotocol: z.string({ description: 'Sandbox Protocol Hash' }).min(8),\n\tattributes: z.record(\n\t\tz.union(\n\t\t\t[z.string(), z.number(), z.boolean()],\n\t\t\t{ description: 'Sandbox Attribute' },\n\t\t),\n\t\t{ description: 'Sandbox Attributes' },\n\t).optional(),\n\tplugin: Verb.rawSchema.describe('Sandbox Plugin').optional(),\n\taccounts: z.union([\n\t\tz.object({ default: z.string().min(1) }),\n\t\tz.record(SandboxAccountConfig.rawSchema),\n\t], { description: 'Sandbox Accounts' }).optional(),\n\ttzkt: TzKt.rawSchema.describe('TzKt config').optional(),\n});\n\nconst internalSchema = z.object({\n\tlabel: HumanReadableIdentifier.schemas.schema.describe('Sandbox Label'),\n\trpcUrl: Url.schemas.schema.describe('Sandbox RPC Url'),\n\tprotocol: EconomicalProtocolHash.schemas.schema.describe('Sandbox Protocol Hash'),\n\tattributes: z.record(\n\t\tz.union([z.string(), z.number(), z.boolean()]),\n\t\t{ description: 'Sandbox Attributes' },\n\t).optional(),\n\tplugin: Verb.schemas.schema.describe('Sandbox Plugin').optional(),\n\taccounts: accountMapSchema.optional(),\n\ttzkt: TzKt.rawSchema.describe('TzKt config').optional(),\n}, { description: 'Sandbox Configuration' });\n\ntype RawInput = z.infer<typeof rawSchema>;\ntype Input = z.infer<typeof internalSchema>;\n\nexport const { schemas: generatedSchemas, factory } = createType<RawInput, Input>({\n\trawSchema,\n\tinternalSchema,\n\tparseErrMsg: (value: unknown) => `${value} is not a valid sandbox configuration `,\n\tunknownErrMsg: 'Something went wrong trying to parse the sandbox configuration',\n});\n\nexport type SandboxConfig = z.infer<typeof generatedSchemas.schema>;\nexport type t = SandboxConfig;\nexport const { create, of, make } = factory;\n\nexport const schemas = {\n\t...generatedSchemas,\n\tschema: generatedSchemas.schema.transform(val => val as SandboxConfig),\n};\n"],"mappings":";AAAA,OAAO,gBAAgB;AACvB,YAAY,4BAA4B;AACxC,YAAY,6BAA6B;AACzC,YAAY,0BAA0B;AACtC,YAAY,UAAU;AACtB,YAAY,SAAS;AACrB,YAAY,UAAU;AACtB,SAAS,SAAS;AAElB,IAAM,mBAAmB,EAAE;AAAA,EAC1B,EAAE,MAAM;AAAA,IACP,EAAE,OAAO,EAAE,SAAS;AAAA,IACC,6BAAQ;AAAA,EAC9B,CAAC;AACF;AAEO,IAAMA,aAAY,EAAE,OAAO;AAAA,EACjC,OAAO,EAAE,OAAO,EAAE,aAAa,gBAAgB,CAAC,EAAE,IAAI,CAAC;AAAA,EACvD,QAAQ,EAAE,OAAO,EAAE,aAAa,kBAAkB,CAAC,EAAE,IAAI,CAAC,EAAE,IAAI;AAAA,EAChE,UAAU,EAAE,OAAO,EAAE,aAAa,wBAAwB,CAAC,EAAE,IAAI,CAAC;AAAA,EAClE,YAAY,EAAE;AAAA,IACb,EAAE;AAAA,MACD,CAAC,EAAE,OAAO,GAAG,EAAE,OAAO,GAAG,EAAE,QAAQ,CAAC;AAAA,MACpC,EAAE,aAAa,oBAAoB;AAAA,IACpC;AAAA,IACA,EAAE,aAAa,qBAAqB;AAAA,EACrC,EAAE,SAAS;AAAA,EACX,QAAa,eAAU,SAAS,gBAAgB,EAAE,SAAS;AAAA,EAC3D,UAAU,EAAE,MAAM;AAAA,IACjB,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC;AAAA,IACvC,EAAE,OAA4B,8BAAS;AAAA,EACxC,GAAG,EAAE,aAAa,mBAAmB,CAAC,EAAE,SAAS;AAAA,EACjD,MAAW,eAAU,SAAS,aAAa,EAAE,SAAS;AACvD,CAAC;AAED,IAAM,iBAAiB,EAAE,OAAO;AAAA,EAC/B,OAA+B,gCAAQ,OAAO,SAAS,eAAe;AAAA,EACtE,QAAY,YAAQ,OAAO,SAAS,iBAAiB;AAAA,EACrD,UAAiC,+BAAQ,OAAO,SAAS,uBAAuB;AAAA,EAChF,YAAY,EAAE;AAAA,IACb,EAAE,MAAM,CAAC,EAAE,OAAO,GAAG,EAAE,OAAO,GAAG,EAAE,QAAQ,CAAC,CAAC;AAAA,IAC7C,EAAE,aAAa,qBAAqB;AAAA,EACrC,EAAE,SAAS;AAAA,EACX,QAAa,aAAQ,OAAO,SAAS,gBAAgB,EAAE,SAAS;AAAA,EAChE,UAAU,iBAAiB,SAAS;AAAA,EACpC,MAAW,eAAU,SAAS,aAAa,EAAE,SAAS;AACvD,GAAG,EAAE,aAAa,wBAAwB,CAAC;AAKpC,IAAM,EAAE,SAAS,kBAAkB,QAAQ,IAAI,WAA4B;AAAA,EACjF,WAAAA;AAAA,EACA;AAAA,EACA,aAAa,CAAC,UAAmB,GAAG;AAAA,EACpC,eAAe;AAChB,CAAC;AAIM,IAAM,EAAE,QAAQ,IAAI,KAAK,IAAI;AAE7B,IAAMC,WAAU;AAAA,EACtB,GAAG;AAAA,EACH,QAAQ,iBAAiB,OAAO,UAAU,SAAO,GAAoB;AACtE;","names":["rawSchema","schemas"]}
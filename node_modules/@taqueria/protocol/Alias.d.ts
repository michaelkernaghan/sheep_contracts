import { z } from 'zod';
export declare const rawSchema: z.ZodUnion<[z.ZodString, z.ZodString]>;
export declare const internalSchema: z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
    readonly __kind: any;
}, any>, string & {
    readonly __kind: any;
}, any>, z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
    readonly __kind: any;
}, any>, string & {
    readonly __kind: any;
}, any>]>;
export declare type Alias = z.infer<typeof internalSchema>;
export declare type t = Alias;
export declare const create: (input: string | (string & {
    readonly __kind: any;
})) => string & {
    readonly __kind: any;
} & {
    readonly __kind: any;
}, of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, string & {
    readonly __kind: any;
} & {
    readonly __kind: any;
}>, make: (input: string & {
    readonly __kind: any;
}) => import("fluture").FutureInstance<import("./TaqError").TaqError, string & {
    readonly __kind: any;
} & {
    readonly __kind: any;
}>;
export declare const schemas: {
    schema: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __kind: any;
    } & {
        readonly __kind: any;
    }, any>, string & {
        readonly __kind: any;
    }, any>;
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
};
//# sourceMappingURL=Alias.d.ts.map
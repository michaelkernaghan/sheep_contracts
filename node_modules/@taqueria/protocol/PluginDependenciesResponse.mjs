// PluginDependenciesResponse.ts
import createType from "@taqueria/protocol/Base";
import { z } from "zod";
var rawRuntimeDependency = z.object({
  name: z.string(),
  path: z.string(),
  version: z.string(),
  kind: z.union([z.literal("required"), z.literal("optional")])
});
var { schemas, factory } = createType({
  rawSchema: rawRuntimeDependency,
  internalSchema: rawRuntimeDependency,
  parseErrMsg: (value) => `The following runtime dependency is invalid: ${value}`,
  unknownErrMsg: "Something went wrong trying to parse the template"
});
var runtimeDependencyReport = rawRuntimeDependency.extend({ met: z.boolean() });
var dependenciesResponseSchema = z.object({
  report: z.array(runtimeDependencyReport)
});
var { of, make, create } = factory;
export {
  create,
  factory,
  make,
  of,
  schemas
};
//# sourceMappingURL=PluginDependenciesResponse.mjs.map
{"version":3,"sources":["SingleChar.ts"],"sourcesContent":["import createType from '@taqueria/protocol/Base';\nimport { z } from 'zod';\n\nexport const rawSchema = z\n\t.string({ description: 'Single character' })\n\t.regex(/^[A-Za-z]$/, 'Must be a single character');\n\ntype RawInput = z.infer<typeof rawSchema>;\n\nexport const { factory, schemas: generatedSchemas } = createType<RawInput, RawInput>({\n\tisStringLike: true,\n\trawSchema,\n\tparseErrMsg: (value: unknown) => `${value} is not a single character`,\n\tunknownErrMsg: `Something went wrong trying to parse a single character`,\n});\n\nexport type SingleChar = z.infer<typeof generatedSchemas.schema>;\nexport type t = SingleChar;\nexport const { create, of, make } = factory;\nexport const schemas = {\n\t...generatedSchemas,\n\tschema: generatedSchemas.schema.transform(val => val as SingleChar),\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAuB;AACvB,iBAAkB;AAEX,IAAM,YAAY,aACvB,OAAO,EAAE,aAAa,mBAAmB,CAAC,EAC1C,MAAM,cAAc,4BAA4B;AAI3C,IAAM,EAAE,SAAS,SAAS,iBAAiB,QAAI,YAAAA,SAA+B;AAAA,EACpF,cAAc;AAAA,EACd;AAAA,EACA,aAAa,CAAC,UAAmB,GAAG;AAAA,EACpC,eAAe;AAChB,CAAC;AAIM,IAAM,EAAE,QAAQ,IAAI,KAAK,IAAI;AAC7B,IAAM,UAAU;AAAA,EACtB,GAAG;AAAA,EACH,QAAQ,iBAAiB,OAAO,UAAU,SAAO,GAAiB;AACnE;","names":["createType"]}
import { Flatten } from '@taqueria/protocol/Base';
import { z } from 'zod';
export declare const generatedSchemas: {
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
    schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, ({
        label?: string | undefined;
        plugin?: string | undefined;
        command?: string | undefined;
        depends_on?: (string & {
            readonly __kind: any;
        })[] | undefined;
        operation: string;
        id: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    })[] & {
        readonly __kind: any;
    }, any>;
}, factory: {
    make: (input: ({
        label?: string | undefined;
        plugin?: string | undefined;
        command?: string | undefined;
        depends_on?: (string & {
            readonly __kind: any;
        })[] | undefined;
        operation: string;
        id: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    })[]) => import("fluture").FutureInstance<import("./TaqError").TaqError, ({
        label?: string | undefined;
        plugin?: string | undefined;
        command?: string | undefined;
        depends_on?: (string & {
            readonly __kind: any;
        })[] | undefined;
        operation: string;
        id: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    })[] & {
        readonly __kind: any;
    }>;
    of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, ({
        label?: string | undefined;
        plugin?: string | undefined;
        command?: string | undefined;
        depends_on?: (string & {
            readonly __kind: any;
        })[] | undefined;
        operation: string;
        id: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    })[] & {
        readonly __kind: any;
    }>;
    create: (input: {
        label?: string | undefined;
        plugin?: string | undefined;
        command?: string | undefined;
        depends_on?: string[] | undefined;
        operation: string;
        id: string;
    }[] | ({
        label?: string | undefined;
        plugin?: string | undefined;
        command?: string | undefined;
        depends_on?: (string & {
            readonly __kind: any;
        })[] | undefined;
        operation: string;
        id: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    })[]) => ({
        label?: string | undefined;
        plugin?: string | undefined;
        command?: string | undefined;
        depends_on?: (string & {
            readonly __kind: any;
        })[] | undefined;
        operation: string;
        id: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    })[] & {
        readonly __kind: any;
    };
    from: (input: unknown) => ({
        label?: string | undefined;
        plugin?: string | undefined;
        command?: string | undefined;
        depends_on?: (string & {
            readonly __kind: any;
        })[] | undefined;
        operation: string;
        id: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    })[] & {
        readonly __kind: any;
    };
};
export declare type Provisions = Flatten<z.infer<typeof generatedSchemas.schema>>;
export declare type t = Provisions;
export declare const create: (input: {
    label?: string | undefined;
    plugin?: string | undefined;
    command?: string | undefined;
    depends_on?: string[] | undefined;
    operation: string;
    id: string;
}[] | ({
    label?: string | undefined;
    plugin?: string | undefined;
    command?: string | undefined;
    depends_on?: (string & {
        readonly __kind: any;
    })[] | undefined;
    operation: string;
    id: string & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
})[]) => ({
    label?: string | undefined;
    plugin?: string | undefined;
    command?: string | undefined;
    depends_on?: (string & {
        readonly __kind: any;
    })[] | undefined;
    operation: string;
    id: string & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
})[] & {
    readonly __kind: any;
}, of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, ({
    label?: string | undefined;
    plugin?: string | undefined;
    command?: string | undefined;
    depends_on?: (string & {
        readonly __kind: any;
    })[] | undefined;
    operation: string;
    id: string & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
})[] & {
    readonly __kind: any;
}>, make: (input: ({
    label?: string | undefined;
    plugin?: string | undefined;
    command?: string | undefined;
    depends_on?: (string & {
        readonly __kind: any;
    })[] | undefined;
    operation: string;
    id: string & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
})[]) => import("fluture").FutureInstance<import("./TaqError").TaqError, ({
    label?: string | undefined;
    plugin?: string | undefined;
    command?: string | undefined;
    depends_on?: (string & {
        readonly __kind: any;
    })[] | undefined;
    operation: string;
    id: string & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
})[] & {
    readonly __kind: any;
}>;
export declare const schemas: {
    schema: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, ({
        label?: string | undefined;
        plugin?: string | undefined;
        command?: string | undefined;
        depends_on?: (string & {
            readonly __kind: any;
        })[] | undefined;
        operation: string;
        id: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    })[] & {
        readonly __kind: any;
    }, any>, Flatten<({
        label?: string | undefined;
        plugin?: string | undefined;
        command?: string | undefined;
        depends_on?: (string & {
            readonly __kind: any;
        })[] | undefined;
        operation: string;
        id: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    })[] & {
        readonly __kind: any;
    }>, any>;
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
};
//# sourceMappingURL=Provisions.d.ts.map
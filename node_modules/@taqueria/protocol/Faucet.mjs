// Faucet.ts
import createType from "@taqueria/protocol/Base";
import * as PublicKeyHash from "@taqueria/protocol/PublicKeyHash";
import { z } from "zod";
var commonSchema = z.object({
  mnemonic: z.preprocess(
    (arg) => typeof arg === "string" ? arg.split(" ") : arg,
    z.array(
      z.string({ description: "Faucet Mnemonic Word" }).min(1).regex(/^[a-z]{2,}$/),
      { description: "Faucet Mnemonic" }
    )
  ),
  email: z.string({ description: "Faucet E-mail" }).regex(/^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/).optional(),
  password: z.string({ description: "Faucet Password" }).optional(),
  amount: z.string({ description: "Faucet Amount" }).refine(
    (val) => val.length === 0 || /^\d+$/.test(val),
    "Amount, if present, must be numeric"
  ).optional(),
  activation_code: z.string({ description: "Faucet Activation Code" }).optional()
});
var rawSchema = commonSchema.extend({
  pkh: z.string({ description: "Faucet Public Key Hash" }).min(1)
}).describe("Faucet");
var internalSchema = z.preprocess(
  (input) => {
    const defaults = {
      pkh: "",
      mnemonic: [],
      email: "",
      password: "",
      activation_code: ""
    };
    return typeof input === "object" ? { ...defaults, ...input } : defaults;
  },
  commonSchema.extend({
    pkh: PublicKeyHash.schemas.schema
  })
).describe("Faucet");
var { schemas: generatedSchemas, factory } = createType({
  rawSchema,
  internalSchema,
  parseErrMsg: (value) => `${value} is not a valid faucet configuration`,
  unknownErrMsg: "Something went wrong trying to parse the faucet"
});
var { create, of, make } = factory;
var schemas2 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
export {
  create,
  factory,
  generatedSchemas,
  make,
  of,
  rawSchema,
  schemas2 as schemas
};
//# sourceMappingURL=Faucet.mjs.map
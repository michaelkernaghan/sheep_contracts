// RequestArgs.ts
import createType from "@taqueria/protocol/Base";
import * as LoadedConfig from "@taqueria/protocol/LoadedConfig";
import { rawSchema as sanitizedArgsSchema } from "@taqueria/protocol/SanitizedArgs";
import { z } from "zod";
var taqRunSchema = z.union([
  z.literal("pluginInfo"),
  z.literal("proxy"),
  z.literal("checkRuntimeDependencies"),
  z.literal("installRuntimeDependencies"),
  z.literal("proxyTemplate")
]);
var rawSchema2 = sanitizedArgsSchema.extend({
  taqRun: taqRunSchema,
  config: z.preprocess(
    (val) => typeof val === "string" ? JSON.parse(val) : val,
    LoadedConfig.rawSchema
  )
}).describe("RequestArgs").passthrough();
var internalSchema = sanitizedArgsSchema.extend({
  taqRun: taqRunSchema,
  config: z.preprocess(
    (val) => typeof val === "string" ? JSON.parse(val) : val,
    LoadedConfig.schemas.schema
  )
}).describe("RequestArgs").passthrough();
var { schemas: generatedSchemas, factory } = createType({
  rawSchema: rawSchema2,
  internalSchema,
  parseErrMsg: "The request is invalid",
  unknownErrMsg: "Something went wrong trying to parse the request"
});
var schemas2 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
var rawProxyTaskSchema = rawSchema2.extend({
  task: z.string().min(1)
}).describe("ProxyRequestArgs").passthrough();
var internalProxyTaskSchema = internalSchema.extend({
  task: z.string().min(1)
}).describe("ProxyRequestArgs").passthrough();
var rawProxyTemplateSchema = rawSchema2.extend({
  template: z.string().min(1)
});
var internalProxyTemplateSchema = rawSchema2.extend({
  template: z.string().min(1)
});
var proxy = createType({
  rawSchema: rawProxyTaskSchema,
  internalSchema: internalProxyTaskSchema,
  parseErrMsg: "The request is invalid",
  unknownErrMsg: "Something went wrong trying to parse the request"
});
var proxyTemplate = createType({
  rawSchema: rawProxyTemplateSchema,
  internalSchema: internalProxyTemplateSchema,
  parseErrMsg: "The request is invalid",
  unknownErrMsg: "Something went wrong trying to parse the request"
});
var proxySchemas = proxy.schemas;
var proxyFactory = proxy.factory;
var createProxyRequestArgs = proxyFactory.from;
var makeProxyRequestArgs = proxyFactory.make;
var ofProxyRequestArgs = proxyFactory.of;
var createProxyTemplateRequestArgs = proxyTemplate.factory.from;
var makeProxyTemplateRequestArgs = proxyTemplate.factory.make;
var ofProxyTemplateRequestArgs = proxyTemplate.factory.of;
var { create, make, of, from } = factory;
export {
  create,
  createProxyRequestArgs,
  createProxyTemplateRequestArgs,
  factory,
  from,
  generatedSchemas,
  make,
  makeProxyRequestArgs,
  makeProxyTemplateRequestArgs,
  of,
  ofProxyRequestArgs,
  ofProxyTemplateRequestArgs,
  proxy,
  proxyFactory,
  proxySchemas,
  proxyTemplate,
  schemas2 as schemas
};
//# sourceMappingURL=RequestArgs.mjs.map
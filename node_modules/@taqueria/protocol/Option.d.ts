import { Flatten } from '@taqueria/protocol/Base';
import { z } from 'zod';
export declare const internalSchema: z.ZodObject<{
    shortFlag: z.ZodOptional<z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __kind: any;
    }, any>, string & {
        readonly __kind: any;
    }, any>>;
    flag: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __kind: any;
    }, any>, string & {
        readonly __kind: any;
    }, any>;
    description: z.ZodString;
    defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
    choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    required: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    boolean: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
}, "strip", z.ZodTypeAny, {
    boolean?: boolean | undefined;
    type?: "string" | "number" | "boolean" | undefined;
    shortFlag?: (string & {
        readonly __kind: any;
    }) | undefined;
    defaultValue?: string | number | boolean | undefined;
    choices?: string[] | undefined;
    required?: boolean | undefined;
    description: string;
    flag: string & {
        readonly __kind: any;
    };
}, {
    boolean?: boolean | undefined;
    type?: "string" | "number" | "boolean" | undefined;
    shortFlag?: any;
    flag?: any;
    defaultValue?: string | number | boolean | undefined;
    choices?: string[] | undefined;
    required?: boolean | undefined;
    description: string;
}>;
export declare const rawSchema: z.ZodObject<{
    shortFlag: z.ZodOptional<z.ZodString>;
    flag: z.ZodString;
    description: z.ZodString;
    defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
    choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    required: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    boolean: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
}, "strip", z.ZodTypeAny, {
    boolean?: boolean | undefined;
    type?: "string" | "number" | "boolean" | undefined;
    shortFlag?: string | undefined;
    defaultValue?: string | number | boolean | undefined;
    choices?: string[] | undefined;
    required?: boolean | undefined;
    description: string;
    flag: string;
}, {
    boolean?: boolean | undefined;
    type?: "string" | "number" | "boolean" | undefined;
    shortFlag?: string | undefined;
    defaultValue?: string | number | boolean | undefined;
    choices?: string[] | undefined;
    required?: boolean | undefined;
    description: string;
    flag: string;
}>;
export declare const generatedSchemas: {
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
    schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: (string & {
            readonly __kind: any;
        }) | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }, any>;
}, factory: {
    make: (input: {
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: (string & {
            readonly __kind: any;
        }) | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string & {
            readonly __kind: any;
        };
    }) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: (string & {
            readonly __kind: any;
        }) | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>;
    of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: (string & {
            readonly __kind: any;
        }) | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>;
    create: (input: {
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: (string & {
            readonly __kind: any;
        }) | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string & {
            readonly __kind: any;
        };
    } | {
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: string | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string;
    }) => {
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: (string & {
            readonly __kind: any;
        }) | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    };
    from: (input: unknown) => {
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: (string & {
            readonly __kind: any;
        }) | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    };
};
export declare type Option = Flatten<z.infer<typeof generatedSchemas.schema>>;
export declare type t = Option;
export declare const make: (input: {
    boolean?: boolean | undefined;
    type?: "string" | "number" | "boolean" | undefined;
    shortFlag?: (string & {
        readonly __kind: any;
    }) | undefined;
    defaultValue?: string | number | boolean | undefined;
    choices?: string[] | undefined;
    required?: boolean | undefined;
    description: string;
    flag: string & {
        readonly __kind: any;
    };
}) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    boolean?: boolean | undefined;
    type?: "string" | "number" | "boolean" | undefined;
    shortFlag?: (string & {
        readonly __kind: any;
    }) | undefined;
    defaultValue?: string | number | boolean | undefined;
    choices?: string[] | undefined;
    required?: boolean | undefined;
    description: string;
    flag: string & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
}>, create: (input: {
    boolean?: boolean | undefined;
    type?: "string" | "number" | "boolean" | undefined;
    shortFlag?: (string & {
        readonly __kind: any;
    }) | undefined;
    defaultValue?: string | number | boolean | undefined;
    choices?: string[] | undefined;
    required?: boolean | undefined;
    description: string;
    flag: string & {
        readonly __kind: any;
    };
} | {
    boolean?: boolean | undefined;
    type?: "string" | "number" | "boolean" | undefined;
    shortFlag?: string | undefined;
    defaultValue?: string | number | boolean | undefined;
    choices?: string[] | undefined;
    required?: boolean | undefined;
    description: string;
    flag: string;
}) => {
    boolean?: boolean | undefined;
    type?: "string" | "number" | "boolean" | undefined;
    shortFlag?: (string & {
        readonly __kind: any;
    }) | undefined;
    defaultValue?: string | number | boolean | undefined;
    choices?: string[] | undefined;
    required?: boolean | undefined;
    description: string;
    flag: string & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
}, of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    boolean?: boolean | undefined;
    type?: "string" | "number" | "boolean" | undefined;
    shortFlag?: (string & {
        readonly __kind: any;
    }) | undefined;
    defaultValue?: string | number | boolean | undefined;
    choices?: string[] | undefined;
    required?: boolean | undefined;
    description: string;
    flag: string & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
}>;
export declare const schemas: {
    schema: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: (string & {
            readonly __kind: any;
        }) | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }, any>, Flatten<{
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: (string & {
            readonly __kind: any;
        }) | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>, any>;
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
};
//# sourceMappingURL=Option.d.ts.map
// PluginInfo.ts
import * as Alias from "@taqueria/protocol/Alias";
import createType from "@taqueria/protocol/Base";
import * as ParsedOperation from "@taqueria/protocol/ParsedOperation";
import * as ParsedTemplate from "@taqueria/protocol/ParsedTemplate";
import * as Task from "@taqueria/protocol/Task";
import * as VersionNumber from "@taqueria/protocol/VersionNumber";
import { z } from "zod";
var rawSchema3 = z.object({
  name: z.string({ description: "Plugin Name" }).min(1),
  version: VersionNumber.rawSchema.describe("Plugin Version #"),
  schema: VersionNumber.rawSchema.describe("Plugin Schema Version #"),
  alias: Alias.rawSchema.describe("Plugin Alias"),
  tasks: z.preprocess(
    (val) => val ?? [],
    z.array(
      Task.schemas.schema.describe("Plugin Task"),
      { description: "Plugin Tasks" }
    )
  ).optional(),
  operations: z.preprocess(
    (val) => val ?? [],
    z.array(
      ParsedOperation.schemas.schema.describe("Plugin Operation"),
      { description: "Plugin Operations" }
    )
  ).optional(),
  templates: z.preprocess(
    (val) => val ?? [],
    z.array(
      ParsedTemplate.schemas.schema.describe("Plugin Template")
    )
  ).optional()
});
var internalSchema = rawSchema3.extend({
  version: VersionNumber.schemas.schema.describe("Plugin Version #"),
  schema: VersionNumber.schemas.schema.describe("Plugin Schema Version #"),
  alias: Alias.schemas.schema.describe("Plugin Alias"),
  tasks: z.preprocess(
    (val) => val ?? [],
    z.array(
      Task.schemas.schema.describe("Plugin Task"),
      { description: "Plugin Tasks" }
    )
  ).optional(),
  operations: z.preprocess(
    (val) => val ?? [],
    z.array(
      ParsedOperation.schemas.schema.describe("Plugin Operation"),
      { description: "Plugin Operations" }
    )
  ).optional(),
  templates: z.preprocess(
    (val) => val ?? [],
    z.array(
      ParsedTemplate.schemas.schema.describe("Plugin Template")
    )
  ).optional()
}).describe("Plugin Schema");
var { schemas: schemas6, factory } = createType({
  rawSchema: rawSchema3,
  internalSchema,
  parseErrMsg: "The schema returned from the plugin is invalid",
  unknownErrMsg: "Something went wrong parsing the schema from a plugin"
});
var { create, of, make } = factory;
export {
  create,
  factory,
  internalSchema,
  make,
  of,
  rawSchema3 as rawSchema,
  schemas6 as schemas
};
//# sourceMappingURL=PluginInfo.mjs.map
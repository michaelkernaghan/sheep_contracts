"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// SanitizedArgs.ts
var SanitizedArgs_exports = {};
__export(SanitizedArgs_exports, {
  addContractArgs: () => addContractArgs,
  addContractsRawSchema: () => addContractsRawSchema,
  create: () => create,
  createAddContractArgs: () => createAddContractArgs,
  createCreateTaskArgs: () => createCreateTaskArgs,
  createInstallTaskArgs: () => createInstallTaskArgs,
  createProvisionTaskArgs: () => createProvisionTaskArgs,
  createRemoveContractsArgs: () => createRemoveContractsArgs,
  createScaffoldTaskArgs: () => createScaffoldTaskArgs,
  createTaskArgs: () => createTaskArgs,
  createUninstallTaskArgs: () => createUninstallTaskArgs,
  factory: () => factory,
  generatedSchemas: () => generatedSchemas,
  installTaskArgs: () => installTaskArgs,
  make: () => make,
  makeAddContractArgs: () => makeAddContractArgs,
  makeCreateTaskArgs: () => makeCreateTaskArgs,
  makeInstallTaskArgs: () => makeInstallTaskArgs,
  makeProvisionTaskArgs: () => makeProvisionTaskArgs,
  makeRemoveContractsArgs: () => makeRemoveContractsArgs,
  makeScaffoldTaskArgs: () => makeScaffoldTaskArgs,
  makeUninstallTaskArgs: () => makeUninstallTaskArgs,
  managePluginRawSchema: () => managePluginRawSchema,
  of: () => of,
  ofAddContractArgs: () => ofAddContractArgs,
  ofCreateTaskArgs: () => ofCreateTaskArgs,
  ofInstallTaskArgs: () => ofInstallTaskArgs,
  ofProvisionTaskArgs: () => ofProvisionTaskArgs,
  ofRemoveContractsArgs: () => ofRemoveContractsArgs,
  ofScaffoldTaskArgs: () => ofScaffoldTaskArgs,
  ofUninstallTaskArgs: () => ofUninstallTaskArgs,
  provisionRawSchema: () => provisionRawSchema,
  provisionTaskArgs: () => provisionTaskArgs,
  rawSchema: () => rawSchema,
  removeContractsArgs: () => removeContractsArgs,
  removeContractsRawSchema: () => removeContractsRawSchema,
  scaffoldRawSchema: () => scaffoldRawSchema,
  scaffoldTaskArgs: () => scaffoldTaskArgs,
  schemas: () => schemas2,
  templateRawSchema: () => templateRawSchema,
  uninstallTaskArgs: () => uninstallTaskArgs,
  versionRawSchema: () => versionRawSchema
});
module.exports = __toCommonJS(SanitizedArgs_exports);
var import_Base = __toESM(require("@taqueria/protocol/Base"));
var SanitizedAbsPath = __toESM(require("@taqueria/protocol/SanitizedAbsPath"));
var import_zod = require("zod");
var rawSchema = import_zod.z.object({
  _: import_zod.z.array(import_zod.z.union([import_zod.z.string().min(1), import_zod.z.number()])),
  projectDir: SanitizedAbsPath.schemas.schema,
  maxConcurrency: import_zod.z.preprocess(
    (val) => typeof val === "string" ? parseInt(val) : Number(val),
    import_zod.z.number().int().min(1).default(10)
  ),
  debug: import_zod.z.preprocess(
    (val) => Boolean(val),
    import_zod.z.boolean().default(false)
  ),
  disableState: import_zod.z.preprocess(
    (val) => Boolean(val),
    import_zod.z.boolean().default(false)
  ),
  logPluginRequests: import_zod.z.preprocess(
    (val) => Boolean(val),
    import_zod.z.boolean().default(false)
  ),
  fromVsCode: import_zod.z.preprocess(
    (val) => Boolean(val),
    import_zod.z.boolean().default(false)
  ),
  version: import_zod.z.preprocess(
    (val) => Boolean(val),
    import_zod.z.boolean().optional()
  ),
  build: import_zod.z.preprocess(
    (val) => Boolean(val),
    import_zod.z.boolean().optional()
  ),
  help: import_zod.z.preprocess(
    (val) => Boolean(val),
    import_zod.z.boolean().optional()
  ),
  yes: import_zod.z.preprocess(
    (val) => Boolean(val),
    import_zod.z.boolean().optional()
  ),
  plugin: import_zod.z.string().min(1).optional(),
  env: import_zod.z.union([import_zod.z.literal("production"), import_zod.z.literal("testing"), import_zod.z.literal("development"), import_zod.z.string().nonempty()]).default("development"),
  quickstart: import_zod.z.string().min(1).optional(),
  setBuild: import_zod.z.preprocess(
    (val) => String(val),
    import_zod.z.string().min(3)
  ),
  setVersion: import_zod.z.string().min(3),
  pluginName: import_zod.z.string().min(1).optional()
}, { description: "Sanitizied Args" }).passthrough();
var scaffoldRawSchema = rawSchema.extend({
  scaffoldProjectDir: import_zod.z.string().min(1).transform((val) => val),
  scaffoldUrl: import_zod.z.string().min(1).url().transform((val) => val)
});
var provisionRawSchema = rawSchema.extend({
  operation: import_zod.z.string().min(1).describe("Operation name"),
  name: import_zod.z.string().min(1).regex(
    /^[a-z0-9]+[a-z0-9-_]$/,
    "Provisioner name must consist of one or more letters/numbers and may not start with an underscore or dash."
  ).describe("Provisioner name").optional()
}).passthrough();
var templateRawSchema = rawSchema.extend({
  template: import_zod.z.string().min(1)
}).passthrough();
var managePluginRawSchema = rawSchema.omit({ pluginName: true }).extend({
  pluginName: import_zod.z.string().min(1)
});
var versionRawSchema = rawSchema.extend({
  version: import_zod.z.boolean().default(true)
});
var addContractsRawSchema = import_zod.z.preprocess(
  (val) => {
    const obj = typeof val === "object" ? Object(val) : { contractName: "", sourceFile: "" };
    return !obj.contractName && obj.sourceFile ? { ...obj, contractName: obj["sourceFile"] } : obj;
  },
  rawSchema.extend({
    sourceFile: import_zod.z.string().min(1),
    contractName: import_zod.z.string().min(1)
  })
);
var removeContractsRawSchema = rawSchema.extend({
  contractName: import_zod.z.string().min(1)
});
var { schemas: generatedSchemas, factory } = (0, import_Base.default)({
  rawSchema,
  parseErrMsg: "The arguments provided are invalid",
  unknownErrMsg: "Something went wrong parsing the command-line arguments"
});
var { create, of, make } = factory;
var schemas2 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
var scaffoldTaskArgs = (0, import_Base.default)({
  rawSchema: scaffoldRawSchema,
  parseErrMsg: "The arguments provided are invalid for the scaffold task",
  unknownErrMsg: "Something went wrong parsing the arguments for the scaffold task"
});
var provisionTaskArgs = (0, import_Base.default)({
  rawSchema: provisionRawSchema,
  parseErrMsg: "The arguments provided are invalid for the provision task",
  unknownErrMsg: "Something went wrong parsing the arguments for the provision task"
});
var installTaskArgs = (0, import_Base.default)({
  rawSchema: managePluginRawSchema,
  parseErrMsg: "The arguments provided are invalid for the install task",
  unknownErrMsg: "Something went wrong parsing the arguments for the install task"
});
var uninstallTaskArgs = (0, import_Base.default)({
  rawSchema: managePluginRawSchema,
  parseErrMsg: "The arguments provided are invalid for the uninstall task",
  unknownErrMsg: "Something went wrong parsing the arguments for the uninstall task"
});
var createTaskArgs = (0, import_Base.default)({
  rawSchema: templateRawSchema,
  parseErrMsg: "The arguments provided are invalid for the create task",
  unknownErrMsg: "Something went wrong parsing the arguments for the create task"
});
var addContractArgs = (0, import_Base.default)({
  rawSchema: addContractsRawSchema,
  parseErrMsg: "Please specify the source file to register.",
  unknownErrMsg: "Something went wrong parsing the arguments for registering a contract."
});
var removeContractsArgs = (0, import_Base.default)({
  rawSchema: removeContractsRawSchema,
  parseErrMsg: "Please specify the contract name to unregister.",
  unknownErrMsg: "Something went wrong parsing the arguments to unregister a contract."
});
var createScaffoldTaskArgs = scaffoldTaskArgs.factory.from;
var makeScaffoldTaskArgs = scaffoldTaskArgs.factory.make;
var ofScaffoldTaskArgs = scaffoldTaskArgs.factory.of;
var createProvisionTaskArgs = provisionTaskArgs.factory.create;
var makeProvisionTaskArgs = provisionTaskArgs.factory.make;
var ofProvisionTaskArgs = provisionTaskArgs.factory.of;
var createInstallTaskArgs = installTaskArgs.factory.create;
var makeInstallTaskArgs = installTaskArgs.factory.make;
var ofInstallTaskArgs = installTaskArgs.factory.of;
var createUninstallTaskArgs = uninstallTaskArgs.factory.create;
var makeUninstallTaskArgs = uninstallTaskArgs.factory.make;
var ofUninstallTaskArgs = uninstallTaskArgs.factory.of;
var createCreateTaskArgs = createTaskArgs.factory.create;
var makeCreateTaskArgs = createTaskArgs.factory.make;
var ofCreateTaskArgs = createTaskArgs.factory.of;
var createAddContractArgs = addContractArgs.factory.create;
var makeAddContractArgs = addContractArgs.factory.make;
var ofAddContractArgs = addContractArgs.factory.of;
var createRemoveContractsArgs = removeContractsArgs.factory.create;
var makeRemoveContractsArgs = removeContractsArgs.factory.make;
var ofRemoveContractsArgs = removeContractsArgs.factory.of;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  addContractArgs,
  addContractsRawSchema,
  create,
  createAddContractArgs,
  createCreateTaskArgs,
  createInstallTaskArgs,
  createProvisionTaskArgs,
  createRemoveContractsArgs,
  createScaffoldTaskArgs,
  createTaskArgs,
  createUninstallTaskArgs,
  factory,
  generatedSchemas,
  installTaskArgs,
  make,
  makeAddContractArgs,
  makeCreateTaskArgs,
  makeInstallTaskArgs,
  makeProvisionTaskArgs,
  makeRemoveContractsArgs,
  makeScaffoldTaskArgs,
  makeUninstallTaskArgs,
  managePluginRawSchema,
  of,
  ofAddContractArgs,
  ofCreateTaskArgs,
  ofInstallTaskArgs,
  ofProvisionTaskArgs,
  ofRemoveContractsArgs,
  ofScaffoldTaskArgs,
  ofUninstallTaskArgs,
  provisionRawSchema,
  provisionTaskArgs,
  rawSchema,
  removeContractsArgs,
  removeContractsRawSchema,
  scaffoldRawSchema,
  scaffoldTaskArgs,
  schemas,
  templateRawSchema,
  uninstallTaskArgs,
  versionRawSchema
});
//# sourceMappingURL=SanitizedArgs.js.map
// TaqError.ts
import { map, reject } from "fluture";
var E_TaqError = class extends Error {
  constructor(taqErr) {
    super(taqErr.msg);
    this.context = taqErr.context;
    this.kind = taqErr.kind;
    this.name = this.kind;
    this.previous = taqErr.previous;
  }
};
var toFutureParseErr = (previous, msg, context) => reject(toParseErr(previous, msg, context)).pipe(map((val) => val));
var toParseErr = (previous, msg, context) => create({
  kind: "E_PARSE",
  msg,
  context,
  previous
});
var toParseUnknownErr = (previous, msg, context) => create({
  kind: "E_PARSE_UNKNOWN",
  msg,
  context,
  previous
});
var toFutureParseUnknownErr = (previous, msg, context) => reject(toParseUnknownErr(previous, msg, context)).pipe(map((val) => val));
var create = (err) => err;
export {
  E_TaqError,
  create,
  toFutureParseErr,
  toFutureParseUnknownErr,
  toParseErr,
  toParseUnknownErr
};
//# sourceMappingURL=TaqError.mjs.map
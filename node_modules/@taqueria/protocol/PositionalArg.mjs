// PositionalArg.ts
import createType from "@taqueria/protocol/Base";
import * as HumanReadableIdentifier from "@taqueria/protocol/HumanReadableIdentifier";
import { z } from "zod";
var rawSchema2 = z.object({
  placeholder: HumanReadableIdentifier.rawSchema.describe("Positional Arg Placeholder"),
  description: z.string({ description: "Positional Arg Description" }).min(1),
  defaultValue: z.union(
    [z.string(), z.number(), z.boolean()],
    { description: "Positional Arg Default Value" }
  ).optional(),
  type: z.union(
    [z.literal("string"), z.literal("number"), z.literal("boolean")],
    { description: "Positional Arg Datatype" }
  ).optional(),
  required: z.boolean().optional()
}).describe("Positional Arg");
var internalSchema = rawSchema2.extend({
  placeholder: HumanReadableIdentifier.schemas.schema.describe("Positional Arg Placeholder")
}).describe("Positional Arg");
var { schemas: generatedSchemas, factory } = createType({
  rawSchema: rawSchema2,
  internalSchema,
  parseErrMsg: (value) => `The following positional argument is invalid: ${value}`,
  unknownErrMsg: "Something went wrong parsing the positional argument"
});
var { create, of, make } = factory;
var schemas2 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
export {
  create,
  factory,
  generatedSchemas,
  make,
  of,
  rawSchema2 as rawSchema,
  schemas2 as schemas
};
//# sourceMappingURL=PositionalArg.mjs.map
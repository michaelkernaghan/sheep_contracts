{"version":3,"sources":["LoadedConfig.ts"],"sourcesContent":["import createType, { Flatten } from '@taqueria/protocol/Base';\nimport * as Config from '@taqueria/protocol/Config';\nimport * as SanitizedAbsPath from '@taqueria/protocol/SanitizedAbsPath';\nimport * as SHA256 from '@taqueria/protocol/SHA256';\nimport { z } from 'zod';\n\nexport const rawSchema = Config.rawSchema\n\t.omit({ plugins: true })\n\t.extend({\n\t\tplugins: Config.pluginsRawSchema,\n\t\tprojectDir: SanitizedAbsPath.rawSchema.describe('loadedConfig.projectDir'),\n\t\tconfigFile: SanitizedAbsPath.rawSchema.describe('loadedConfig.configFile'),\n\t\thash: SHA256.rawSchema.describe('loadedConfig.hash'),\n\t})\n\t.describe('LoadedConfig');\n\nexport const internalSchema = Config.internalSchema\n\t.omit({ plugins: true })\n\t.extend({\n\t\tplugins: Config.pluginsInternalSchema,\n\t\tprojectDir: SanitizedAbsPath.schemas.schema.describe('loadedConfig.projectDir'),\n\t\tconfigFile: SanitizedAbsPath.schemas.schema.describe('loadedConfig.configFile'),\n\t\thash: SHA256.schemas.schema.describe('loadedConfig.hash'),\n\t})\n\t.describe('LoadedConfig');\n\ntype RawInput = z.infer<typeof rawSchema>;\ntype Input = Flatten<z.infer<typeof internalSchema>>;\n\nexport const { schemas: generatedSchemas, factory } = createType<RawInput, Input>({\n\trawSchema,\n\tinternalSchema,\n\tparseErrMsg: (value: unknown) => `The following configuration is invalid: ${value}`,\n\tunknownErrMsg: 'Something went wrong trying to parse the configuration to load',\n});\n\nexport type LoadedConfig = z.infer<typeof generatedSchemas.schema>;\nexport type t = LoadedConfig;\nexport const { create, of, make } = factory;\nexport const schemas = {\n\t...generatedSchemas,\n\tschema: generatedSchemas.schema.transform(val => val as LoadedConfig),\n};\n\nexport const toConfig = (config: LoadedConfig) => Config.make(config);\n"],"mappings":";AAAA,OAAO,gBAA6B;AACpC,YAAY,YAAY;AACxB,YAAY,sBAAsB;AAClC,YAAY,YAAY;AAGjB,IAAMA,aAAmB,iBAC9B,KAAK,EAAE,SAAS,KAAK,CAAC,EACtB,OAAO;AAAA,EACP,SAAgB;AAAA,EAChB,YAA6B,2BAAU,SAAS,yBAAyB;AAAA,EACzE,YAA6B,2BAAU,SAAS,yBAAyB;AAAA,EACzE,MAAa,iBAAU,SAAS,mBAAmB;AACpD,CAAC,EACA,SAAS,cAAc;AAElB,IAAMC,kBAAwB,sBACnC,KAAK,EAAE,SAAS,KAAK,CAAC,EACtB,OAAO;AAAA,EACP,SAAgB;AAAA,EAChB,YAA6B,yBAAQ,OAAO,SAAS,yBAAyB;AAAA,EAC9E,YAA6B,yBAAQ,OAAO,SAAS,yBAAyB;AAAA,EAC9E,MAAa,eAAQ,OAAO,SAAS,mBAAmB;AACzD,CAAC,EACA,SAAS,cAAc;AAKlB,IAAM,EAAE,SAAS,kBAAkB,QAAQ,IAAI,WAA4B;AAAA,EACjF,WAAAD;AAAA,EACA,gBAAAC;AAAA,EACA,aAAa,CAAC,UAAmB,2CAA2C;AAAA,EAC5E,eAAe;AAChB,CAAC;AAIM,IAAM,EAAE,QAAQ,IAAI,MAAAC,MAAK,IAAI;AAC7B,IAAMC,WAAU;AAAA,EACtB,GAAG;AAAA,EACH,QAAQ,iBAAiB,OAAO,UAAU,SAAO,GAAmB;AACrE;AAEO,IAAM,WAAW,CAAC,WAAgC,YAAK,MAAM;","names":["rawSchema","internalSchema","make","schemas"]}
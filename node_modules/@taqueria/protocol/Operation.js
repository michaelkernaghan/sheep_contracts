"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// Operation.ts
var Operation_exports = {};
__export(Operation_exports, {
  create: () => create,
  factory: () => factory,
  generatedSchemas: () => generatedSchemas,
  internalSchema: () => internalSchema,
  make: () => make,
  of: () => of,
  rawSchema: () => rawSchema6,
  schemas: () => schemas6
});
module.exports = __toCommonJS(Operation_exports);
var import_Base = __toESM(require("@taqueria/protocol/Base"));
var Command = __toESM(require("@taqueria/protocol/Command"));
var Option = __toESM(require("@taqueria/protocol/Option"));
var PersistentState = __toESM(require("@taqueria/protocol/PersistentState"));
var PositionalArg = __toESM(require("@taqueria/protocol/PositionalArg"));
var RequestArgs = __toESM(require("@taqueria/protocol/RequestArgs"));
var Verb = __toESM(require("@taqueria/protocol/Verb"));
var import_zod = require("zod");
var rawSchema6 = import_zod.z.object({
  operation: Verb.rawSchema.describe("Operation Name"),
  command: Command.rawSchema.describe("Operation Command"),
  description: import_zod.z.string({ description: "Operation Description" }).optional(),
  positionals: import_zod.z.array(PositionalArg.rawSchema).default([]).describe("Operation Positional Args").optional(),
  options: import_zod.z.preprocess(
    (val) => val ?? [],
    import_zod.z.array(
      Option.rawSchema.describe("Operation Option"),
      { description: "Operation Options" }
    ).optional()
  ),
  handler: import_zod.z.function().args(PersistentState.rawSchema).returns(
    import_zod.z.function().args(RequestArgs.schemas.internalSchema)
  ).describe("Operation Handler").transform((val) => val)
}).describe("Operation");
var internalSchema = import_zod.z.object({
  operation: Verb.schemas.schema.describe("Operation Name"),
  command: Command.schemas.schema.describe("Operation Command"),
  description: import_zod.z.string({ description: "Optionation Description" }).optional(),
  positionals: import_zod.z.array(PositionalArg.schemas.schema).default([]).describe("Operation Positional Args").optional(),
  options: import_zod.z.preprocess(
    (val) => val ?? [],
    import_zod.z.array(Option.schemas.schema.describe("Operation Option"), { description: "Operation Options" }).optional()
  ),
  handler: import_zod.z.function().args(PersistentState.rawSchema).returns(
    import_zod.z.function().args(RequestArgs.schemas.schema)
  ).describe("Operation Handler").transform((val) => val)
}).describe("Operation");
var { schemas: generatedSchemas, factory } = (0, import_Base.default)({
  rawSchema: rawSchema6,
  internalSchema,
  parseErrMsg: (value) => `The following operation is invalid: ${value}`,
  unknownErrMsg: "Something went wrong trying to parse the operation"
});
var { make, of, create } = factory;
var schemas6 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  create,
  factory,
  generatedSchemas,
  internalSchema,
  make,
  of,
  rawSchema,
  schemas
});
//# sourceMappingURL=Operation.js.map
import { Flatten } from '@taqueria/protocol/Base';
import { z } from 'zod';
export declare const pluginsRawSchema: z.ZodEffects<z.ZodArray<z.ZodObject<{
    name: z.ZodString;
    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
}, "strip", z.ZodTypeAny, {
    type: "npm" | "binary" | "deno";
    name: string;
}, {
    type: "npm" | "binary" | "deno";
    name: string;
}>, "many">, {
    type: "npm" | "binary" | "deno";
    name: string;
}[], unknown>;
export declare const pluginsInternalSchema: z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
    type: "npm" | "binary" | "deno";
    name: string;
} & {
    readonly __kind: any;
}, any>, {
    type: "npm" | "binary" | "deno";
    name: string;
} & {
    readonly __kind: any;
}, any>, "many">, ({
    type: "npm" | "binary" | "deno";
    name: string;
} & {
    readonly __kind: any;
})[], unknown>;
export declare const internalSchema: z.ZodObject<z.extendShape<{
    language: z.ZodEffects<z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>, "en" | "fr" | undefined, unknown>;
    plugins: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        type: "npm" | "binary" | "deno";
        name: string;
    } & {
        readonly __kind: any;
    }, any>, {
        type: "npm" | "binary" | "deno";
        name: string;
    } & {
        readonly __kind: any;
    }, any>, "many">, ({
        type: "npm" | "binary" | "deno";
        name: string;
    } & {
        readonly __kind: any;
    })[], unknown>>;
    contractsDir: z.ZodEffects<z.ZodString, string, unknown>;
    artifactsDir: z.ZodEffects<z.ZodString, string, unknown>;
    contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        sourceFile: z.ZodString;
        hash: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        sourceFile: string;
        hash: string;
    }, {
        sourceFile: string;
        hash: string;
    }>>>;
}, {
    network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        accounts?: Record<string, any> | undefined;
        faucet?: Flatten<{
            email?: string | undefined;
            password?: string | undefined;
            amount?: string | undefined;
            activation_code?: string | undefined;
            mnemonic: string[];
            pkh: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        label: string & {
            readonly __kind: any;
        };
        rpcUrl: string & {
            readonly __kind: any;
        };
        protocol: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }, any>, Flatten<{
        accounts?: Record<string, any> | undefined;
        faucet?: Flatten<{
            email?: string | undefined;
            password?: string | undefined;
            amount?: string | undefined;
            activation_code?: string | undefined;
            mnemonic: string[];
            pkh: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        label: string & {
            readonly __kind: any;
        };
        rpcUrl: string & {
            readonly __kind: any;
        };
        protocol: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>, any>>>;
    sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        accounts?: Record<string, string | ({
            encryptedKey: string;
            publicKeyHash: string & {
                readonly __kind: any;
            };
            secretKey: string;
        } & {
            readonly __kind: any;
        })> | undefined;
        attributes?: Record<string, string | number | boolean> | undefined;
        plugin?: (string & {
            readonly __kind: any;
        }) | undefined;
        tzkt?: {
            disableAutostartWithSandbox: boolean;
            postgresqlPort: number;
            apiPort: number;
        } | undefined;
        label: string & {
            readonly __kind: any;
        };
        rpcUrl: string & {
            readonly __kind: any;
        };
        protocol: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }, any>, {
        accounts?: Record<string, string | ({
            encryptedKey: string;
            publicKeyHash: string & {
                readonly __kind: any;
            };
            secretKey: string;
        } & {
            readonly __kind: any;
        })> | undefined;
        attributes?: Record<string, string | number | boolean> | undefined;
        plugin?: (string & {
            readonly __kind: any;
        }) | undefined;
        tzkt?: {
            disableAutostartWithSandbox: boolean;
            postgresqlPort: number;
            apiPort: number;
        } | undefined;
        label: string & {
            readonly __kind: any;
        };
        rpcUrl: string & {
            readonly __kind: any;
        };
        protocol: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }, any>>>;
    environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        storage?: Record<string, any> | undefined;
        aliases?: Record<string, any> | undefined;
        networks: string[];
        sandboxes: string[];
    } & {
        readonly __kind: any;
    }, any>, Flatten<{
        storage?: Record<string, any> | undefined;
        aliases?: Record<string, any> | undefined;
        networks: string[];
        sandboxes: string[];
    } & {
        readonly __kind: any;
    }>, any>, z.ZodString]>>>;
    accounts: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber]>>, Record<string, string | number>, unknown>;
    contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        sourceFile: string;
        hash: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }, any>, {
        sourceFile: string;
        hash: string & {
            readonly __kind: any;
        };
    }, any>>>;
    metadata: z.ZodOptional<z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        name?: string | undefined;
        projectDescription?: string | undefined;
        authors?: string[] | undefined;
        license?: string | undefined;
        homepage?: string | undefined;
    } & {
        readonly __kind: any;
    }, any>, {
        name?: string | undefined;
        projectDescription?: string | undefined;
        authors?: string[] | undefined;
        license?: string | undefined;
        homepage?: string | undefined;
    } & {
        readonly __kind: any;
    }, any>>;
}>, "strip", z.ZodTypeAny, {
    language?: "en" | "fr" | undefined;
    plugins?: ({
        type: "npm" | "binary" | "deno";
        name: string;
    } & {
        readonly __kind: any;
    })[] | undefined;
    contracts?: Record<string, {
        sourceFile: string;
        hash: string & {
            readonly __kind: any;
        };
    }> | undefined;
    network?: Record<string, Flatten<{
        accounts?: Record<string, any> | undefined;
        faucet?: Flatten<{
            email?: string | undefined;
            password?: string | undefined;
            amount?: string | undefined;
            activation_code?: string | undefined;
            mnemonic: string[];
            pkh: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        label: string & {
            readonly __kind: any;
        };
        rpcUrl: string & {
            readonly __kind: any;
        };
        protocol: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>> | undefined;
    sandbox?: Record<string, {
        accounts?: Record<string, string | ({
            encryptedKey: string;
            publicKeyHash: string & {
                readonly __kind: any;
            };
            secretKey: string;
        } & {
            readonly __kind: any;
        })> | undefined;
        attributes?: Record<string, string | number | boolean> | undefined;
        plugin?: (string & {
            readonly __kind: any;
        }) | undefined;
        tzkt?: {
            disableAutostartWithSandbox: boolean;
            postgresqlPort: number;
            apiPort: number;
        } | undefined;
        label: string & {
            readonly __kind: any;
        };
        rpcUrl: string & {
            readonly __kind: any;
        };
        protocol: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }> | undefined;
    environment?: Record<string, string | Flatten<{
        storage?: Record<string, any> | undefined;
        aliases?: Record<string, any> | undefined;
        networks: string[];
        sandboxes: string[];
    } & {
        readonly __kind: any;
    }>> | undefined;
    metadata?: ({
        name?: string | undefined;
        projectDescription?: string | undefined;
        authors?: string[] | undefined;
        license?: string | undefined;
        homepage?: string | undefined;
    } & {
        readonly __kind: any;
    }) | undefined;
    accounts: Record<string, string | number>;
    contractsDir: string;
    artifactsDir: string;
}, {
    accounts?: unknown;
    language?: unknown;
    plugins?: unknown;
    contractsDir?: unknown;
    contracts?: Record<string, any> | undefined;
    artifactsDir?: unknown;
    network?: Record<string, any> | undefined;
    sandbox?: Record<string, any> | undefined;
    environment?: Record<string, any> | undefined;
    metadata?: any;
}>;
export declare const rawSchema: z.ZodObject<z.extendShape<{
    language: z.ZodEffects<z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>, "en" | "fr" | undefined, unknown>;
    plugins: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        type: "npm" | "binary" | "deno";
        name: string;
    } & {
        readonly __kind: any;
    }, any>, {
        type: "npm" | "binary" | "deno";
        name: string;
    } & {
        readonly __kind: any;
    }, any>, "many">, ({
        type: "npm" | "binary" | "deno";
        name: string;
    } & {
        readonly __kind: any;
    })[], unknown>>;
    contractsDir: z.ZodEffects<z.ZodString, string, unknown>;
    artifactsDir: z.ZodEffects<z.ZodString, string, unknown>;
    contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        sourceFile: z.ZodString;
        hash: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        sourceFile: string;
        hash: string;
    }, {
        sourceFile: string;
        hash: string;
    }>>>;
}, {
    plugins: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
    }, "strip", z.ZodTypeAny, {
        type: "npm" | "binary" | "deno";
        name: string;
    }, {
        type: "npm" | "binary" | "deno";
        name: string;
    }>, "many">, {
        type: "npm" | "binary" | "deno";
        name: string;
    }[], unknown>>;
    network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        label: z.ZodString;
        rpcUrl: z.ZodString;
        protocol: z.ZodEffects<z.ZodString, string, string>;
        accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        faucet: z.ZodOptional<z.ZodObject<z.extendShape<{
            mnemonic: z.ZodEffects<z.ZodArray<z.ZodString, "many">, string[], unknown>;
            email: z.ZodOptional<z.ZodString>;
            password: z.ZodOptional<z.ZodString>;
            amount: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            activation_code: z.ZodOptional<z.ZodString>;
        }, {
            pkh: z.ZodString;
        }>, "strip", z.ZodTypeAny, {
            email?: string | undefined;
            password?: string | undefined;
            amount?: string | undefined;
            activation_code?: string | undefined;
            mnemonic: string[];
            pkh: string;
        }, {
            mnemonic?: unknown;
            email?: string | undefined;
            password?: string | undefined;
            amount?: string | undefined;
            activation_code?: string | undefined;
            pkh: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        accounts?: Record<string, any> | undefined;
        faucet?: {
            email?: string | undefined;
            password?: string | undefined;
            amount?: string | undefined;
            activation_code?: string | undefined;
            mnemonic: string[];
            pkh: string;
        } | undefined;
        label: string;
        rpcUrl: string;
        protocol: string;
    }, {
        accounts?: Record<string, any> | undefined;
        faucet?: {
            mnemonic?: unknown;
            email?: string | undefined;
            password?: string | undefined;
            amount?: string | undefined;
            activation_code?: string | undefined;
            pkh: string;
        } | undefined;
        label: string;
        rpcUrl: string;
        protocol: string;
    }>>>;
    sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        label: z.ZodString;
        rpcUrl: z.ZodString;
        protocol: z.ZodString;
        attributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
        plugin: z.ZodOptional<z.ZodString>;
        accounts: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            default: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            default: string;
        }, {
            default: string;
        }>, z.ZodRecord<z.ZodString, z.ZodObject<{
            encryptedKey: z.ZodString;
            publicKeyHash: z.ZodString;
            secretKey: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            encryptedKey: string;
            publicKeyHash: string;
            secretKey: string;
        }, {
            encryptedKey: string;
            publicKeyHash: string;
            secretKey: string;
        }>>]>>;
        tzkt: z.ZodOptional<z.ZodObject<{
            disableAutostartWithSandbox: z.ZodDefault<z.ZodBoolean>;
            postgresqlPort: z.ZodDefault<z.ZodNumber>;
            apiPort: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            disableAutostartWithSandbox: boolean;
            postgresqlPort: number;
            apiPort: number;
        }, {
            disableAutostartWithSandbox?: boolean | undefined;
            postgresqlPort?: number | undefined;
            apiPort?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        accounts?: {
            default: string;
        } | Record<string, {
            encryptedKey: string;
            publicKeyHash: string;
            secretKey: string;
        }> | undefined;
        attributes?: Record<string, string | number | boolean> | undefined;
        plugin?: string | undefined;
        tzkt?: {
            disableAutostartWithSandbox: boolean;
            postgresqlPort: number;
            apiPort: number;
        } | undefined;
        label: string;
        rpcUrl: string;
        protocol: string;
    }, {
        accounts?: {
            default: string;
        } | Record<string, {
            encryptedKey: string;
            publicKeyHash: string;
            secretKey: string;
        }> | undefined;
        attributes?: Record<string, string | number | boolean> | undefined;
        plugin?: string | undefined;
        tzkt?: {
            disableAutostartWithSandbox?: boolean | undefined;
            postgresqlPort?: number | undefined;
            apiPort?: number | undefined;
        } | undefined;
        label: string;
        rpcUrl: string;
        protocol: string;
    }>>>;
    environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
        networks: z.ZodArray<z.ZodString, "many">;
        sandboxes: z.ZodArray<z.ZodString, "many">;
        storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    }, "strip", z.ZodTypeAny, {
        storage?: Record<string, any> | undefined;
        aliases?: Record<string, any> | undefined;
        networks: string[];
        sandboxes: string[];
    }, {
        storage?: Record<string, any> | undefined;
        aliases?: Record<string, any> | undefined;
        networks: string[];
        sandboxes: string[];
    }>, z.ZodString]>>>;
    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber]>>>;
    metadata: z.ZodOptional<z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        projectDescription: z.ZodOptional<z.ZodString>;
        authors: z.ZodOptional<z.ZodDefault<z.ZodArray<z.ZodString, "many">>>;
        license: z.ZodOptional<z.ZodString>;
        homepage: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        projectDescription?: string | undefined;
        authors?: string[] | undefined;
        license?: string | undefined;
        homepage?: string | undefined;
    }, {
        name?: string | undefined;
        projectDescription?: string | undefined;
        authors?: string[] | undefined;
        license?: string | undefined;
        homepage?: string | undefined;
    }>>;
}>, "strip", z.ZodTypeAny, {
    accounts?: Record<string, string | number> | undefined;
    language?: "en" | "fr" | undefined;
    plugins?: {
        type: "npm" | "binary" | "deno";
        name: string;
    }[] | undefined;
    contracts?: Record<string, {
        sourceFile: string;
        hash: string;
    }> | undefined;
    network?: Record<string, {
        accounts?: Record<string, any> | undefined;
        faucet?: {
            email?: string | undefined;
            password?: string | undefined;
            amount?: string | undefined;
            activation_code?: string | undefined;
            mnemonic: string[];
            pkh: string;
        } | undefined;
        label: string;
        rpcUrl: string;
        protocol: string;
    }> | undefined;
    sandbox?: Record<string, {
        accounts?: {
            default: string;
        } | Record<string, {
            encryptedKey: string;
            publicKeyHash: string;
            secretKey: string;
        }> | undefined;
        attributes?: Record<string, string | number | boolean> | undefined;
        plugin?: string | undefined;
        tzkt?: {
            disableAutostartWithSandbox: boolean;
            postgresqlPort: number;
            apiPort: number;
        } | undefined;
        label: string;
        rpcUrl: string;
        protocol: string;
    }> | undefined;
    environment?: Record<string, string | {
        storage?: Record<string, any> | undefined;
        aliases?: Record<string, any> | undefined;
        networks: string[];
        sandboxes: string[];
    }> | undefined;
    metadata?: {
        name?: string | undefined;
        projectDescription?: string | undefined;
        authors?: string[] | undefined;
        license?: string | undefined;
        homepage?: string | undefined;
    } | undefined;
    contractsDir: string;
    artifactsDir: string;
}, {
    accounts?: Record<string, string | number> | undefined;
    language?: unknown;
    plugins?: unknown;
    contractsDir?: unknown;
    contracts?: Record<string, {
        sourceFile: string;
        hash: string;
    }> | undefined;
    artifactsDir?: unknown;
    network?: Record<string, {
        accounts?: Record<string, any> | undefined;
        faucet?: {
            mnemonic?: unknown;
            email?: string | undefined;
            password?: string | undefined;
            amount?: string | undefined;
            activation_code?: string | undefined;
            pkh: string;
        } | undefined;
        label: string;
        rpcUrl: string;
        protocol: string;
    }> | undefined;
    sandbox?: Record<string, {
        accounts?: {
            default: string;
        } | Record<string, {
            encryptedKey: string;
            publicKeyHash: string;
            secretKey: string;
        }> | undefined;
        attributes?: Record<string, string | number | boolean> | undefined;
        plugin?: string | undefined;
        tzkt?: {
            disableAutostartWithSandbox?: boolean | undefined;
            postgresqlPort?: number | undefined;
            apiPort?: number | undefined;
        } | undefined;
        label: string;
        rpcUrl: string;
        protocol: string;
    }> | undefined;
    environment?: Record<string, string | {
        storage?: Record<string, any> | undefined;
        aliases?: Record<string, any> | undefined;
        networks: string[];
        sandboxes: string[];
    }> | undefined;
    metadata?: {
        name?: string | undefined;
        projectDescription?: string | undefined;
        authors?: string[] | undefined;
        license?: string | undefined;
        homepage?: string | undefined;
    } | undefined;
}>;
export declare const generatedSchemas: {
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
    schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        language?: "en" | "fr" | undefined;
        plugins?: ({
            type: "npm" | "binary" | "deno";
            name: string;
        } & {
            readonly __kind: any;
        })[] | undefined;
        contracts?: Record<string, {
            sourceFile: string;
            hash: string & {
                readonly __kind: any;
            };
        }> | undefined;
        network?: Record<string, Flatten<{
            accounts?: Record<string, any> | undefined;
            faucet?: Flatten<{
                email?: string | undefined;
                password?: string | undefined;
                amount?: string | undefined;
                activation_code?: string | undefined;
                mnemonic: string[];
                pkh: string & {
                    readonly __kind: any;
                };
            } & {
                readonly __kind: any;
            }> | undefined;
            label: string & {
                readonly __kind: any;
            };
            rpcUrl: string & {
                readonly __kind: any;
            };
            protocol: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>> | undefined;
        sandbox?: Record<string, {
            accounts?: Record<string, string | ({
                encryptedKey: string;
                publicKeyHash: string & {
                    readonly __kind: any;
                };
                secretKey: string;
            } & {
                readonly __kind: any;
            })> | undefined;
            attributes?: Record<string, string | number | boolean> | undefined;
            plugin?: (string & {
                readonly __kind: any;
            }) | undefined;
            tzkt?: {
                disableAutostartWithSandbox: boolean;
                postgresqlPort: number;
                apiPort: number;
            } | undefined;
            label: string & {
                readonly __kind: any;
            };
            rpcUrl: string & {
                readonly __kind: any;
            };
            protocol: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        environment?: Record<string, string | Flatten<{
            storage?: Record<string, any> | undefined;
            aliases?: Record<string, any> | undefined;
            networks: string[];
            sandboxes: string[];
        } & {
            readonly __kind: any;
        }>> | undefined;
        metadata?: ({
            name?: string | undefined;
            projectDescription?: string | undefined;
            authors?: string[] | undefined;
            license?: string | undefined;
            homepage?: string | undefined;
        } & {
            readonly __kind: any;
        }) | undefined;
        accounts: Record<string, string | number>;
        contractsDir: string;
        artifactsDir: string;
    } & {
        readonly __kind: any;
    }, any>;
}, factory: {
    make: (input: {
        language?: "en" | "fr" | undefined;
        plugins?: ({
            type: "npm" | "binary" | "deno";
            name: string;
        } & {
            readonly __kind: any;
        })[] | undefined;
        contracts?: Record<string, {
            sourceFile: string;
            hash: string & {
                readonly __kind: any;
            };
        }> | undefined;
        network?: Record<string, Flatten<{
            accounts?: Record<string, any> | undefined;
            faucet?: Flatten<{
                email?: string | undefined;
                password?: string | undefined;
                amount?: string | undefined;
                activation_code?: string | undefined;
                mnemonic: string[];
                pkh: string & {
                    readonly __kind: any;
                };
            } & {
                readonly __kind: any;
            }> | undefined;
            label: string & {
                readonly __kind: any;
            };
            rpcUrl: string & {
                readonly __kind: any;
            };
            protocol: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>> | undefined;
        sandbox?: Record<string, {
            accounts?: Record<string, string | ({
                encryptedKey: string;
                publicKeyHash: string & {
                    readonly __kind: any;
                };
                secretKey: string;
            } & {
                readonly __kind: any;
            })> | undefined;
            attributes?: Record<string, string | number | boolean> | undefined;
            plugin?: (string & {
                readonly __kind: any;
            }) | undefined;
            tzkt?: {
                disableAutostartWithSandbox: boolean;
                postgresqlPort: number;
                apiPort: number;
            } | undefined;
            label: string & {
                readonly __kind: any;
            };
            rpcUrl: string & {
                readonly __kind: any;
            };
            protocol: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        environment?: Record<string, string | Flatten<{
            storage?: Record<string, any> | undefined;
            aliases?: Record<string, any> | undefined;
            networks: string[];
            sandboxes: string[];
        } & {
            readonly __kind: any;
        }>> | undefined;
        metadata?: ({
            name?: string | undefined;
            projectDescription?: string | undefined;
            authors?: string[] | undefined;
            license?: string | undefined;
            homepage?: string | undefined;
        } & {
            readonly __kind: any;
        }) | undefined;
        accounts: Record<string, string | number>;
        contractsDir: string;
        artifactsDir: string;
    }) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        language?: "en" | "fr" | undefined;
        plugins?: ({
            type: "npm" | "binary" | "deno";
            name: string;
        } & {
            readonly __kind: any;
        })[] | undefined;
        contracts?: Record<string, {
            sourceFile: string;
            hash: string & {
                readonly __kind: any;
            };
        }> | undefined;
        network?: Record<string, Flatten<{
            accounts?: Record<string, any> | undefined;
            faucet?: Flatten<{
                email?: string | undefined;
                password?: string | undefined;
                amount?: string | undefined;
                activation_code?: string | undefined;
                mnemonic: string[];
                pkh: string & {
                    readonly __kind: any;
                };
            } & {
                readonly __kind: any;
            }> | undefined;
            label: string & {
                readonly __kind: any;
            };
            rpcUrl: string & {
                readonly __kind: any;
            };
            protocol: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>> | undefined;
        sandbox?: Record<string, {
            accounts?: Record<string, string | ({
                encryptedKey: string;
                publicKeyHash: string & {
                    readonly __kind: any;
                };
                secretKey: string;
            } & {
                readonly __kind: any;
            })> | undefined;
            attributes?: Record<string, string | number | boolean> | undefined;
            plugin?: (string & {
                readonly __kind: any;
            }) | undefined;
            tzkt?: {
                disableAutostartWithSandbox: boolean;
                postgresqlPort: number;
                apiPort: number;
            } | undefined;
            label: string & {
                readonly __kind: any;
            };
            rpcUrl: string & {
                readonly __kind: any;
            };
            protocol: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        environment?: Record<string, string | Flatten<{
            storage?: Record<string, any> | undefined;
            aliases?: Record<string, any> | undefined;
            networks: string[];
            sandboxes: string[];
        } & {
            readonly __kind: any;
        }>> | undefined;
        metadata?: ({
            name?: string | undefined;
            projectDescription?: string | undefined;
            authors?: string[] | undefined;
            license?: string | undefined;
            homepage?: string | undefined;
        } & {
            readonly __kind: any;
        }) | undefined;
        accounts: Record<string, string | number>;
        contractsDir: string;
        artifactsDir: string;
    } & {
        readonly __kind: any;
    }>;
    of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        language?: "en" | "fr" | undefined;
        plugins?: ({
            type: "npm" | "binary" | "deno";
            name: string;
        } & {
            readonly __kind: any;
        })[] | undefined;
        contracts?: Record<string, {
            sourceFile: string;
            hash: string & {
                readonly __kind: any;
            };
        }> | undefined;
        network?: Record<string, Flatten<{
            accounts?: Record<string, any> | undefined;
            faucet?: Flatten<{
                email?: string | undefined;
                password?: string | undefined;
                amount?: string | undefined;
                activation_code?: string | undefined;
                mnemonic: string[];
                pkh: string & {
                    readonly __kind: any;
                };
            } & {
                readonly __kind: any;
            }> | undefined;
            label: string & {
                readonly __kind: any;
            };
            rpcUrl: string & {
                readonly __kind: any;
            };
            protocol: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>> | undefined;
        sandbox?: Record<string, {
            accounts?: Record<string, string | ({
                encryptedKey: string;
                publicKeyHash: string & {
                    readonly __kind: any;
                };
                secretKey: string;
            } & {
                readonly __kind: any;
            })> | undefined;
            attributes?: Record<string, string | number | boolean> | undefined;
            plugin?: (string & {
                readonly __kind: any;
            }) | undefined;
            tzkt?: {
                disableAutostartWithSandbox: boolean;
                postgresqlPort: number;
                apiPort: number;
            } | undefined;
            label: string & {
                readonly __kind: any;
            };
            rpcUrl: string & {
                readonly __kind: any;
            };
            protocol: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        environment?: Record<string, string | Flatten<{
            storage?: Record<string, any> | undefined;
            aliases?: Record<string, any> | undefined;
            networks: string[];
            sandboxes: string[];
        } & {
            readonly __kind: any;
        }>> | undefined;
        metadata?: ({
            name?: string | undefined;
            projectDescription?: string | undefined;
            authors?: string[] | undefined;
            license?: string | undefined;
            homepage?: string | undefined;
        } & {
            readonly __kind: any;
        }) | undefined;
        accounts: Record<string, string | number>;
        contractsDir: string;
        artifactsDir: string;
    } & {
        readonly __kind: any;
    }>;
    create: (input: {
        language?: "en" | "fr" | undefined;
        plugins?: ({
            type: "npm" | "binary" | "deno";
            name: string;
        } & {
            readonly __kind: any;
        })[] | undefined;
        contracts?: Record<string, {
            sourceFile: string;
            hash: string & {
                readonly __kind: any;
            };
        }> | undefined;
        network?: Record<string, Flatten<{
            accounts?: Record<string, any> | undefined;
            faucet?: Flatten<{
                email?: string | undefined;
                password?: string | undefined;
                amount?: string | undefined;
                activation_code?: string | undefined;
                mnemonic: string[];
                pkh: string & {
                    readonly __kind: any;
                };
            } & {
                readonly __kind: any;
            }> | undefined;
            label: string & {
                readonly __kind: any;
            };
            rpcUrl: string & {
                readonly __kind: any;
            };
            protocol: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>> | undefined;
        sandbox?: Record<string, {
            accounts?: Record<string, string | ({
                encryptedKey: string;
                publicKeyHash: string & {
                    readonly __kind: any;
                };
                secretKey: string;
            } & {
                readonly __kind: any;
            })> | undefined;
            attributes?: Record<string, string | number | boolean> | undefined;
            plugin?: (string & {
                readonly __kind: any;
            }) | undefined;
            tzkt?: {
                disableAutostartWithSandbox: boolean;
                postgresqlPort: number;
                apiPort: number;
            } | undefined;
            label: string & {
                readonly __kind: any;
            };
            rpcUrl: string & {
                readonly __kind: any;
            };
            protocol: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        environment?: Record<string, string | Flatten<{
            storage?: Record<string, any> | undefined;
            aliases?: Record<string, any> | undefined;
            networks: string[];
            sandboxes: string[];
        } & {
            readonly __kind: any;
        }>> | undefined;
        metadata?: ({
            name?: string | undefined;
            projectDescription?: string | undefined;
            authors?: string[] | undefined;
            license?: string | undefined;
            homepage?: string | undefined;
        } & {
            readonly __kind: any;
        }) | undefined;
        accounts: Record<string, string | number>;
        contractsDir: string;
        artifactsDir: string;
    } | {
        accounts?: Record<string, string | number> | undefined;
        language?: "en" | "fr" | undefined;
        plugins?: {
            type: "npm" | "binary" | "deno";
            name: string;
        }[] | undefined;
        contracts?: Record<string, {
            sourceFile: string;
            hash: string;
        }> | undefined;
        network?: Record<string, {
            accounts?: Record<string, any> | undefined;
            faucet?: {
                email?: string | undefined;
                password?: string | undefined;
                amount?: string | undefined;
                activation_code?: string | undefined;
                mnemonic: string[];
                pkh: string;
            } | undefined;
            label: string;
            rpcUrl: string;
            protocol: string;
        }> | undefined;
        sandbox?: Record<string, {
            accounts?: {
                default: string;
            } | Record<string, {
                encryptedKey: string;
                publicKeyHash: string;
                secretKey: string;
            }> | undefined;
            attributes?: Record<string, string | number | boolean> | undefined;
            plugin?: string | undefined;
            tzkt?: {
                disableAutostartWithSandbox: boolean;
                postgresqlPort: number;
                apiPort: number;
            } | undefined;
            label: string;
            rpcUrl: string;
            protocol: string;
        }> | undefined;
        environment?: Record<string, string | {
            storage?: Record<string, any> | undefined;
            aliases?: Record<string, any> | undefined;
            networks: string[];
            sandboxes: string[];
        }> | undefined;
        metadata?: {
            name?: string | undefined;
            projectDescription?: string | undefined;
            authors?: string[] | undefined;
            license?: string | undefined;
            homepage?: string | undefined;
        } | undefined;
        contractsDir: string;
        artifactsDir: string;
    }) => {
        language?: "en" | "fr" | undefined;
        plugins?: ({
            type: "npm" | "binary" | "deno";
            name: string;
        } & {
            readonly __kind: any;
        })[] | undefined;
        contracts?: Record<string, {
            sourceFile: string;
            hash: string & {
                readonly __kind: any;
            };
        }> | undefined;
        network?: Record<string, Flatten<{
            accounts?: Record<string, any> | undefined;
            faucet?: Flatten<{
                email?: string | undefined;
                password?: string | undefined;
                amount?: string | undefined;
                activation_code?: string | undefined;
                mnemonic: string[];
                pkh: string & {
                    readonly __kind: any;
                };
            } & {
                readonly __kind: any;
            }> | undefined;
            label: string & {
                readonly __kind: any;
            };
            rpcUrl: string & {
                readonly __kind: any;
            };
            protocol: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>> | undefined;
        sandbox?: Record<string, {
            accounts?: Record<string, string | ({
                encryptedKey: string;
                publicKeyHash: string & {
                    readonly __kind: any;
                };
                secretKey: string;
            } & {
                readonly __kind: any;
            })> | undefined;
            attributes?: Record<string, string | number | boolean> | undefined;
            plugin?: (string & {
                readonly __kind: any;
            }) | undefined;
            tzkt?: {
                disableAutostartWithSandbox: boolean;
                postgresqlPort: number;
                apiPort: number;
            } | undefined;
            label: string & {
                readonly __kind: any;
            };
            rpcUrl: string & {
                readonly __kind: any;
            };
            protocol: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        environment?: Record<string, string | Flatten<{
            storage?: Record<string, any> | undefined;
            aliases?: Record<string, any> | undefined;
            networks: string[];
            sandboxes: string[];
        } & {
            readonly __kind: any;
        }>> | undefined;
        metadata?: ({
            name?: string | undefined;
            projectDescription?: string | undefined;
            authors?: string[] | undefined;
            license?: string | undefined;
            homepage?: string | undefined;
        } & {
            readonly __kind: any;
        }) | undefined;
        accounts: Record<string, string | number>;
        contractsDir: string;
        artifactsDir: string;
    } & {
        readonly __kind: any;
    };
    from: (input: unknown) => {
        language?: "en" | "fr" | undefined;
        plugins?: ({
            type: "npm" | "binary" | "deno";
            name: string;
        } & {
            readonly __kind: any;
        })[] | undefined;
        contracts?: Record<string, {
            sourceFile: string;
            hash: string & {
                readonly __kind: any;
            };
        }> | undefined;
        network?: Record<string, Flatten<{
            accounts?: Record<string, any> | undefined;
            faucet?: Flatten<{
                email?: string | undefined;
                password?: string | undefined;
                amount?: string | undefined;
                activation_code?: string | undefined;
                mnemonic: string[];
                pkh: string & {
                    readonly __kind: any;
                };
            } & {
                readonly __kind: any;
            }> | undefined;
            label: string & {
                readonly __kind: any;
            };
            rpcUrl: string & {
                readonly __kind: any;
            };
            protocol: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>> | undefined;
        sandbox?: Record<string, {
            accounts?: Record<string, string | ({
                encryptedKey: string;
                publicKeyHash: string & {
                    readonly __kind: any;
                };
                secretKey: string;
            } & {
                readonly __kind: any;
            })> | undefined;
            attributes?: Record<string, string | number | boolean> | undefined;
            plugin?: (string & {
                readonly __kind: any;
            }) | undefined;
            tzkt?: {
                disableAutostartWithSandbox: boolean;
                postgresqlPort: number;
                apiPort: number;
            } | undefined;
            label: string & {
                readonly __kind: any;
            };
            rpcUrl: string & {
                readonly __kind: any;
            };
            protocol: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        environment?: Record<string, string | Flatten<{
            storage?: Record<string, any> | undefined;
            aliases?: Record<string, any> | undefined;
            networks: string[];
            sandboxes: string[];
        } & {
            readonly __kind: any;
        }>> | undefined;
        metadata?: ({
            name?: string | undefined;
            projectDescription?: string | undefined;
            authors?: string[] | undefined;
            license?: string | undefined;
            homepage?: string | undefined;
        } & {
            readonly __kind: any;
        }) | undefined;
        accounts: Record<string, string | number>;
        contractsDir: string;
        artifactsDir: string;
    } & {
        readonly __kind: any;
    };
};
export declare const create: (input: {
    language?: "en" | "fr" | undefined;
    plugins?: ({
        type: "npm" | "binary" | "deno";
        name: string;
    } & {
        readonly __kind: any;
    })[] | undefined;
    contracts?: Record<string, {
        sourceFile: string;
        hash: string & {
            readonly __kind: any;
        };
    }> | undefined;
    network?: Record<string, Flatten<{
        accounts?: Record<string, any> | undefined;
        faucet?: Flatten<{
            email?: string | undefined;
            password?: string | undefined;
            amount?: string | undefined;
            activation_code?: string | undefined;
            mnemonic: string[];
            pkh: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        label: string & {
            readonly __kind: any;
        };
        rpcUrl: string & {
            readonly __kind: any;
        };
        protocol: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>> | undefined;
    sandbox?: Record<string, {
        accounts?: Record<string, string | ({
            encryptedKey: string;
            publicKeyHash: string & {
                readonly __kind: any;
            };
            secretKey: string;
        } & {
            readonly __kind: any;
        })> | undefined;
        attributes?: Record<string, string | number | boolean> | undefined;
        plugin?: (string & {
            readonly __kind: any;
        }) | undefined;
        tzkt?: {
            disableAutostartWithSandbox: boolean;
            postgresqlPort: number;
            apiPort: number;
        } | undefined;
        label: string & {
            readonly __kind: any;
        };
        rpcUrl: string & {
            readonly __kind: any;
        };
        protocol: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }> | undefined;
    environment?: Record<string, string | Flatten<{
        storage?: Record<string, any> | undefined;
        aliases?: Record<string, any> | undefined;
        networks: string[];
        sandboxes: string[];
    } & {
        readonly __kind: any;
    }>> | undefined;
    metadata?: ({
        name?: string | undefined;
        projectDescription?: string | undefined;
        authors?: string[] | undefined;
        license?: string | undefined;
        homepage?: string | undefined;
    } & {
        readonly __kind: any;
    }) | undefined;
    accounts: Record<string, string | number>;
    contractsDir: string;
    artifactsDir: string;
} | {
    accounts?: Record<string, string | number> | undefined;
    language?: "en" | "fr" | undefined;
    plugins?: {
        type: "npm" | "binary" | "deno";
        name: string;
    }[] | undefined;
    contracts?: Record<string, {
        sourceFile: string;
        hash: string;
    }> | undefined;
    network?: Record<string, {
        accounts?: Record<string, any> | undefined;
        faucet?: {
            email?: string | undefined;
            password?: string | undefined;
            amount?: string | undefined;
            activation_code?: string | undefined;
            mnemonic: string[];
            pkh: string;
        } | undefined;
        label: string;
        rpcUrl: string;
        protocol: string;
    }> | undefined;
    sandbox?: Record<string, {
        accounts?: {
            default: string;
        } | Record<string, {
            encryptedKey: string;
            publicKeyHash: string;
            secretKey: string;
        }> | undefined;
        attributes?: Record<string, string | number | boolean> | undefined;
        plugin?: string | undefined;
        tzkt?: {
            disableAutostartWithSandbox: boolean;
            postgresqlPort: number;
            apiPort: number;
        } | undefined;
        label: string;
        rpcUrl: string;
        protocol: string;
    }> | undefined;
    environment?: Record<string, string | {
        storage?: Record<string, any> | undefined;
        aliases?: Record<string, any> | undefined;
        networks: string[];
        sandboxes: string[];
    }> | undefined;
    metadata?: {
        name?: string | undefined;
        projectDescription?: string | undefined;
        authors?: string[] | undefined;
        license?: string | undefined;
        homepage?: string | undefined;
    } | undefined;
    contractsDir: string;
    artifactsDir: string;
}) => {
    language?: "en" | "fr" | undefined;
    plugins?: ({
        type: "npm" | "binary" | "deno";
        name: string;
    } & {
        readonly __kind: any;
    })[] | undefined;
    contracts?: Record<string, {
        sourceFile: string;
        hash: string & {
            readonly __kind: any;
        };
    }> | undefined;
    network?: Record<string, Flatten<{
        accounts?: Record<string, any> | undefined;
        faucet?: Flatten<{
            email?: string | undefined;
            password?: string | undefined;
            amount?: string | undefined;
            activation_code?: string | undefined;
            mnemonic: string[];
            pkh: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        label: string & {
            readonly __kind: any;
        };
        rpcUrl: string & {
            readonly __kind: any;
        };
        protocol: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>> | undefined;
    sandbox?: Record<string, {
        accounts?: Record<string, string | ({
            encryptedKey: string;
            publicKeyHash: string & {
                readonly __kind: any;
            };
            secretKey: string;
        } & {
            readonly __kind: any;
        })> | undefined;
        attributes?: Record<string, string | number | boolean> | undefined;
        plugin?: (string & {
            readonly __kind: any;
        }) | undefined;
        tzkt?: {
            disableAutostartWithSandbox: boolean;
            postgresqlPort: number;
            apiPort: number;
        } | undefined;
        label: string & {
            readonly __kind: any;
        };
        rpcUrl: string & {
            readonly __kind: any;
        };
        protocol: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }> | undefined;
    environment?: Record<string, string | Flatten<{
        storage?: Record<string, any> | undefined;
        aliases?: Record<string, any> | undefined;
        networks: string[];
        sandboxes: string[];
    } & {
        readonly __kind: any;
    }>> | undefined;
    metadata?: ({
        name?: string | undefined;
        projectDescription?: string | undefined;
        authors?: string[] | undefined;
        license?: string | undefined;
        homepage?: string | undefined;
    } & {
        readonly __kind: any;
    }) | undefined;
    accounts: Record<string, string | number>;
    contractsDir: string;
    artifactsDir: string;
} & {
    readonly __kind: any;
}, of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    language?: "en" | "fr" | undefined;
    plugins?: ({
        type: "npm" | "binary" | "deno";
        name: string;
    } & {
        readonly __kind: any;
    })[] | undefined;
    contracts?: Record<string, {
        sourceFile: string;
        hash: string & {
            readonly __kind: any;
        };
    }> | undefined;
    network?: Record<string, Flatten<{
        accounts?: Record<string, any> | undefined;
        faucet?: Flatten<{
            email?: string | undefined;
            password?: string | undefined;
            amount?: string | undefined;
            activation_code?: string | undefined;
            mnemonic: string[];
            pkh: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        label: string & {
            readonly __kind: any;
        };
        rpcUrl: string & {
            readonly __kind: any;
        };
        protocol: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>> | undefined;
    sandbox?: Record<string, {
        accounts?: Record<string, string | ({
            encryptedKey: string;
            publicKeyHash: string & {
                readonly __kind: any;
            };
            secretKey: string;
        } & {
            readonly __kind: any;
        })> | undefined;
        attributes?: Record<string, string | number | boolean> | undefined;
        plugin?: (string & {
            readonly __kind: any;
        }) | undefined;
        tzkt?: {
            disableAutostartWithSandbox: boolean;
            postgresqlPort: number;
            apiPort: number;
        } | undefined;
        label: string & {
            readonly __kind: any;
        };
        rpcUrl: string & {
            readonly __kind: any;
        };
        protocol: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }> | undefined;
    environment?: Record<string, string | Flatten<{
        storage?: Record<string, any> | undefined;
        aliases?: Record<string, any> | undefined;
        networks: string[];
        sandboxes: string[];
    } & {
        readonly __kind: any;
    }>> | undefined;
    metadata?: ({
        name?: string | undefined;
        projectDescription?: string | undefined;
        authors?: string[] | undefined;
        license?: string | undefined;
        homepage?: string | undefined;
    } & {
        readonly __kind: any;
    }) | undefined;
    accounts: Record<string, string | number>;
    contractsDir: string;
    artifactsDir: string;
} & {
    readonly __kind: any;
}>, make: (input: {
    language?: "en" | "fr" | undefined;
    plugins?: ({
        type: "npm" | "binary" | "deno";
        name: string;
    } & {
        readonly __kind: any;
    })[] | undefined;
    contracts?: Record<string, {
        sourceFile: string;
        hash: string & {
            readonly __kind: any;
        };
    }> | undefined;
    network?: Record<string, Flatten<{
        accounts?: Record<string, any> | undefined;
        faucet?: Flatten<{
            email?: string | undefined;
            password?: string | undefined;
            amount?: string | undefined;
            activation_code?: string | undefined;
            mnemonic: string[];
            pkh: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        label: string & {
            readonly __kind: any;
        };
        rpcUrl: string & {
            readonly __kind: any;
        };
        protocol: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>> | undefined;
    sandbox?: Record<string, {
        accounts?: Record<string, string | ({
            encryptedKey: string;
            publicKeyHash: string & {
                readonly __kind: any;
            };
            secretKey: string;
        } & {
            readonly __kind: any;
        })> | undefined;
        attributes?: Record<string, string | number | boolean> | undefined;
        plugin?: (string & {
            readonly __kind: any;
        }) | undefined;
        tzkt?: {
            disableAutostartWithSandbox: boolean;
            postgresqlPort: number;
            apiPort: number;
        } | undefined;
        label: string & {
            readonly __kind: any;
        };
        rpcUrl: string & {
            readonly __kind: any;
        };
        protocol: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }> | undefined;
    environment?: Record<string, string | Flatten<{
        storage?: Record<string, any> | undefined;
        aliases?: Record<string, any> | undefined;
        networks: string[];
        sandboxes: string[];
    } & {
        readonly __kind: any;
    }>> | undefined;
    metadata?: ({
        name?: string | undefined;
        projectDescription?: string | undefined;
        authors?: string[] | undefined;
        license?: string | undefined;
        homepage?: string | undefined;
    } & {
        readonly __kind: any;
    }) | undefined;
    accounts: Record<string, string | number>;
    contractsDir: string;
    artifactsDir: string;
}) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    language?: "en" | "fr" | undefined;
    plugins?: ({
        type: "npm" | "binary" | "deno";
        name: string;
    } & {
        readonly __kind: any;
    })[] | undefined;
    contracts?: Record<string, {
        sourceFile: string;
        hash: string & {
            readonly __kind: any;
        };
    }> | undefined;
    network?: Record<string, Flatten<{
        accounts?: Record<string, any> | undefined;
        faucet?: Flatten<{
            email?: string | undefined;
            password?: string | undefined;
            amount?: string | undefined;
            activation_code?: string | undefined;
            mnemonic: string[];
            pkh: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        label: string & {
            readonly __kind: any;
        };
        rpcUrl: string & {
            readonly __kind: any;
        };
        protocol: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>> | undefined;
    sandbox?: Record<string, {
        accounts?: Record<string, string | ({
            encryptedKey: string;
            publicKeyHash: string & {
                readonly __kind: any;
            };
            secretKey: string;
        } & {
            readonly __kind: any;
        })> | undefined;
        attributes?: Record<string, string | number | boolean> | undefined;
        plugin?: (string & {
            readonly __kind: any;
        }) | undefined;
        tzkt?: {
            disableAutostartWithSandbox: boolean;
            postgresqlPort: number;
            apiPort: number;
        } | undefined;
        label: string & {
            readonly __kind: any;
        };
        rpcUrl: string & {
            readonly __kind: any;
        };
        protocol: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }> | undefined;
    environment?: Record<string, string | Flatten<{
        storage?: Record<string, any> | undefined;
        aliases?: Record<string, any> | undefined;
        networks: string[];
        sandboxes: string[];
    } & {
        readonly __kind: any;
    }>> | undefined;
    metadata?: ({
        name?: string | undefined;
        projectDescription?: string | undefined;
        authors?: string[] | undefined;
        license?: string | undefined;
        homepage?: string | undefined;
    } & {
        readonly __kind: any;
    }) | undefined;
    accounts: Record<string, string | number>;
    contractsDir: string;
    artifactsDir: string;
} & {
    readonly __kind: any;
}>;
export declare type Config = z.infer<typeof generatedSchemas.schema>;
export declare type t = Config;
export declare const schemas: {
    schema: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        language?: "en" | "fr" | undefined;
        plugins?: ({
            type: "npm" | "binary" | "deno";
            name: string;
        } & {
            readonly __kind: any;
        })[] | undefined;
        contracts?: Record<string, {
            sourceFile: string;
            hash: string & {
                readonly __kind: any;
            };
        }> | undefined;
        network?: Record<string, Flatten<{
            accounts?: Record<string, any> | undefined;
            faucet?: Flatten<{
                email?: string | undefined;
                password?: string | undefined;
                amount?: string | undefined;
                activation_code?: string | undefined;
                mnemonic: string[];
                pkh: string & {
                    readonly __kind: any;
                };
            } & {
                readonly __kind: any;
            }> | undefined;
            label: string & {
                readonly __kind: any;
            };
            rpcUrl: string & {
                readonly __kind: any;
            };
            protocol: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>> | undefined;
        sandbox?: Record<string, {
            accounts?: Record<string, string | ({
                encryptedKey: string;
                publicKeyHash: string & {
                    readonly __kind: any;
                };
                secretKey: string;
            } & {
                readonly __kind: any;
            })> | undefined;
            attributes?: Record<string, string | number | boolean> | undefined;
            plugin?: (string & {
                readonly __kind: any;
            }) | undefined;
            tzkt?: {
                disableAutostartWithSandbox: boolean;
                postgresqlPort: number;
                apiPort: number;
            } | undefined;
            label: string & {
                readonly __kind: any;
            };
            rpcUrl: string & {
                readonly __kind: any;
            };
            protocol: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        environment?: Record<string, string | Flatten<{
            storage?: Record<string, any> | undefined;
            aliases?: Record<string, any> | undefined;
            networks: string[];
            sandboxes: string[];
        } & {
            readonly __kind: any;
        }>> | undefined;
        metadata?: ({
            name?: string | undefined;
            projectDescription?: string | undefined;
            authors?: string[] | undefined;
            license?: string | undefined;
            homepage?: string | undefined;
        } & {
            readonly __kind: any;
        }) | undefined;
        accounts: Record<string, string | number>;
        contractsDir: string;
        artifactsDir: string;
    } & {
        readonly __kind: any;
    }, any>, {
        language?: "en" | "fr" | undefined;
        plugins?: ({
            type: "npm" | "binary" | "deno";
            name: string;
        } & {
            readonly __kind: any;
        })[] | undefined;
        contracts?: Record<string, {
            sourceFile: string;
            hash: string & {
                readonly __kind: any;
            };
        }> | undefined;
        network?: Record<string, Flatten<{
            accounts?: Record<string, any> | undefined;
            faucet?: Flatten<{
                email?: string | undefined;
                password?: string | undefined;
                amount?: string | undefined;
                activation_code?: string | undefined;
                mnemonic: string[];
                pkh: string & {
                    readonly __kind: any;
                };
            } & {
                readonly __kind: any;
            }> | undefined;
            label: string & {
                readonly __kind: any;
            };
            rpcUrl: string & {
                readonly __kind: any;
            };
            protocol: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>> | undefined;
        sandbox?: Record<string, {
            accounts?: Record<string, string | ({
                encryptedKey: string;
                publicKeyHash: string & {
                    readonly __kind: any;
                };
                secretKey: string;
            } & {
                readonly __kind: any;
            })> | undefined;
            attributes?: Record<string, string | number | boolean> | undefined;
            plugin?: (string & {
                readonly __kind: any;
            }) | undefined;
            tzkt?: {
                disableAutostartWithSandbox: boolean;
                postgresqlPort: number;
                apiPort: number;
            } | undefined;
            label: string & {
                readonly __kind: any;
            };
            rpcUrl: string & {
                readonly __kind: any;
            };
            protocol: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        environment?: Record<string, string | Flatten<{
            storage?: Record<string, any> | undefined;
            aliases?: Record<string, any> | undefined;
            networks: string[];
            sandboxes: string[];
        } & {
            readonly __kind: any;
        }>> | undefined;
        metadata?: ({
            name?: string | undefined;
            projectDescription?: string | undefined;
            authors?: string[] | undefined;
            license?: string | undefined;
            homepage?: string | undefined;
        } & {
            readonly __kind: any;
        }) | undefined;
        accounts: Record<string, string | number>;
        contractsDir: string;
        artifactsDir: string;
    } & {
        readonly __kind: any;
    }, any>;
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
};
//# sourceMappingURL=Config.d.ts.map
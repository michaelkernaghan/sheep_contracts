{"version":3,"sources":["Task.ts"],"sourcesContent":["import * as Alias from '@taqueria/protocol/Alias';\nimport createType, { Flatten } from '@taqueria/protocol/Base';\nimport * as Command from '@taqueria/protocol/Command';\nimport * as Option from '@taqueria/protocol/Option';\nimport * as PluginResponseEncoding from '@taqueria/protocol/PluginResponseEncoding';\nimport * as PositionalArg from '@taqueria/protocol/PositionalArg';\nimport * as Verb from '@taqueria/protocol/Verb';\nimport { z } from 'zod';\n\nconst taskHandlerSchema = z.union([\n\tz.literal('proxy'),\n\tz.string().min(1),\n]);\n\nexport const rawSchema = z.object({\n\ttask: Verb.rawSchema.describe('Task Name'),\n\tcommand: Command.rawSchema.describe('Task Command'),\n\taliases: z.array(Alias.rawSchema).default([]).describe('Task Aliases').optional(),\n\tdescription: z.string({ description: 'Task Description' }).min(3),\n\texample: z.string({ description: 'Task Example' }).optional(),\n\thidden: z.boolean({ description: 'Task Is Hidden' }).default(false).optional(),\n\tencoding: PluginResponseEncoding.rawSchema.optional(),\n\thandler: taskHandlerSchema.describe('Task Handler'),\n\toptions: z.array(Option.rawSchema).default([]).describe('Task Options').optional(),\n\tpositionals: z.array(PositionalArg.rawSchema).default([]).describe('Task Positional Args').optional(),\n}).describe('Task');\n\nconst internalSchema = rawSchema.extend({\n\ttask: Verb.schemas.schema.describe('Task Name'),\n\tcommand: Command.schemas.schema.describe('Task Command'),\n\taliases: z.array(Alias.schemas.schema).default([]).describe('Task Aliases').optional(),\n\tencoding: PluginResponseEncoding.schemas.schema.optional(),\n\thandler: taskHandlerSchema.describe('Task Handler'),\n\toptions: z.preprocess(\n\t\tval => val ?? [],\n\t\tz.array(Option.schemas.schema).describe('Task Options').optional(),\n\t),\n\tpositionals: z.array(PositionalArg.schemas.schema).default([]).describe('Task Positional Args').optional(),\n}).describe('Task');\n\ntype RawInput = z.infer<typeof rawSchema>;\ntype Input = z.infer<typeof internalSchema>;\n\nexport const { schemas: generatedSchemas, factory } = createType<RawInput, Input>({\n\trawSchema,\n\tinternalSchema,\n\tparseErrMsg: (value: unknown) => `The following task is invalid: ${value}`,\n\tunknownErrMsg: 'Something went wrong trying to parse the task',\n});\n\nexport type Task = z.infer<typeof generatedSchemas.schema>;\nexport type t = Task;\nexport const { create, make, of } = factory;\nexport const schemas = {\n\t...generatedSchemas,\n\tschema: generatedSchemas.schema.transform(val => val as unknown as Task),\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAAA;AAAA,EAAA,eAAAC;AAAA;AAAA;AAAA,YAAuB;AACvB,kBAAoC;AACpC,cAAyB;AACzB,aAAwB;AACxB,6BAAwC;AACxC,oBAA+B;AAC/B,WAAsB;AACtB,iBAAkB;AAElB,IAAM,oBAAoB,aAAE,MAAM;AAAA,EACjC,aAAE,QAAQ,OAAO;AAAA,EACjB,aAAE,OAAO,EAAE,IAAI,CAAC;AACjB,CAAC;AAEM,IAAMD,aAAY,aAAE,OAAO;AAAA,EACjC,MAAW,eAAU,SAAS,WAAW;AAAA,EACzC,SAAiB,kBAAU,SAAS,cAAc;AAAA,EAClD,SAAS,aAAE,MAAY,eAAS,EAAE,QAAQ,CAAC,CAAC,EAAE,SAAS,cAAc,EAAE,SAAS;AAAA,EAChF,aAAa,aAAE,OAAO,EAAE,aAAa,mBAAmB,CAAC,EAAE,IAAI,CAAC;AAAA,EAChE,SAAS,aAAE,OAAO,EAAE,aAAa,eAAe,CAAC,EAAE,SAAS;AAAA,EAC5D,QAAQ,aAAE,QAAQ,EAAE,aAAa,iBAAiB,CAAC,EAAE,QAAQ,KAAK,EAAE,SAAS;AAAA,EAC7E,UAAiC,iCAAU,SAAS;AAAA,EACpD,SAAS,kBAAkB,SAAS,cAAc;AAAA,EAClD,SAAS,aAAE,MAAa,gBAAS,EAAE,QAAQ,CAAC,CAAC,EAAE,SAAS,cAAc,EAAE,SAAS;AAAA,EACjF,aAAa,aAAE,MAAoB,uBAAS,EAAE,QAAQ,CAAC,CAAC,EAAE,SAAS,sBAAsB,EAAE,SAAS;AACrG,CAAC,EAAE,SAAS,MAAM;AAElB,IAAM,iBAAiBA,WAAU,OAAO;AAAA,EACvC,MAAW,aAAQ,OAAO,SAAS,WAAW;AAAA,EAC9C,SAAiB,gBAAQ,OAAO,SAAS,cAAc;AAAA,EACvD,SAAS,aAAE,MAAY,cAAQ,MAAM,EAAE,QAAQ,CAAC,CAAC,EAAE,SAAS,cAAc,EAAE,SAAS;AAAA,EACrF,UAAiC,+BAAQ,OAAO,SAAS;AAAA,EACzD,SAAS,kBAAkB,SAAS,cAAc;AAAA,EAClD,SAAS,aAAE;AAAA,IACV,SAAO,OAAO,CAAC;AAAA,IACf,aAAE,MAAa,eAAQ,MAAM,EAAE,SAAS,cAAc,EAAE,SAAS;AAAA,EAClE;AAAA,EACA,aAAa,aAAE,MAAoB,sBAAQ,MAAM,EAAE,QAAQ,CAAC,CAAC,EAAE,SAAS,sBAAsB,EAAE,SAAS;AAC1G,CAAC,EAAE,SAAS,MAAM;AAKX,IAAM,EAAE,SAAS,kBAAkB,QAAQ,QAAI,YAAAE,SAA4B;AAAA,EACjF,WAAAF;AAAA,EACA;AAAA,EACA,aAAa,CAAC,UAAmB,kCAAkC;AAAA,EACnE,eAAe;AAChB,CAAC;AAIM,IAAM,EAAE,QAAQ,MAAM,GAAG,IAAI;AAC7B,IAAMC,WAAU;AAAA,EACtB,GAAG;AAAA,EACH,QAAQ,iBAAiB,OAAO,UAAU,SAAO,GAAsB;AACxE;","names":["rawSchema","schemas","createType"]}
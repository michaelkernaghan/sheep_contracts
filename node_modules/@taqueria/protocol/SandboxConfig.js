"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// SandboxConfig.ts
var SandboxConfig_exports = {};
__export(SandboxConfig_exports, {
  create: () => create,
  factory: () => factory,
  generatedSchemas: () => generatedSchemas,
  make: () => make,
  of: () => of,
  rawSchema: () => rawSchema4,
  schemas: () => schemas6
});
module.exports = __toCommonJS(SandboxConfig_exports);
var import_Base = __toESM(require("@taqueria/protocol/Base"));
var EconomicalProtocolHash = __toESM(require("@taqueria/protocol/EconomicalProtocolHash"));
var HumanReadableIdentifier = __toESM(require("@taqueria/protocol/HumanReadableIdentifier"));
var SandboxAccountConfig = __toESM(require("@taqueria/protocol/SandboxAccountConfig"));
var TzKt = __toESM(require("@taqueria/protocol/tzkt-config"));
var Url = __toESM(require("@taqueria/protocol/Url"));
var Verb = __toESM(require("@taqueria/protocol/Verb"));
var import_zod = require("zod");
var accountMapSchema = import_zod.z.record(
  import_zod.z.union([
    import_zod.z.string().nonempty(),
    SandboxAccountConfig.schemas.schema
  ])
);
var rawSchema4 = import_zod.z.object({
  label: import_zod.z.string({ description: "Sandbox Label" }).min(1),
  rpcUrl: import_zod.z.string({ description: "Sandbox RPC Url" }).min(5).url(),
  protocol: import_zod.z.string({ description: "Sandbox Protocol Hash" }).min(8),
  attributes: import_zod.z.record(
    import_zod.z.union(
      [import_zod.z.string(), import_zod.z.number(), import_zod.z.boolean()],
      { description: "Sandbox Attribute" }
    ),
    { description: "Sandbox Attributes" }
  ).optional(),
  plugin: Verb.rawSchema.describe("Sandbox Plugin").optional(),
  accounts: import_zod.z.union([
    import_zod.z.object({ default: import_zod.z.string().min(1) }),
    import_zod.z.record(SandboxAccountConfig.rawSchema)
  ], { description: "Sandbox Accounts" }).optional(),
  tzkt: TzKt.rawSchema.describe("TzKt config").optional()
});
var internalSchema = import_zod.z.object({
  label: HumanReadableIdentifier.schemas.schema.describe("Sandbox Label"),
  rpcUrl: Url.schemas.schema.describe("Sandbox RPC Url"),
  protocol: EconomicalProtocolHash.schemas.schema.describe("Sandbox Protocol Hash"),
  attributes: import_zod.z.record(
    import_zod.z.union([import_zod.z.string(), import_zod.z.number(), import_zod.z.boolean()]),
    { description: "Sandbox Attributes" }
  ).optional(),
  plugin: Verb.schemas.schema.describe("Sandbox Plugin").optional(),
  accounts: accountMapSchema.optional(),
  tzkt: TzKt.rawSchema.describe("TzKt config").optional()
}, { description: "Sandbox Configuration" });
var { schemas: generatedSchemas, factory } = (0, import_Base.default)({
  rawSchema: rawSchema4,
  internalSchema,
  parseErrMsg: (value) => `${value} is not a valid sandbox configuration `,
  unknownErrMsg: "Something went wrong trying to parse the sandbox configuration"
});
var { create, of, make } = factory;
var schemas6 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  create,
  factory,
  generatedSchemas,
  make,
  of,
  rawSchema,
  schemas
});
//# sourceMappingURL=SandboxConfig.js.map
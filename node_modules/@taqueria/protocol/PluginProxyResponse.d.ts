import { z } from 'zod';
export declare const rawSchema: z.ZodUnion<[z.ZodType<any, z.ZodTypeDef, any>, z.ZodVoid]>;
export declare const schemas: {
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
    schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, any, any>;
}, factory: {
    make: (input: any) => import("fluture").FutureInstance<import("./TaqError").TaqError, any>;
    of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, any>;
    create: (input: any) => any;
    from: (input: unknown) => any;
};
export declare type PluginProxyResponse = z.infer<typeof schemas.schema>;
export declare type t = PluginProxyResponse;
export declare const of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, any>, make: (input: any) => import("fluture").FutureInstance<import("./TaqError").TaqError, any>, create: (input: any) => any;
//# sourceMappingURL=PluginProxyResponse.d.ts.map
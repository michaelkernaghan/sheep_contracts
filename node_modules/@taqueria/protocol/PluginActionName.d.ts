import { z } from 'zod';
declare const rawSchema: z.ZodUnion<[z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxy">, z.ZodLiteral<"proxyTemplate">, z.ZodLiteral<"pluginInfo">]>;
export declare type PluginActionName = z.infer<typeof rawSchema>;
export declare type t = PluginActionName;
declare const pluginActionNotSupportedSchema: z.ZodObject<{
    status: z.ZodLiteral<"notSupported">;
    msg: z.ZodString;
}, "strip", z.ZodTypeAny, {
    status: "notSupported";
    msg: string;
}, {
    status: "notSupported";
    msg: string;
}>;
export declare type PluginActionNotSupportedResponse = z.infer<typeof pluginActionNotSupportedSchema>;
export declare const schemas: {
    schema: z.ZodUnion<[z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxy">, z.ZodLiteral<"proxyTemplate">, z.ZodLiteral<"pluginInfo">]>;
    internalSchema: z.ZodUnion<[z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxy">, z.ZodLiteral<"proxyTemplate">, z.ZodLiteral<"pluginInfo">]>;
    rawSchema: z.ZodUnion<[z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxy">, z.ZodLiteral<"proxyTemplate">, z.ZodLiteral<"pluginInfo">]>;
};
export {};
//# sourceMappingURL=PluginActionName.d.ts.map
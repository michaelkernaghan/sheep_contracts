import { z } from 'zod';
export declare const rawSchema: z.ZodString;
export declare const generatedSchemas: {
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
    schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __kind: any;
    }, any>;
}, factory: {
    make: (input: string) => import("fluture").FutureInstance<import("./TaqError").TaqError, string & {
        readonly __kind: any;
    }>;
    of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, string & {
        readonly __kind: any;
    }>;
    create: (input: string) => string & {
        readonly __kind: any;
    };
    from: (input: unknown) => string & {
        readonly __kind: any;
    };
};
export declare type SanitizedAbsPath = z.infer<typeof generatedSchemas.schema>;
export declare type t = SanitizedAbsPath;
export declare const create: (input: string) => string & {
    readonly __kind: any;
}, make: (input: string) => import("fluture").FutureInstance<import("./TaqError").TaqError, string & {
    readonly __kind: any;
}>, of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, string & {
    readonly __kind: any;
}>;
export declare const schemas: {
    schema: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, string & {
        readonly __kind: any;
    }, any>, string & {
        readonly __kind: any;
    }, any>;
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
};
//# sourceMappingURL=SanitizedAbsPath.d.ts.map
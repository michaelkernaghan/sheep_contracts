import { Flatten } from '@taqueria/protocol/Base';
import { z } from 'zod';
export declare const rawSchema: z.ZodObject<{
    label: z.ZodString;
    rpcUrl: z.ZodString;
    protocol: z.ZodEffects<z.ZodString, string, string>;
    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    faucet: z.ZodOptional<z.ZodObject<z.extendShape<{
        mnemonic: z.ZodEffects<z.ZodArray<z.ZodString, "many">, string[], unknown>;
        email: z.ZodOptional<z.ZodString>;
        password: z.ZodOptional<z.ZodString>;
        amount: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        activation_code: z.ZodOptional<z.ZodString>;
    }, {
        pkh: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        email?: string | undefined;
        password?: string | undefined;
        amount?: string | undefined;
        activation_code?: string | undefined;
        mnemonic: string[];
        pkh: string;
    }, {
        mnemonic?: unknown;
        email?: string | undefined;
        password?: string | undefined;
        amount?: string | undefined;
        activation_code?: string | undefined;
        pkh: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    accounts?: Record<string, any> | undefined;
    faucet?: {
        email?: string | undefined;
        password?: string | undefined;
        amount?: string | undefined;
        activation_code?: string | undefined;
        mnemonic: string[];
        pkh: string;
    } | undefined;
    label: string;
    rpcUrl: string;
    protocol: string;
}, {
    accounts?: Record<string, any> | undefined;
    faucet?: {
        mnemonic?: unknown;
        email?: string | undefined;
        password?: string | undefined;
        amount?: string | undefined;
        activation_code?: string | undefined;
        pkh: string;
    } | undefined;
    label: string;
    rpcUrl: string;
    protocol: string;
}>;
export declare const generatedSchemas: {
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
    schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        accounts?: Record<string, any> | undefined;
        faucet?: Flatten<{
            email?: string | undefined;
            password?: string | undefined;
            amount?: string | undefined;
            activation_code?: string | undefined;
            mnemonic: string[];
            pkh: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        label: string & {
            readonly __kind: any;
        };
        rpcUrl: string & {
            readonly __kind: any;
        };
        protocol: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }, any>;
}, factory: {
    make: (input: {
        accounts?: Record<string, any> | undefined;
        faucet?: Flatten<{
            email?: string | undefined;
            password?: string | undefined;
            amount?: string | undefined;
            activation_code?: string | undefined;
            mnemonic: string[];
            pkh: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        label: string & {
            readonly __kind: any;
        };
        rpcUrl: string & {
            readonly __kind: any;
        };
        protocol: string & {
            readonly __kind: any;
        };
    }) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        accounts?: Record<string, any> | undefined;
        faucet?: Flatten<{
            email?: string | undefined;
            password?: string | undefined;
            amount?: string | undefined;
            activation_code?: string | undefined;
            mnemonic: string[];
            pkh: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        label: string & {
            readonly __kind: any;
        };
        rpcUrl: string & {
            readonly __kind: any;
        };
        protocol: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>;
    of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        accounts?: Record<string, any> | undefined;
        faucet?: Flatten<{
            email?: string | undefined;
            password?: string | undefined;
            amount?: string | undefined;
            activation_code?: string | undefined;
            mnemonic: string[];
            pkh: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        label: string & {
            readonly __kind: any;
        };
        rpcUrl: string & {
            readonly __kind: any;
        };
        protocol: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>;
    create: (input: {
        accounts?: Record<string, any> | undefined;
        faucet?: {
            email?: string | undefined;
            password?: string | undefined;
            amount?: string | undefined;
            activation_code?: string | undefined;
            mnemonic: string[];
            pkh: string;
        } | undefined;
        label: string;
        rpcUrl: string;
        protocol: string;
    } | {
        accounts?: Record<string, any> | undefined;
        faucet?: Flatten<{
            email?: string | undefined;
            password?: string | undefined;
            amount?: string | undefined;
            activation_code?: string | undefined;
            mnemonic: string[];
            pkh: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        label: string & {
            readonly __kind: any;
        };
        rpcUrl: string & {
            readonly __kind: any;
        };
        protocol: string & {
            readonly __kind: any;
        };
    }) => {
        accounts?: Record<string, any> | undefined;
        faucet?: Flatten<{
            email?: string | undefined;
            password?: string | undefined;
            amount?: string | undefined;
            activation_code?: string | undefined;
            mnemonic: string[];
            pkh: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        label: string & {
            readonly __kind: any;
        };
        rpcUrl: string & {
            readonly __kind: any;
        };
        protocol: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    };
    from: (input: unknown) => {
        accounts?: Record<string, any> | undefined;
        faucet?: Flatten<{
            email?: string | undefined;
            password?: string | undefined;
            amount?: string | undefined;
            activation_code?: string | undefined;
            mnemonic: string[];
            pkh: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        label: string & {
            readonly __kind: any;
        };
        rpcUrl: string & {
            readonly __kind: any;
        };
        protocol: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    };
};
export declare type NetworkConfig = Flatten<z.infer<typeof generatedSchemas.schema>>;
export declare type t = NetworkConfig;
export declare const create: (input: {
    accounts?: Record<string, any> | undefined;
    faucet?: {
        email?: string | undefined;
        password?: string | undefined;
        amount?: string | undefined;
        activation_code?: string | undefined;
        mnemonic: string[];
        pkh: string;
    } | undefined;
    label: string;
    rpcUrl: string;
    protocol: string;
} | {
    accounts?: Record<string, any> | undefined;
    faucet?: Flatten<{
        email?: string | undefined;
        password?: string | undefined;
        amount?: string | undefined;
        activation_code?: string | undefined;
        mnemonic: string[];
        pkh: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }> | undefined;
    label: string & {
        readonly __kind: any;
    };
    rpcUrl: string & {
        readonly __kind: any;
    };
    protocol: string & {
        readonly __kind: any;
    };
}) => {
    accounts?: Record<string, any> | undefined;
    faucet?: Flatten<{
        email?: string | undefined;
        password?: string | undefined;
        amount?: string | undefined;
        activation_code?: string | undefined;
        mnemonic: string[];
        pkh: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }> | undefined;
    label: string & {
        readonly __kind: any;
    };
    rpcUrl: string & {
        readonly __kind: any;
    };
    protocol: string & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
}, of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    accounts?: Record<string, any> | undefined;
    faucet?: Flatten<{
        email?: string | undefined;
        password?: string | undefined;
        amount?: string | undefined;
        activation_code?: string | undefined;
        mnemonic: string[];
        pkh: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }> | undefined;
    label: string & {
        readonly __kind: any;
    };
    rpcUrl: string & {
        readonly __kind: any;
    };
    protocol: string & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
}>, make: (input: {
    accounts?: Record<string, any> | undefined;
    faucet?: Flatten<{
        email?: string | undefined;
        password?: string | undefined;
        amount?: string | undefined;
        activation_code?: string | undefined;
        mnemonic: string[];
        pkh: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }> | undefined;
    label: string & {
        readonly __kind: any;
    };
    rpcUrl: string & {
        readonly __kind: any;
    };
    protocol: string & {
        readonly __kind: any;
    };
}) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    accounts?: Record<string, any> | undefined;
    faucet?: Flatten<{
        email?: string | undefined;
        password?: string | undefined;
        amount?: string | undefined;
        activation_code?: string | undefined;
        mnemonic: string[];
        pkh: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }> | undefined;
    label: string & {
        readonly __kind: any;
    };
    rpcUrl: string & {
        readonly __kind: any;
    };
    protocol: string & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
}>;
export declare const schemas: {
    schema: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        accounts?: Record<string, any> | undefined;
        faucet?: Flatten<{
            email?: string | undefined;
            password?: string | undefined;
            amount?: string | undefined;
            activation_code?: string | undefined;
            mnemonic: string[];
            pkh: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        label: string & {
            readonly __kind: any;
        };
        rpcUrl: string & {
            readonly __kind: any;
        };
        protocol: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }, any>, Flatten<{
        accounts?: Record<string, any> | undefined;
        faucet?: Flatten<{
            email?: string | undefined;
            password?: string | undefined;
            amount?: string | undefined;
            activation_code?: string | undefined;
            mnemonic: string[];
            pkh: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }> | undefined;
        label: string & {
            readonly __kind: any;
        };
        rpcUrl: string & {
            readonly __kind: any;
        };
        protocol: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>, any>;
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
};
//# sourceMappingURL=NetworkConfig.d.ts.map
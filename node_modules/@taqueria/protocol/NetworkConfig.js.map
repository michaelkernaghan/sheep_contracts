{"version":3,"sources":["NetworkConfig.ts"],"sourcesContent":["import createType, { Flatten } from '@taqueria/protocol/Base';\nimport * as EconomicalProtocolHash from '@taqueria/protocol/EconomicalProtocolHash';\nimport * as Faucet from '@taqueria/protocol/Faucet';\nimport * as HumanReadableIdentifier from '@taqueria/protocol/HumanReadableIdentifier';\nimport * as Url from '@taqueria/protocol/Url';\nimport { z } from 'zod';\n\nexport const rawSchema = z.object({\n\tlabel: HumanReadableIdentifier.rawSchema,\n\trpcUrl: Url.rawSchema,\n\tprotocol: EconomicalProtocolHash.rawSchema,\n\taccounts: z.record(\n\t\tz.any({ description: 'Accounts' }),\n\t\t{ description: 'Accounts' },\n\t).optional(),\n\tfaucet: Faucet.rawSchema.describe('Network Faucet').optional(),\n}).describe('Network Config');\n\nconst internalSchema = z.object({\n\tlabel: HumanReadableIdentifier.schemas.schema.describe('Network Label'),\n\trpcUrl: Url.schemas.schema.describe('Network RPC Url'),\n\tprotocol: EconomicalProtocolHash.schemas.schema.describe('Network Protocol Hash'),\n\taccounts: z.record(\n\t\tz.any({ description: 'Accounts' }),\n\t\t{ description: 'Accounts' },\n\t).optional(),\n\tfaucet: Faucet.schemas.schema.describe('Network Faucet').optional(),\n}).describe('Network Config');\n\ntype RawInput = z.infer<typeof rawSchema>;\ntype Input = z.infer<typeof internalSchema>;\n\nexport const { schemas: generatedSchemas, factory } = createType<RawInput, Input>({\n\trawSchema,\n\tinternalSchema,\n\tparseErrMsg: (value: unknown) => `${value} is not a valid network configuration`,\n\tunknownErrMsg: 'Something went wrong trying to parse the network configuration',\n});\n\nexport type NetworkConfig = Flatten<z.infer<typeof generatedSchemas.schema>>;\nexport type t = NetworkConfig;\nexport const { create, of, make } = factory;\n\nexport const schemas = {\n\t...generatedSchemas,\n\tschema: generatedSchemas.schema.transform(val => val as NetworkConfig),\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAAA;AAAA,EAAA,eAAAC;AAAA;AAAA;AAAA,kBAAoC;AACpC,6BAAwC;AACxC,aAAwB;AACxB,8BAAyC;AACzC,UAAqB;AACrB,iBAAkB;AAEX,IAAMD,aAAY,aAAE,OAAO;AAAA,EACjC,OAA+B;AAAA,EAC/B,QAAY;AAAA,EACZ,UAAiC;AAAA,EACjC,UAAU,aAAE;AAAA,IACX,aAAE,IAAI,EAAE,aAAa,WAAW,CAAC;AAAA,IACjC,EAAE,aAAa,WAAW;AAAA,EAC3B,EAAE,SAAS;AAAA,EACX,QAAe,iBAAU,SAAS,gBAAgB,EAAE,SAAS;AAC9D,CAAC,EAAE,SAAS,gBAAgB;AAE5B,IAAM,iBAAiB,aAAE,OAAO;AAAA,EAC/B,OAA+B,gCAAQ,OAAO,SAAS,eAAe;AAAA,EACtE,QAAY,YAAQ,OAAO,SAAS,iBAAiB;AAAA,EACrD,UAAiC,+BAAQ,OAAO,SAAS,uBAAuB;AAAA,EAChF,UAAU,aAAE;AAAA,IACX,aAAE,IAAI,EAAE,aAAa,WAAW,CAAC;AAAA,IACjC,EAAE,aAAa,WAAW;AAAA,EAC3B,EAAE,SAAS;AAAA,EACX,QAAe,eAAQ,OAAO,SAAS,gBAAgB,EAAE,SAAS;AACnE,CAAC,EAAE,SAAS,gBAAgB;AAKrB,IAAM,EAAE,SAAS,kBAAkB,QAAQ,QAAI,YAAAE,SAA4B;AAAA,EACjF,WAAAF;AAAA,EACA;AAAA,EACA,aAAa,CAAC,UAAmB,GAAG;AAAA,EACpC,eAAe;AAChB,CAAC;AAIM,IAAM,EAAE,QAAQ,IAAI,KAAK,IAAI;AAE7B,IAAMC,WAAU;AAAA,EACtB,GAAG;AAAA,EACH,QAAQ,iBAAiB,OAAO,UAAU,SAAO,GAAoB;AACtE;","names":["rawSchema","schemas","createType"]}
{"version":3,"sources":["Alias.ts"],"sourcesContent":["import createType from '@taqueria/protocol/Base';\nimport * as SingleChar from '@taqueria/protocol/SingleChar';\nimport * as Verb from '@taqueria/protocol/Verb';\nimport { z } from 'zod';\n\nexport const rawSchema = z\n\t.union([\n\t\tVerb.rawSchema,\n\t\tSingleChar.rawSchema,\n\t], { description: 'Alias' });\n\nexport const internalSchema = z\n\t.union([\n\t\tVerb.schemas.schema,\n\t\tSingleChar.schemas.schema,\n\t], { description: 'Alias' });\n\ntype RawInput = z.infer<typeof rawSchema>;\ntype Input = z.infer<typeof internalSchema>;\n\nconst { schemas: generatedSchemas, factory } = createType<RawInput, Input>({\n\tisStringLike: true,\n\trawSchema,\n\tinternalSchema,\n\tparseErrMsg: (value: unknown) => `${value} is not a valid alias`,\n\tunknownErrMsg: 'Something went wrong trying to parse an alias',\n});\n\nexport type Alias = z.infer<typeof internalSchema>;\n\nexport type t = Alias;\n\nexport const { create, of, make } = factory;\n\nexport const schemas = {\n\t...generatedSchemas,\n\tschema: generatedSchemas.schema.transform(val => val as Alias),\n};\n"],"mappings":";AAAA,OAAO,gBAAgB;AACvB,YAAY,gBAAgB;AAC5B,YAAY,UAAU;AACtB,SAAS,SAAS;AAEX,IAAMA,aAAY,EACvB,MAAM;AAAA,EACD;AAAA,EACM;AACZ,GAAG,EAAE,aAAa,QAAQ,CAAC;AAErB,IAAM,iBAAiB,EAC5B,MAAM;AAAA,EACD,aAAQ;AAAA,EACF,mBAAQ;AACpB,GAAG,EAAE,aAAa,QAAQ,CAAC;AAK5B,IAAM,EAAE,SAAS,kBAAkB,QAAQ,IAAI,WAA4B;AAAA,EAC1E,cAAc;AAAA,EACd,WAAAA;AAAA,EACA;AAAA,EACA,aAAa,CAAC,UAAmB,GAAG;AAAA,EACpC,eAAe;AAChB,CAAC;AAMM,IAAM,EAAE,QAAQ,IAAI,KAAK,IAAI;AAE7B,IAAMC,WAAU;AAAA,EACtB,GAAG;AAAA,EACH,QAAQ,iBAAiB,OAAO,UAAU,SAAO,GAAY;AAC9D;","names":["rawSchema","schemas"]}
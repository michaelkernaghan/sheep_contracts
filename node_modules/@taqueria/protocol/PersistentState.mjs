// PersistentState.ts
import createType from "@taqueria/protocol/Base";
import * as SHA256 from "@taqueria/protocol/SHA256";
import * as Timestamp from "@taqueria/protocol/Timestamp";
import * as Verb from "@taqueria/protocol/Verb";
import { z } from "zod";
var rawOpSchema = z.object({
  hash: SHA256.rawSchema.describe("state.op.hash"),
  time: Timestamp.rawSchema.describe("state.op.time"),
  output: z.unknown().describe("state.op.output")
}).describe("Persistent State Operation");
var rawTaskSchema = z.object({
  task: Verb.schemas.rawSchema,
  plugin: z.string().min(1),
  time: Timestamp.rawSchema.describe("state.task.time"),
  output: z.unknown().describe("state.task.output")
});
var internalOpSchema = z.object({
  hash: SHA256.schemas.schema.describe("state.op.hash"),
  time: Timestamp.schemas.schema.describe("state.op.time"),
  output: z.unknown().describe("state.op.output")
});
var internalTaskSchema = z.object({
  task: Verb.schemas.schema,
  plugin: z.string().min(1),
  time: Timestamp.schemas.schema.describe("state.task.time"),
  output: z.unknown().describe("state.op.output")
});
var rawSchema3 = z.object({
  operations: z.record(rawOpSchema),
  tasks: z.record(rawTaskSchema)
});
var internalSchema = z.object({
  operations: z.record(internalOpSchema),
  tasks: z.record(internalTaskSchema)
}).transform((val) => ({
  operations: val.operations,
  tasks: val.tasks
}));
var { schemas: generatedSchemas, factory } = createType({
  rawSchema: rawSchema3,
  parseErrMsg: `The persistent state is invalid`,
  unknownErrMsg: `Something went wrong trying to parse the persistent state`
});
var { create, of, make } = factory;
var schemas4 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
export {
  create,
  factory,
  generatedSchemas,
  internalSchema,
  make,
  of,
  rawSchema3 as rawSchema,
  schemas4 as schemas
};
//# sourceMappingURL=PersistentState.mjs.map
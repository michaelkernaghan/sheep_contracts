"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// Task.ts
var Task_exports = {};
__export(Task_exports, {
  create: () => create,
  factory: () => factory,
  generatedSchemas: () => generatedSchemas,
  make: () => make,
  of: () => of,
  rawSchema: () => rawSchema7,
  schemas: () => schemas7
});
module.exports = __toCommonJS(Task_exports);
var Alias = __toESM(require("@taqueria/protocol/Alias"));
var import_Base = __toESM(require("@taqueria/protocol/Base"));
var Command = __toESM(require("@taqueria/protocol/Command"));
var Option = __toESM(require("@taqueria/protocol/Option"));
var PluginResponseEncoding = __toESM(require("@taqueria/protocol/PluginResponseEncoding"));
var PositionalArg = __toESM(require("@taqueria/protocol/PositionalArg"));
var Verb = __toESM(require("@taqueria/protocol/Verb"));
var import_zod = require("zod");
var taskHandlerSchema = import_zod.z.union([
  import_zod.z.literal("proxy"),
  import_zod.z.string().min(1)
]);
var rawSchema7 = import_zod.z.object({
  task: Verb.rawSchema.describe("Task Name"),
  command: Command.rawSchema.describe("Task Command"),
  aliases: import_zod.z.array(Alias.rawSchema).default([]).describe("Task Aliases").optional(),
  description: import_zod.z.string({ description: "Task Description" }).min(3),
  example: import_zod.z.string({ description: "Task Example" }).optional(),
  hidden: import_zod.z.boolean({ description: "Task Is Hidden" }).default(false).optional(),
  encoding: PluginResponseEncoding.rawSchema.optional(),
  handler: taskHandlerSchema.describe("Task Handler"),
  options: import_zod.z.array(Option.rawSchema).default([]).describe("Task Options").optional(),
  positionals: import_zod.z.array(PositionalArg.rawSchema).default([]).describe("Task Positional Args").optional()
}).describe("Task");
var internalSchema = rawSchema7.extend({
  task: Verb.schemas.schema.describe("Task Name"),
  command: Command.schemas.schema.describe("Task Command"),
  aliases: import_zod.z.array(Alias.schemas.schema).default([]).describe("Task Aliases").optional(),
  encoding: PluginResponseEncoding.schemas.schema.optional(),
  handler: taskHandlerSchema.describe("Task Handler"),
  options: import_zod.z.preprocess(
    (val) => val ?? [],
    import_zod.z.array(Option.schemas.schema).describe("Task Options").optional()
  ),
  positionals: import_zod.z.array(PositionalArg.schemas.schema).default([]).describe("Task Positional Args").optional()
}).describe("Task");
var { schemas: generatedSchemas, factory } = (0, import_Base.default)({
  rawSchema: rawSchema7,
  internalSchema,
  parseErrMsg: (value) => `The following task is invalid: ${value}`,
  unknownErrMsg: "Something went wrong trying to parse the task"
});
var { create, make, of } = factory;
var schemas7 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  create,
  factory,
  generatedSchemas,
  make,
  of,
  rawSchema,
  schemas
});
//# sourceMappingURL=Task.js.map
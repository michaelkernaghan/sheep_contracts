"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from2, except, desc) => {
  if (from2 && typeof from2 === "object" || typeof from2 === "function") {
    for (let key of __getOwnPropNames(from2))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// RequestArgs.ts
var RequestArgs_exports = {};
__export(RequestArgs_exports, {
  create: () => create,
  createProxyRequestArgs: () => createProxyRequestArgs,
  createProxyTemplateRequestArgs: () => createProxyTemplateRequestArgs,
  factory: () => factory,
  from: () => from,
  generatedSchemas: () => generatedSchemas,
  make: () => make,
  makeProxyRequestArgs: () => makeProxyRequestArgs,
  makeProxyTemplateRequestArgs: () => makeProxyTemplateRequestArgs,
  of: () => of,
  ofProxyRequestArgs: () => ofProxyRequestArgs,
  ofProxyTemplateRequestArgs: () => ofProxyTemplateRequestArgs,
  proxy: () => proxy,
  proxyFactory: () => proxyFactory,
  proxySchemas: () => proxySchemas,
  proxyTemplate: () => proxyTemplate,
  schemas: () => schemas2
});
module.exports = __toCommonJS(RequestArgs_exports);
var import_Base = __toESM(require("@taqueria/protocol/Base"));
var LoadedConfig = __toESM(require("@taqueria/protocol/LoadedConfig"));
var import_SanitizedArgs = require("@taqueria/protocol/SanitizedArgs");
var import_zod = require("zod");
var taqRunSchema = import_zod.z.union([
  import_zod.z.literal("pluginInfo"),
  import_zod.z.literal("proxy"),
  import_zod.z.literal("checkRuntimeDependencies"),
  import_zod.z.literal("installRuntimeDependencies"),
  import_zod.z.literal("proxyTemplate")
]);
var rawSchema2 = import_SanitizedArgs.rawSchema.extend({
  taqRun: taqRunSchema,
  config: import_zod.z.preprocess(
    (val) => typeof val === "string" ? JSON.parse(val) : val,
    LoadedConfig.rawSchema
  )
}).describe("RequestArgs").passthrough();
var internalSchema = import_SanitizedArgs.rawSchema.extend({
  taqRun: taqRunSchema,
  config: import_zod.z.preprocess(
    (val) => typeof val === "string" ? JSON.parse(val) : val,
    LoadedConfig.schemas.schema
  )
}).describe("RequestArgs").passthrough();
var { schemas: generatedSchemas, factory } = (0, import_Base.default)({
  rawSchema: rawSchema2,
  internalSchema,
  parseErrMsg: "The request is invalid",
  unknownErrMsg: "Something went wrong trying to parse the request"
});
var schemas2 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
var rawProxyTaskSchema = rawSchema2.extend({
  task: import_zod.z.string().min(1)
}).describe("ProxyRequestArgs").passthrough();
var internalProxyTaskSchema = internalSchema.extend({
  task: import_zod.z.string().min(1)
}).describe("ProxyRequestArgs").passthrough();
var rawProxyTemplateSchema = rawSchema2.extend({
  template: import_zod.z.string().min(1)
});
var internalProxyTemplateSchema = rawSchema2.extend({
  template: import_zod.z.string().min(1)
});
var proxy = (0, import_Base.default)({
  rawSchema: rawProxyTaskSchema,
  internalSchema: internalProxyTaskSchema,
  parseErrMsg: "The request is invalid",
  unknownErrMsg: "Something went wrong trying to parse the request"
});
var proxyTemplate = (0, import_Base.default)({
  rawSchema: rawProxyTemplateSchema,
  internalSchema: internalProxyTemplateSchema,
  parseErrMsg: "The request is invalid",
  unknownErrMsg: "Something went wrong trying to parse the request"
});
var proxySchemas = proxy.schemas;
var proxyFactory = proxy.factory;
var createProxyRequestArgs = proxyFactory.from;
var makeProxyRequestArgs = proxyFactory.make;
var ofProxyRequestArgs = proxyFactory.of;
var createProxyTemplateRequestArgs = proxyTemplate.factory.from;
var makeProxyTemplateRequestArgs = proxyTemplate.factory.make;
var ofProxyTemplateRequestArgs = proxyTemplate.factory.of;
var { create, make, of, from } = factory;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  create,
  createProxyRequestArgs,
  createProxyTemplateRequestArgs,
  factory,
  from,
  generatedSchemas,
  make,
  makeProxyRequestArgs,
  makeProxyTemplateRequestArgs,
  of,
  ofProxyRequestArgs,
  ofProxyTemplateRequestArgs,
  proxy,
  proxyFactory,
  proxySchemas,
  proxyTemplate,
  schemas
});
//# sourceMappingURL=RequestArgs.js.map
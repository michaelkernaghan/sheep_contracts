import { z } from 'zod';
export declare const rawSchema: z.ZodObject<z.extendShape<{
    template: z.ZodString;
    command: z.ZodString;
    description: z.ZodString;
    hidden: z.ZodOptional<z.ZodEffects<z.ZodBoolean, boolean, unknown>>;
    options: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodObject<{
        shortFlag: z.ZodOptional<z.ZodString>;
        flag: z.ZodString;
        description: z.ZodString;
        defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
        choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        required: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        boolean: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
    }, "strip", z.ZodTypeAny, {
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: string | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string;
    }, {
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: string | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string;
    }>, "many">, {
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: string | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string;
    }[], unknown>>;
    positionals: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodObject<{
        placeholder: z.ZodString;
        description: z.ZodString;
        defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
        type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
        required: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string;
    }, {
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string;
    }>, "many">, {
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string;
    }[], unknown>>;
    handler: z.ZodUnion<[z.ZodString, z.ZodFunction<z.ZodTuple<[z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        plugin?: string | undefined;
        version?: boolean | undefined;
        build?: boolean | undefined;
        help?: boolean | undefined;
        yes?: boolean | undefined;
        quickstart?: string | undefined;
        pluginName?: string | undefined;
        config: import("@taqueria/protocol/Base").Flatten<{
            language?: "en" | "fr" | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string & {
                    readonly __kind: any;
                };
            }> | undefined;
            network?: Record<string, import("@taqueria/protocol/Base").Flatten<{
                accounts?: Record<string, any> | undefined;
                faucet?: import("@taqueria/protocol/Base").Flatten<{
                    email?: string | undefined;
                    password?: string | undefined;
                    amount?: string | undefined;
                    activation_code?: string | undefined;
                    mnemonic: string[];
                    pkh: string & {
                        readonly __kind: any;
                    };
                } & {
                    readonly __kind: any;
                }> | undefined;
                label: string & {
                    readonly __kind: any;
                };
                rpcUrl: string & {
                    readonly __kind: any;
                };
                protocol: string & {
                    readonly __kind: any;
                };
            } & {
                readonly __kind: any;
            }>> | undefined;
            sandbox?: Record<string, {
                accounts?: Record<string, string | ({
                    encryptedKey: string;
                    publicKeyHash: string & {
                        readonly __kind: any;
                    };
                    secretKey: string;
                } & {
                    readonly __kind: any;
                })> | undefined;
                attributes?: Record<string, string | number | boolean> | undefined;
                plugin?: (string & {
                    readonly __kind: any;
                }) | undefined;
                tzkt?: {
                    disableAutostartWithSandbox: boolean;
                    postgresqlPort: number;
                    apiPort: number;
                } | undefined;
                label: string & {
                    readonly __kind: any;
                };
                rpcUrl: string & {
                    readonly __kind: any;
                };
                protocol: string & {
                    readonly __kind: any;
                };
            } & {
                readonly __kind: any;
            }> | undefined;
            environment?: Record<string, string | import("@taqueria/protocol/Base").Flatten<{
                storage?: Record<string, any> | undefined;
                aliases?: Record<string, any> | undefined;
                networks: string[];
                sandboxes: string[];
            } & {
                readonly __kind: any;
            }>> | undefined;
            metadata?: ({
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } & {
                readonly __kind: any;
            }) | undefined;
            hash: string & {
                readonly __kind: any;
            };
            accounts: Record<string, string | number>;
            plugins: ({
                type: "npm" | "binary" | "deno";
                name: string;
            } & {
                readonly __kind: any;
            })[];
            contractsDir: string;
            artifactsDir: string;
            projectDir: string & {
                readonly __kind: any;
            };
            configFile: string & {
                readonly __kind: any;
            };
        }> & {
            readonly __kind: any;
        };
        debug: boolean;
        fromVsCode: boolean;
        projectDir: string & {
            readonly __kind: any;
        };
        _: (string | number)[];
        maxConcurrency: number;
        disableState: boolean;
        logPluginRequests: boolean;
        env: string;
        setBuild: string;
        setVersion: string;
        taqRun: "pluginInfo" | "proxy" | "checkRuntimeDependencies" | "installRuntimeDependencies" | "proxyTemplate";
    } & {
        readonly __kind: any;
    }, any>, {
        plugin?: string | undefined;
        version?: boolean | undefined;
        build?: boolean | undefined;
        help?: boolean | undefined;
        yes?: boolean | undefined;
        quickstart?: string | undefined;
        pluginName?: string | undefined;
        config: import("@taqueria/protocol/Base").Flatten<{
            language?: "en" | "fr" | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string & {
                    readonly __kind: any;
                };
            }> | undefined;
            network?: Record<string, import("@taqueria/protocol/Base").Flatten<{
                accounts?: Record<string, any> | undefined;
                faucet?: import("@taqueria/protocol/Base").Flatten<{
                    email?: string | undefined;
                    password?: string | undefined;
                    amount?: string | undefined;
                    activation_code?: string | undefined;
                    mnemonic: string[];
                    pkh: string & {
                        readonly __kind: any;
                    };
                } & {
                    readonly __kind: any;
                }> | undefined;
                label: string & {
                    readonly __kind: any;
                };
                rpcUrl: string & {
                    readonly __kind: any;
                };
                protocol: string & {
                    readonly __kind: any;
                };
            } & {
                readonly __kind: any;
            }>> | undefined;
            sandbox?: Record<string, {
                accounts?: Record<string, string | ({
                    encryptedKey: string;
                    publicKeyHash: string & {
                        readonly __kind: any;
                    };
                    secretKey: string;
                } & {
                    readonly __kind: any;
                })> | undefined;
                attributes?: Record<string, string | number | boolean> | undefined;
                plugin?: (string & {
                    readonly __kind: any;
                }) | undefined;
                tzkt?: {
                    disableAutostartWithSandbox: boolean;
                    postgresqlPort: number;
                    apiPort: number;
                } | undefined;
                label: string & {
                    readonly __kind: any;
                };
                rpcUrl: string & {
                    readonly __kind: any;
                };
                protocol: string & {
                    readonly __kind: any;
                };
            } & {
                readonly __kind: any;
            }> | undefined;
            environment?: Record<string, string | import("@taqueria/protocol/Base").Flatten<{
                storage?: Record<string, any> | undefined;
                aliases?: Record<string, any> | undefined;
                networks: string[];
                sandboxes: string[];
            } & {
                readonly __kind: any;
            }>> | undefined;
            metadata?: ({
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } & {
                readonly __kind: any;
            }) | undefined;
            hash: string & {
                readonly __kind: any;
            };
            accounts: Record<string, string | number>;
            plugins: ({
                type: "npm" | "binary" | "deno";
                name: string;
            } & {
                readonly __kind: any;
            })[];
            contractsDir: string;
            artifactsDir: string;
            projectDir: string & {
                readonly __kind: any;
            };
            configFile: string & {
                readonly __kind: any;
            };
        }> & {
            readonly __kind: any;
        };
        debug: boolean;
        fromVsCode: boolean;
        projectDir: string & {
            readonly __kind: any;
        };
        _: (string | number)[];
        maxConcurrency: number;
        disableState: boolean;
        logPluginRequests: boolean;
        env: string;
        setBuild: string;
        setVersion: string;
        taqRun: "pluginInfo" | "proxy" | "checkRuntimeDependencies" | "installRuntimeDependencies" | "proxyTemplate";
    } & {
        readonly __kind: any;
    }, any>], z.ZodUnknown>, z.ZodUnion<[z.ZodVoid, z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        data?: unknown;
        render?: "string" | "none" | "table" | undefined;
    } & {
        readonly __kind: any;
    }, any>, z.ZodType<any, z.ZodTypeDef, any>, z.ZodPromise<z.ZodUnion<[z.ZodPromise<z.ZodVoid>, z.ZodVoid, z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        data?: unknown;
        render?: "string" | "none" | "table" | undefined;
    } & {
        readonly __kind: any;
    }, any>, z.ZodType<any, z.ZodTypeDef, any>]>>]>>]>;
    encoding: z.ZodOptional<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, ("none" | "json" | "application/json" | undefined) & {
        readonly __kind: any;
    }, any>>;
}, {
    handler: z.ZodString;
    encoding: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, ("none" | "json" | "application/json" | undefined) & {
        readonly __kind: any;
    }, any>;
}>, "strip", z.ZodTypeAny, {
    options?: {
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: string | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string;
    }[] | undefined;
    positionals?: {
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string;
    }[] | undefined;
    hidden?: boolean | undefined;
    description: string;
    template: string;
    command: string;
    handler: string;
    encoding: ("none" | "json" | "application/json" | undefined) & {
        readonly __kind: any;
    };
}, {
    options?: unknown;
    positionals?: unknown;
    hidden?: unknown;
    encoding?: any;
    description: string;
    template: string;
    command: string;
    handler: string;
}>;
export declare const generatedSchemas: {
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
    schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        options?: import("@taqueria/protocol/Base").Flatten<{
            boolean?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: (string & {
                readonly __kind: any;
            }) | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            required?: boolean | undefined;
            description: string;
            flag: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>[] | undefined;
        positionals?: ({
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            required?: boolean | undefined;
            description: string;
            placeholder: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        })[] | undefined;
        hidden?: boolean | undefined;
        description: string;
        template: string & {
            readonly __kind: any;
        };
        command: string & {
            readonly __kind: any;
        };
        handler: string;
        encoding: ("none" | "json" | "application/json" | undefined) & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }, any>;
}, factory: {
    make: (input: {
        options?: import("@taqueria/protocol/Base").Flatten<{
            boolean?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: (string & {
                readonly __kind: any;
            }) | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            required?: boolean | undefined;
            description: string;
            flag: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>[] | undefined;
        positionals?: ({
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            required?: boolean | undefined;
            description: string;
            placeholder: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        })[] | undefined;
        hidden?: boolean | undefined;
        description: string;
        template: string & {
            readonly __kind: any;
        };
        command: string & {
            readonly __kind: any;
        };
        handler: string;
        encoding: ("none" | "json" | "application/json" | undefined) & {
            readonly __kind: any;
        };
    }) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        options?: import("@taqueria/protocol/Base").Flatten<{
            boolean?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: (string & {
                readonly __kind: any;
            }) | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            required?: boolean | undefined;
            description: string;
            flag: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>[] | undefined;
        positionals?: ({
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            required?: boolean | undefined;
            description: string;
            placeholder: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        })[] | undefined;
        hidden?: boolean | undefined;
        description: string;
        template: string & {
            readonly __kind: any;
        };
        command: string & {
            readonly __kind: any;
        };
        handler: string;
        encoding: ("none" | "json" | "application/json" | undefined) & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>;
    of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
        options?: import("@taqueria/protocol/Base").Flatten<{
            boolean?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: (string & {
                readonly __kind: any;
            }) | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            required?: boolean | undefined;
            description: string;
            flag: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>[] | undefined;
        positionals?: ({
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            required?: boolean | undefined;
            description: string;
            placeholder: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        })[] | undefined;
        hidden?: boolean | undefined;
        description: string;
        template: string & {
            readonly __kind: any;
        };
        command: string & {
            readonly __kind: any;
        };
        handler: string;
        encoding: ("none" | "json" | "application/json" | undefined) & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>;
    create: (input: {
        options?: import("@taqueria/protocol/Base").Flatten<{
            boolean?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: (string & {
                readonly __kind: any;
            }) | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            required?: boolean | undefined;
            description: string;
            flag: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>[] | undefined;
        positionals?: ({
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            required?: boolean | undefined;
            description: string;
            placeholder: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        })[] | undefined;
        hidden?: boolean | undefined;
        description: string;
        template: string & {
            readonly __kind: any;
        };
        command: string & {
            readonly __kind: any;
        };
        handler: string;
        encoding: ("none" | "json" | "application/json" | undefined) & {
            readonly __kind: any;
        };
    } | {
        options?: {
            boolean?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            required?: boolean | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        positionals?: {
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            required?: boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        hidden?: boolean | undefined;
        description: string;
        template: string;
        command: string;
        handler: string;
        encoding: ("none" | "json" | "application/json" | undefined) & {
            readonly __kind: any;
        };
    }) => {
        options?: import("@taqueria/protocol/Base").Flatten<{
            boolean?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: (string & {
                readonly __kind: any;
            }) | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            required?: boolean | undefined;
            description: string;
            flag: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>[] | undefined;
        positionals?: ({
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            required?: boolean | undefined;
            description: string;
            placeholder: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        })[] | undefined;
        hidden?: boolean | undefined;
        description: string;
        template: string & {
            readonly __kind: any;
        };
        command: string & {
            readonly __kind: any;
        };
        handler: string;
        encoding: ("none" | "json" | "application/json" | undefined) & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    };
    from: (input: unknown) => {
        options?: import("@taqueria/protocol/Base").Flatten<{
            boolean?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: (string & {
                readonly __kind: any;
            }) | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            required?: boolean | undefined;
            description: string;
            flag: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>[] | undefined;
        positionals?: ({
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            required?: boolean | undefined;
            description: string;
            placeholder: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        })[] | undefined;
        hidden?: boolean | undefined;
        description: string;
        template: string & {
            readonly __kind: any;
        };
        command: string & {
            readonly __kind: any;
        };
        handler: string;
        encoding: ("none" | "json" | "application/json" | undefined) & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    };
};
export declare type ParsedTemplate = z.infer<typeof generatedSchemas.schema>;
export declare type t = ParsedTemplate;
export declare const create: (input: {
    options?: import("@taqueria/protocol/Base").Flatten<{
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: (string & {
            readonly __kind: any;
        }) | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>[] | undefined;
    positionals?: ({
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    })[] | undefined;
    hidden?: boolean | undefined;
    description: string;
    template: string & {
        readonly __kind: any;
    };
    command: string & {
        readonly __kind: any;
    };
    handler: string;
    encoding: ("none" | "json" | "application/json" | undefined) & {
        readonly __kind: any;
    };
} | {
    options?: {
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: string | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string;
    }[] | undefined;
    positionals?: {
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string;
    }[] | undefined;
    hidden?: boolean | undefined;
    description: string;
    template: string;
    command: string;
    handler: string;
    encoding: ("none" | "json" | "application/json" | undefined) & {
        readonly __kind: any;
    };
}) => {
    options?: import("@taqueria/protocol/Base").Flatten<{
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: (string & {
            readonly __kind: any;
        }) | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>[] | undefined;
    positionals?: ({
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    })[] | undefined;
    hidden?: boolean | undefined;
    description: string;
    template: string & {
        readonly __kind: any;
    };
    command: string & {
        readonly __kind: any;
    };
    handler: string;
    encoding: ("none" | "json" | "application/json" | undefined) & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
}, make: (input: {
    options?: import("@taqueria/protocol/Base").Flatten<{
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: (string & {
            readonly __kind: any;
        }) | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>[] | undefined;
    positionals?: ({
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    })[] | undefined;
    hidden?: boolean | undefined;
    description: string;
    template: string & {
        readonly __kind: any;
    };
    command: string & {
        readonly __kind: any;
    };
    handler: string;
    encoding: ("none" | "json" | "application/json" | undefined) & {
        readonly __kind: any;
    };
}) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    options?: import("@taqueria/protocol/Base").Flatten<{
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: (string & {
            readonly __kind: any;
        }) | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>[] | undefined;
    positionals?: ({
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    })[] | undefined;
    hidden?: boolean | undefined;
    description: string;
    template: string & {
        readonly __kind: any;
    };
    command: string & {
        readonly __kind: any;
    };
    handler: string;
    encoding: ("none" | "json" | "application/json" | undefined) & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
}>, of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, {
    options?: import("@taqueria/protocol/Base").Flatten<{
        boolean?: boolean | undefined;
        type?: "string" | "number" | "boolean" | undefined;
        shortFlag?: (string & {
            readonly __kind: any;
        }) | undefined;
        defaultValue?: string | number | boolean | undefined;
        choices?: string[] | undefined;
        required?: boolean | undefined;
        description: string;
        flag: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>[] | undefined;
    positionals?: ({
        type?: "string" | "number" | "boolean" | undefined;
        defaultValue?: string | number | boolean | undefined;
        required?: boolean | undefined;
        description: string;
        placeholder: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    })[] | undefined;
    hidden?: boolean | undefined;
    description: string;
    template: string & {
        readonly __kind: any;
    };
    command: string & {
        readonly __kind: any;
    };
    handler: string;
    encoding: ("none" | "json" | "application/json" | undefined) & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
}>;
export declare const schemas: {
    schema: z.ZodEffects<z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, {
        options?: import("@taqueria/protocol/Base").Flatten<{
            boolean?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: (string & {
                readonly __kind: any;
            }) | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            required?: boolean | undefined;
            description: string;
            flag: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>[] | undefined;
        positionals?: ({
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            required?: boolean | undefined;
            description: string;
            placeholder: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        })[] | undefined;
        hidden?: boolean | undefined;
        description: string;
        template: string & {
            readonly __kind: any;
        };
        command: string & {
            readonly __kind: any;
        };
        handler: string;
        encoding: ("none" | "json" | "application/json" | undefined) & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }, any>, {
        options?: import("@taqueria/protocol/Base").Flatten<{
            boolean?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: (string & {
                readonly __kind: any;
            }) | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            required?: boolean | undefined;
            description: string;
            flag: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        }>[] | undefined;
        positionals?: ({
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            required?: boolean | undefined;
            description: string;
            placeholder: string & {
                readonly __kind: any;
            };
        } & {
            readonly __kind: any;
        })[] | undefined;
        hidden?: boolean | undefined;
        description: string;
        template: string & {
            readonly __kind: any;
        };
        command: string & {
            readonly __kind: any;
        };
        handler: string;
        encoding: ("none" | "json" | "application/json" | undefined) & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }, any>;
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
};
//# sourceMappingURL=ParsedTemplate.d.ts.map
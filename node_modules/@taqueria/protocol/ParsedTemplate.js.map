{"version":3,"sources":["ParsedTemplate.ts"],"sourcesContent":["import createType from '@taqueria/protocol/Base';\nimport * as PluginResponseEncoding from '@taqueria/protocol/PluginResponseEncoding';\nimport * as Template from '@taqueria/protocol/Template';\nimport { z } from 'zod';\n\nconst internalSchema = Template\n\t.internalSchema\n\t.extend({\n\t\thandler: z.string(),\n\t\tencoding: PluginResponseEncoding.schemas.schema,\n\t})\n\t.describe('ParsedTemplate');\n\nexport const rawSchema = Template\n\t.rawSchema\n\t.extend({\n\t\thandler: z.string(),\n\t\tencoding: PluginResponseEncoding.schemas.schema,\n\t})\n\t.describe('ParsedTemplate');\n\ntype RawInput = z.infer<typeof rawSchema>;\ntype Input = z.infer<typeof internalSchema>;\n\nexport const { schemas: generatedSchemas, factory } = createType<RawInput, Input>({\n\trawSchema,\n\tinternalSchema,\n\tparseErrMsg: (value: unknown) => `Could not parse the following template: ${value}`,\n\tunknownErrMsg: 'Something went wrong trying to parse an template',\n});\n\nexport type ParsedTemplate = z.infer<typeof generatedSchemas.schema>;\nexport type t = ParsedTemplate;\n\nexport const { create, make, of } = factory;\n\nexport const schemas = {\n\t...generatedSchemas,\n\tschema: generatedSchemas.schema.transform(val => val as ParsedTemplate),\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAAA;AAAA,EAAA,eAAAC;AAAA;AAAA;AAAA,kBAAuB;AACvB,6BAAwC;AACxC,eAA0B;AAC1B,iBAAkB;AAElB,IAAMC,kBACJ,wBACA,OAAO;AAAA,EACP,SAAS,aAAE,OAAO;AAAA,EAClB,UAAiC,+BAAQ;AAC1C,CAAC,EACA,SAAS,gBAAgB;AAEpB,IAAMF,aACX,mBACA,OAAO;AAAA,EACP,SAAS,aAAE,OAAO;AAAA,EAClB,UAAiC,+BAAQ;AAC1C,CAAC,EACA,SAAS,gBAAgB;AAKpB,IAAM,EAAE,SAAS,kBAAkB,QAAQ,QAAI,YAAAG,SAA4B;AAAA,EACjF,WAAAH;AAAA,EACA,gBAAAE;AAAA,EACA,aAAa,CAAC,UAAmB,2CAA2C;AAAA,EAC5E,eAAe;AAChB,CAAC;AAKM,IAAM,EAAE,QAAQ,MAAM,GAAG,IAAI;AAE7B,IAAMD,WAAU;AAAA,EACtB,GAAG;AAAA,EACH,QAAQ,iBAAiB,OAAO,UAAU,SAAO,GAAqB;AACvE;","names":["rawSchema","schemas","internalSchema","createType"]}
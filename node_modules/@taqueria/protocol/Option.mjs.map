{"version":3,"sources":["Option.ts"],"sourcesContent":["import createType, { Flatten } from '@taqueria/protocol/Base';\nimport * as SingleChar from '@taqueria/protocol/SingleChar';\nimport * as Verb from '@taqueria/protocol/Verb';\nimport { z } from 'zod';\n\nexport const internalSchema = z.object({\n\tshortFlag: SingleChar.schemas.schema.describe('Option Short Flag').optional(),\n\tflag: Verb.schemas.schema.describe('Option Long Flag'),\n\tdescription: z.string({ description: 'Option Description' }).min(1),\n\tdefaultValue: z.union(\n\t\t[z.string(), z.number(), z.boolean()],\n\t\t{ description: 'Option Default Value' },\n\t).optional(),\n\tchoices: z.array(\n\t\tz.string({ description: 'Option Choice' }),\n\t\t{ description: 'Option Choices' },\n\t).optional(),\n\trequired: z.boolean({ description: 'Option Is Required' }).default(false).optional(),\n\tboolean: z.boolean({ description: 'Option Is Boolean' }).default(false).optional(),\n\ttype: z.union(\n\t\t[z.literal('string'), z.literal('number'), z.literal('boolean')],\n\t\t{ description: 'Positional Arg Datatype' },\n\t).optional(),\n}).describe('Option');\n\nexport const rawSchema = z.object({\n\tshortFlag: SingleChar.rawSchema.describe('Option Short Flag').optional(),\n\tflag: Verb.rawSchema.describe('Option Long Flag'),\n\tdescription: z.string({ description: 'Option Description' }).min(1),\n\tdefaultValue: z.union(\n\t\t[z.string(), z.number(), z.boolean()],\n\t\t{ description: 'Option Default Value' },\n\t).optional(),\n\tchoices: z.array(\n\t\tz.string({ description: 'Option Choice' }),\n\t\t{ description: 'Option Choices' },\n\t).optional(),\n\trequired: z.boolean({ description: 'Option Is Required' }).default(false).optional(),\n\tboolean: z.boolean({ description: 'Option Is Boolean' }).default(false).optional(),\n\ttype: z.union(\n\t\t[z.literal('string'), z.literal('number'), z.literal('boolean')],\n\t\t{ description: 'Positional Arg Datatype' },\n\t).optional(),\n}).describe('Option');\n\ntype RawInput = z.infer<typeof rawSchema>;\ntype Input = z.infer<typeof internalSchema>;\n\nexport const { schemas: generatedSchemas, factory } = createType<RawInput, Input>({\n\trawSchema,\n\tinternalSchema,\n\tparseErrMsg: (value: unknown) => `The following option is invalid: ${value}`,\n\tunknownErrMsg: 'Something went wrong trying to parse the option',\n});\n\nexport type Option = Flatten<z.infer<typeof generatedSchemas.schema>>;\nexport type t = Option;\n\nexport const { make, create, of } = factory;\n\nexport const schemas = {\n\t...generatedSchemas,\n\tschema: generatedSchemas.schema.transform(val => val as Option),\n};\n"],"mappings":";AAAA,OAAO,gBAA6B;AACpC,YAAY,gBAAgB;AAC5B,YAAY,UAAU;AACtB,SAAS,SAAS;AAEX,IAAM,iBAAiB,EAAE,OAAO;AAAA,EACtC,WAAsB,mBAAQ,OAAO,SAAS,mBAAmB,EAAE,SAAS;AAAA,EAC5E,MAAW,aAAQ,OAAO,SAAS,kBAAkB;AAAA,EACrD,aAAa,EAAE,OAAO,EAAE,aAAa,qBAAqB,CAAC,EAAE,IAAI,CAAC;AAAA,EAClE,cAAc,EAAE;AAAA,IACf,CAAC,EAAE,OAAO,GAAG,EAAE,OAAO,GAAG,EAAE,QAAQ,CAAC;AAAA,IACpC,EAAE,aAAa,uBAAuB;AAAA,EACvC,EAAE,SAAS;AAAA,EACX,SAAS,EAAE;AAAA,IACV,EAAE,OAAO,EAAE,aAAa,gBAAgB,CAAC;AAAA,IACzC,EAAE,aAAa,iBAAiB;AAAA,EACjC,EAAE,SAAS;AAAA,EACX,UAAU,EAAE,QAAQ,EAAE,aAAa,qBAAqB,CAAC,EAAE,QAAQ,KAAK,EAAE,SAAS;AAAA,EACnF,SAAS,EAAE,QAAQ,EAAE,aAAa,oBAAoB,CAAC,EAAE,QAAQ,KAAK,EAAE,SAAS;AAAA,EACjF,MAAM,EAAE;AAAA,IACP,CAAC,EAAE,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,EAAE,QAAQ,SAAS,CAAC;AAAA,IAC/D,EAAE,aAAa,0BAA0B;AAAA,EAC1C,EAAE,SAAS;AACZ,CAAC,EAAE,SAAS,QAAQ;AAEb,IAAMA,aAAY,EAAE,OAAO;AAAA,EACjC,WAAsB,qBAAU,SAAS,mBAAmB,EAAE,SAAS;AAAA,EACvE,MAAW,eAAU,SAAS,kBAAkB;AAAA,EAChD,aAAa,EAAE,OAAO,EAAE,aAAa,qBAAqB,CAAC,EAAE,IAAI,CAAC;AAAA,EAClE,cAAc,EAAE;AAAA,IACf,CAAC,EAAE,OAAO,GAAG,EAAE,OAAO,GAAG,EAAE,QAAQ,CAAC;AAAA,IACpC,EAAE,aAAa,uBAAuB;AAAA,EACvC,EAAE,SAAS;AAAA,EACX,SAAS,EAAE;AAAA,IACV,EAAE,OAAO,EAAE,aAAa,gBAAgB,CAAC;AAAA,IACzC,EAAE,aAAa,iBAAiB;AAAA,EACjC,EAAE,SAAS;AAAA,EACX,UAAU,EAAE,QAAQ,EAAE,aAAa,qBAAqB,CAAC,EAAE,QAAQ,KAAK,EAAE,SAAS;AAAA,EACnF,SAAS,EAAE,QAAQ,EAAE,aAAa,oBAAoB,CAAC,EAAE,QAAQ,KAAK,EAAE,SAAS;AAAA,EACjF,MAAM,EAAE;AAAA,IACP,CAAC,EAAE,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,EAAE,QAAQ,SAAS,CAAC;AAAA,IAC/D,EAAE,aAAa,0BAA0B;AAAA,EAC1C,EAAE,SAAS;AACZ,CAAC,EAAE,SAAS,QAAQ;AAKb,IAAM,EAAE,SAAS,kBAAkB,QAAQ,IAAI,WAA4B;AAAA,EACjF,WAAAA;AAAA,EACA;AAAA,EACA,aAAa,CAAC,UAAmB,oCAAoC;AAAA,EACrE,eAAe;AAChB,CAAC;AAKM,IAAM,EAAE,MAAM,QAAQ,GAAG,IAAI;AAE7B,IAAMC,WAAU;AAAA,EACtB,GAAG;AAAA,EACH,QAAQ,iBAAiB,OAAO,UAAU,SAAO,GAAa;AAC/D;","names":["rawSchema","schemas"]}
// Alias.ts
import createType from "@taqueria/protocol/Base";
import * as SingleChar from "@taqueria/protocol/SingleChar";
import * as Verb from "@taqueria/protocol/Verb";
import { z } from "zod";
var rawSchema3 = z.union([
  Verb.rawSchema,
  SingleChar.rawSchema
], { description: "Alias" });
var internalSchema = z.union([
  Verb.schemas.schema,
  SingleChar.schemas.schema
], { description: "Alias" });
var { schemas: generatedSchemas, factory } = createType({
  isStringLike: true,
  rawSchema: rawSchema3,
  internalSchema,
  parseErrMsg: (value) => `${value} is not a valid alias`,
  unknownErrMsg: "Something went wrong trying to parse an alias"
});
var { create, of, make } = factory;
var schemas3 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
export {
  create,
  internalSchema,
  make,
  of,
  rawSchema3 as rawSchema,
  schemas3 as schemas
};
//# sourceMappingURL=Alias.mjs.map
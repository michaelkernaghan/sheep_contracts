"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// Option.ts
var Option_exports = {};
__export(Option_exports, {
  create: () => create,
  factory: () => factory,
  generatedSchemas: () => generatedSchemas,
  internalSchema: () => internalSchema,
  make: () => make,
  of: () => of,
  rawSchema: () => rawSchema3,
  schemas: () => schemas3
});
module.exports = __toCommonJS(Option_exports);
var import_Base = __toESM(require("@taqueria/protocol/Base"));
var SingleChar = __toESM(require("@taqueria/protocol/SingleChar"));
var Verb = __toESM(require("@taqueria/protocol/Verb"));
var import_zod = require("zod");
var internalSchema = import_zod.z.object({
  shortFlag: SingleChar.schemas.schema.describe("Option Short Flag").optional(),
  flag: Verb.schemas.schema.describe("Option Long Flag"),
  description: import_zod.z.string({ description: "Option Description" }).min(1),
  defaultValue: import_zod.z.union(
    [import_zod.z.string(), import_zod.z.number(), import_zod.z.boolean()],
    { description: "Option Default Value" }
  ).optional(),
  choices: import_zod.z.array(
    import_zod.z.string({ description: "Option Choice" }),
    { description: "Option Choices" }
  ).optional(),
  required: import_zod.z.boolean({ description: "Option Is Required" }).default(false).optional(),
  boolean: import_zod.z.boolean({ description: "Option Is Boolean" }).default(false).optional(),
  type: import_zod.z.union(
    [import_zod.z.literal("string"), import_zod.z.literal("number"), import_zod.z.literal("boolean")],
    { description: "Positional Arg Datatype" }
  ).optional()
}).describe("Option");
var rawSchema3 = import_zod.z.object({
  shortFlag: SingleChar.rawSchema.describe("Option Short Flag").optional(),
  flag: Verb.rawSchema.describe("Option Long Flag"),
  description: import_zod.z.string({ description: "Option Description" }).min(1),
  defaultValue: import_zod.z.union(
    [import_zod.z.string(), import_zod.z.number(), import_zod.z.boolean()],
    { description: "Option Default Value" }
  ).optional(),
  choices: import_zod.z.array(
    import_zod.z.string({ description: "Option Choice" }),
    { description: "Option Choices" }
  ).optional(),
  required: import_zod.z.boolean({ description: "Option Is Required" }).default(false).optional(),
  boolean: import_zod.z.boolean({ description: "Option Is Boolean" }).default(false).optional(),
  type: import_zod.z.union(
    [import_zod.z.literal("string"), import_zod.z.literal("number"), import_zod.z.literal("boolean")],
    { description: "Positional Arg Datatype" }
  ).optional()
}).describe("Option");
var { schemas: generatedSchemas, factory } = (0, import_Base.default)({
  rawSchema: rawSchema3,
  internalSchema,
  parseErrMsg: (value) => `The following option is invalid: ${value}`,
  unknownErrMsg: "Something went wrong trying to parse the option"
});
var { make, create, of } = factory;
var schemas3 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  create,
  factory,
  generatedSchemas,
  internalSchema,
  make,
  of,
  rawSchema,
  schemas
});
//# sourceMappingURL=Option.js.map
// Provisioner.ts
import createType from "@taqueria/protocol/Base";
import * as ProvisionerID from "@taqueria/protocol/ProvisionerID";
import { z } from "zod";
var rawSchema2 = z.object(
  {
    id: ProvisionerID.rawSchema,
    plugin: z.string().min(1).describe("Provisioner Plugin").optional(),
    operation: z.union([
      z.string().min(1),
      z.literal("custom")
    ]).describe("Provisioner Operation"),
    command: z.string().describe("Provisioner Custom Command").optional(),
    label: z.string().describe("Provisioner Label").optional(),
    depends_on: z.array(
      ProvisionerID.rawSchema
    ).optional()
  },
  {
    description: "Provisioner"
  }
).passthrough();
var internalSchema = rawSchema2.extend({
  id: ProvisionerID.schemas.schema,
  depends_on: z.array(ProvisionerID.schemas.schema).optional()
});
var { schemas: generatedSchemas, factory } = createType({
  rawSchema: rawSchema2,
  internalSchema,
  parseErrMsg: "There was a problem trying to parse the provisioner",
  unknownErrMsg: "Something went wrong trying to parse the provisioner"
});
var { create, of, make } = factory;
var schemas2 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
export {
  create,
  factory,
  generatedSchemas,
  internalSchema,
  make,
  of,
  rawSchema2 as rawSchema,
  schemas2 as schemas
};
//# sourceMappingURL=Provisioner.mjs.map
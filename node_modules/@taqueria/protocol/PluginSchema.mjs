// PluginSchema.ts
import * as Alias from "@taqueria/protocol/Alias";
import createType from "@taqueria/protocol/Base";
import * as Operation from "@taqueria/protocol/Operation";
import * as PluginDependenciesResponse from "@taqueria/protocol/PluginDependenciesResponse";
import * as PluginInfo from "@taqueria/protocol/PluginInfo";
import * as PluginProxyResponse from "@taqueria/protocol/PluginProxyResponse";
import * as RequestArgs from "@taqueria/protocol/RequestArgs";
import * as Template from "@taqueria/protocol/Template";
import { z } from "zod";
var proxyFnSchema = z.function().args(RequestArgs.proxySchemas.schema).returns(z.promise(PluginProxyResponse.schemas.schema));
var runtimeDependenciesFn = z.function().args(RequestArgs.schemas.schema).returns(z.promise(PluginDependenciesResponse.schemas.schema));
var internalSchema2 = PluginInfo.internalSchema.extend({
  operations: z.preprocess(
    (val) => val ?? [],
    z.array(
      Operation.schemas.schema,
      { description: "ParsedOperations" }
    ).optional()
  ),
  templates: z.preprocess(
    (val) => val ?? [],
    z.array(
      Template.schemas.schema
    ).optional()
  ),
  proxy: proxyFnSchema.optional(),
  checkRuntimeDependencies: runtimeDependenciesFn.optional(),
  installRuntimeDependencies: runtimeDependenciesFn.optional()
}).describe("ParsedPluginInfo");
var rawSchema4 = PluginInfo.rawSchema.extend({
  name: Alias.rawSchema.optional(),
  operations: z.preprocess(
    (val) => val ?? [],
    z.array(
      Operation.rawSchema,
      { description: "ParsedOperation" }
    )
  ).optional(),
  templates: z.preprocess(
    (val) => val ?? [],
    z.array(
      Template.schemas.schema
    ).optional()
  ),
  proxy: proxyFnSchema.optional(),
  checkRuntimeDependencies: runtimeDependenciesFn.optional(),
  installRuntimeDependencies: runtimeDependenciesFn.optional()
}).describe("ParsedPluginInfo");
var { schemas: generatedSchemas, factory } = createType({
  rawSchema: rawSchema4,
  internalSchema: internalSchema2,
  parseErrMsg: (value) => `The following plugin info gave us trouble when parsing the following plugin information: ${value}`,
  unknownErrMsg: "Something went wrong trying to parse the plugin information"
});
var { create, of, make } = factory;
var schemas6 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
export {
  create,
  factory,
  generatedSchemas,
  make,
  of,
  rawSchema4 as rawSchema,
  schemas6 as schemas
};
//# sourceMappingURL=PluginSchema.mjs.map
// Option.ts
import createType from "@taqueria/protocol/Base";
import * as SingleChar from "@taqueria/protocol/SingleChar";
import * as Verb from "@taqueria/protocol/Verb";
import { z } from "zod";
var internalSchema = z.object({
  shortFlag: SingleChar.schemas.schema.describe("Option Short Flag").optional(),
  flag: Verb.schemas.schema.describe("Option Long Flag"),
  description: z.string({ description: "Option Description" }).min(1),
  defaultValue: z.union(
    [z.string(), z.number(), z.boolean()],
    { description: "Option Default Value" }
  ).optional(),
  choices: z.array(
    z.string({ description: "Option Choice" }),
    { description: "Option Choices" }
  ).optional(),
  required: z.boolean({ description: "Option Is Required" }).default(false).optional(),
  boolean: z.boolean({ description: "Option Is Boolean" }).default(false).optional(),
  type: z.union(
    [z.literal("string"), z.literal("number"), z.literal("boolean")],
    { description: "Positional Arg Datatype" }
  ).optional()
}).describe("Option");
var rawSchema3 = z.object({
  shortFlag: SingleChar.rawSchema.describe("Option Short Flag").optional(),
  flag: Verb.rawSchema.describe("Option Long Flag"),
  description: z.string({ description: "Option Description" }).min(1),
  defaultValue: z.union(
    [z.string(), z.number(), z.boolean()],
    { description: "Option Default Value" }
  ).optional(),
  choices: z.array(
    z.string({ description: "Option Choice" }),
    { description: "Option Choices" }
  ).optional(),
  required: z.boolean({ description: "Option Is Required" }).default(false).optional(),
  boolean: z.boolean({ description: "Option Is Boolean" }).default(false).optional(),
  type: z.union(
    [z.literal("string"), z.literal("number"), z.literal("boolean")],
    { description: "Positional Arg Datatype" }
  ).optional()
}).describe("Option");
var { schemas: generatedSchemas, factory } = createType({
  rawSchema: rawSchema3,
  internalSchema,
  parseErrMsg: (value) => `The following option is invalid: ${value}`,
  unknownErrMsg: "Something went wrong trying to parse the option"
});
var { make, create, of } = factory;
var schemas3 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
export {
  create,
  factory,
  generatedSchemas,
  internalSchema,
  make,
  of,
  rawSchema3 as rawSchema,
  schemas3 as schemas
};
//# sourceMappingURL=Option.mjs.map
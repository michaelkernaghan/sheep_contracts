{"version":3,"sources":["Environment.ts"],"sourcesContent":["import createType, { Flatten } from '@taqueria/protocol/Base';\nimport { z } from 'zod';\n\nexport const rawSchema = z.object({\n\tnetworks: z.array(\n\t\tz.string({ description: 'Environment network' })\n\t\t\t.min(1, 'Must reference the name of an existing network configuration'),\n\t),\n\tsandboxes: z.array(\n\t\tz.string({ description: 'Environment sandbox' })\n\t\t\t.min(1, 'Must reference the name of an existing sandbox configuration'),\n\t),\n\tstorage: z.record(\n\t\tz.any({ description: 'Environment storage value' }),\n\t\t{ description: 'Environment storage' },\n\t)\n\t\t.optional(),\n\taliases: z.record(\n\t\tz.any({ description: 'Environment address alias' }),\n\t\t{ description: 'Environment alias' },\n\t).optional(),\n}).describe('Environment Config');\n\ntype RawInput = z.infer<typeof rawSchema>;\n\nexport const { schemas: generatedSchemas, factory } = createType<RawInput, RawInput>({\n\trawSchema,\n\tparseErrMsg: (value: unknown) => `${value} is not an valid environment configuration`,\n\tunknownErrMsg: 'Something went wrong trying to parse the environment configuration',\n});\n\nexport type Environment = Flatten<z.infer<typeof generatedSchemas.schema>>;\nexport type t = Environment;\n\nexport const { create, make, of, from } = factory;\n\nexport const schemas = {\n\t...generatedSchemas,\n\tschema: generatedSchemas.schema.transform(val => val as Environment),\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAoC;AACpC,iBAAkB;AAEX,IAAM,YAAY,aAAE,OAAO;AAAA,EACjC,UAAU,aAAE;AAAA,IACX,aAAE,OAAO,EAAE,aAAa,sBAAsB,CAAC,EAC7C,IAAI,GAAG,8DAA8D;AAAA,EACxE;AAAA,EACA,WAAW,aAAE;AAAA,IACZ,aAAE,OAAO,EAAE,aAAa,sBAAsB,CAAC,EAC7C,IAAI,GAAG,8DAA8D;AAAA,EACxE;AAAA,EACA,SAAS,aAAE;AAAA,IACV,aAAE,IAAI,EAAE,aAAa,4BAA4B,CAAC;AAAA,IAClD,EAAE,aAAa,sBAAsB;AAAA,EACtC,EACE,SAAS;AAAA,EACX,SAAS,aAAE;AAAA,IACV,aAAE,IAAI,EAAE,aAAa,4BAA4B,CAAC;AAAA,IAClD,EAAE,aAAa,oBAAoB;AAAA,EACpC,EAAE,SAAS;AACZ,CAAC,EAAE,SAAS,oBAAoB;AAIzB,IAAM,EAAE,SAAS,kBAAkB,QAAQ,QAAI,YAAAA,SAA+B;AAAA,EACpF;AAAA,EACA,aAAa,CAAC,UAAmB,GAAG;AAAA,EACpC,eAAe;AAChB,CAAC;AAKM,IAAM,EAAE,QAAQ,MAAM,IAAI,KAAK,IAAI;AAEnC,IAAM,UAAU;AAAA,EACtB,GAAG;AAAA,EACH,QAAQ,iBAAiB,OAAO,UAAU,SAAO,GAAkB;AACpE;","names":["createType"]}
// SHA256.ts
import { Crypto } from "@peculiar/webcrypto";
import createType from "@taqueria/protocol/Base";
import { E_TaqError } from "@taqueria/protocol/TaqError";
import { mapRej, promise } from "fluture";
import { TextEncoder } from "util";
import { z } from "zod";
var eager = (f) => promise(
  mapRej((err) => new E_TaqError(err))(f)
);
var rawSchema = z.string({ description: "SHA256" }).length(64);
var { schemas: generatedSchemas, factory } = createType({
  isStringLike: true,
  rawSchema,
  parseErrMsg: (value) => `${value} is an invalid SHA256 hash`,
  unknownErrMsg: (value) => `Something went wrong trying to parse the following as a SHA256 value, ${value}`
});
var toSHA256 = async (value) => {
  const encoder = new TextEncoder();
  const data = encoder.encode(value);
  const crypto = new Crypto();
  const hash = await crypto.subtle.digest("SHA-256", data);
  const hashArray = Array.from(new Uint8Array(hash));
  const hashHex = hashArray.map((b) => b.toString(16).padStart(2, "0")).join("");
  return eager(factory.make(hashHex));
};
var internalSchema = generatedSchemas.schema;
var { create, of, make } = factory;
var schemas = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
export {
  create,
  internalSchema,
  make,
  of,
  rawSchema,
  schemas,
  toSHA256
};
//# sourceMappingURL=SHA256.mjs.map
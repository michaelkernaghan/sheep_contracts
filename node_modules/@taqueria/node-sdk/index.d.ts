import * as _taqueria_protocol_Base from '@taqueria/protocol/Base';
import * as Environment from '@taqueria/protocol/Environment';
export { Environment };
import * as LoadedConfig from '@taqueria/protocol/LoadedConfig';
export { LoadedConfig };
import * as MetadataConfig from '@taqueria/protocol/MetadataConfig';
export { MetadataConfig };
import * as NetworkConfig from '@taqueria/protocol/NetworkConfig';
export { NetworkConfig };
import * as Operation from '@taqueria/protocol/Operation';
export { Operation };
import * as Option from '@taqueria/protocol/Option';
export { Option };
import * as PersistentState from '@taqueria/protocol/PersistentState';
export { PersistentState };
import * as PositionalArg from '@taqueria/protocol/PositionalArg';
export { PositionalArg };
import * as RequestArgs from '@taqueria/protocol/RequestArgs';
import * as SandboxAccountConfig from '@taqueria/protocol/SandboxAccountConfig';
export { SandboxAccountConfig };
import * as SandboxConfig from '@taqueria/protocol/SandboxConfig';
export { SandboxConfig };
import { TaqError } from '@taqueria/protocol/TaqError';
import * as Protocol from '@taqueria/protocol/taqueria-protocol-types';
export { Protocol };
import * as Task from '@taqueria/protocol/Task';
export { Task };
import * as Template from '@taqueria/protocol/Template';
export { Template };
import { ExecException } from 'child_process';
import { FutureInstance } from 'fluture';
import { LikeAPromise, StdIO, pluginDefiner } from './types.js';
import '@taqueria/protocol/i18n';
import '@taqueria/protocol/PluginSchema';
import '@taqueria/protocol/SanitizedAbsPath';
import '@taqueria/protocol/SanitizedPath';

declare const eager: <T>(f: FutureInstance<TaqError, T>) => Promise<T>;
declare const writeJsonFile: <T>(filename: string) => (data: T) => Promise<string>;
declare const readJsonFile: <T>(filename: string) => Promise<T>;
declare const execCmd: (cmd: string) => LikeAPromise<StdIO, ExecException>;
declare const execCommandWithoutWrapping: (cmd: string) => LikeAPromise<StdIO, ExecException>;
declare const getArch: () => LikeAPromise<'linux/arm64/v8' | 'linux/amd64', TaqError>;
declare const getFlextesaImage: (arch: 'linux/arm64/v8' | 'linux/amd64') => string;
declare const parseJSON: <T>(input: string) => LikeAPromise<T, TaqError>;
declare const sendRes: (msg: string, newline?: boolean) => void;
declare const sendAsyncRes: (msg: string, newline?: boolean) => Promise<void>;
declare const sendErr: (msg: string, newline?: boolean) => void;
declare const sendWarn: (msg: string, newline?: boolean) => void;
declare const sendAsyncErr: (msg: string, newline?: boolean) => Promise<never>;
declare const sendJson: (msg: unknown, newline?: boolean) => void;
declare const sendJsonErr: (msg: unknown, newline?: boolean) => void;
declare const sendAsyncJson: (msg: unknown, newline?: boolean) => Promise<void>;
declare const sendAsyncJsonErr: (msg: unknown, newline?: boolean) => Promise<never>;
declare const sendJsonRes: <T>(data: T) => void;
declare const sendAsyncJsonRes: <T>(data: T) => Promise<void>;
declare const noop: () => void;
/**
 * Gets the name of the current environment
 */
declare const getCurrentEnvironment: (parsedArgs: RequestArgs.t) => string;
/**
 * Gets the configuration for the current environment, if one is configured
 */
declare const getCurrentEnvironmentConfig: (parsedArgs: RequestArgs.t) => _taqueria_protocol_Base.Flatten<{
    storage?: Record<string, any> | undefined;
    aliases?: Record<string, any> | undefined;
    networks: string[];
    sandboxes: string[];
} & {
    readonly __kind: any;
}> | undefined;
/**
 * Gets the configuration for the project metadata
 */
declare const getMetadataConfig: (parsedArgs: RequestArgs.t) => () => ({
    name?: string | undefined;
    projectDescription?: string | undefined;
    authors?: string[] | undefined;
    license?: string | undefined;
    homepage?: string | undefined;
} & {
    readonly __kind: any;
}) | undefined;
/**
 * Gets the configuration for the named network
 */
declare const getNetworkConfig: (parsedArgs: RequestArgs.t) => (networkName: string) => _taqueria_protocol_Base.Flatten<{
    accounts?: Record<string, any> | undefined;
    faucet?: _taqueria_protocol_Base.Flatten<{
        email?: string | undefined;
        password?: string | undefined;
        amount?: string | undefined;
        activation_code?: string | undefined;
        mnemonic: string[];
        pkh: string & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }> | undefined;
    label: string & {
        readonly __kind: any;
    };
    rpcUrl: string & {
        readonly __kind: any;
    };
    protocol: string & {
        readonly __kind: any;
    };
} & {
    readonly __kind: any;
}> | undefined;
/**
 * Gets the configuration for the named sandbox
 */
declare const getSandboxConfig: (parsedArgs: RequestArgs.t) => (sandboxName: string) => Protocol.SandboxConfig.t | undefined;
/**
 * Gets the name of accounts for the given sandbox
 */
declare const getSandboxAccountNames: (parsedArgs: RequestArgs.t) => (sandboxName: string) => string[];
/**
 * Gets the account config for the named account of the given sandbox
 */
declare const getSandboxAccountConfig: (parsedArgs: RequestArgs.t) => (sandboxName: string) => (accountName: string) => ({
    encryptedKey: string;
    publicKeyHash: string & {
        readonly __kind: any;
    };
    secretKey: string;
} & {
    readonly __kind: any;
}) | undefined;
/**
 * Gets the initial storage for the contract. TODO: replace all calls to this function with newGetInitialStorage
 */
declare const getInitialStorage: (parsedArgs: RequestArgs.t, contractFilename: string) => Promise<string | undefined>;
/**
 * Gets the initial storage for the contract. TODO: replace all calls to this function with newGetInitialStorage
 */
declare const newGetInitialStorage: (parsedArgs: RequestArgs.t, storageFilename: string) => Promise<string | undefined>;
declare const getParameter: (parsedArgs: RequestArgs.t, paramFilename: string) => Promise<string>;
/**
 * Update the alias of an address for the current environment
 */
declare const updateAddressAlias: (parsedArgs: RequestArgs.t, alias: string, address: string) => Promise<void>;
declare const getAddressOfAlias: (env: Environment.t, alias: string) => Promise<string>;
declare const getAccountPrivateKey: (parsedArgs: RequestArgs.t, network: NetworkConfig.t, account: string) => Promise<string>;
/**
 * Gets the default account associated with a sandbox
 */
declare const getDefaultAccount: (parsedArgs: RequestArgs.t) => (sandboxName: string) => ({
    encryptedKey: string;
    publicKeyHash: string & {
        readonly __kind: any;
    };
    secretKey: string;
} & {
    readonly __kind: any;
}) | undefined;
declare const getContracts: (regex: RegExp, config: LoadedConfig.t) => string[];
declare const stringToSHA256: (s: string) => Promise<string & {
    readonly __kind: any;
}>;
declare const Plugin: {
    create: <Args extends {
        version?: boolean | undefined;
        build?: boolean | undefined;
        help?: boolean | undefined;
        yes?: boolean | undefined;
        plugin?: string | undefined;
        quickstart?: string | undefined;
        pluginName?: string | undefined;
        _: (string | number)[];
        projectDir: string & {
            readonly __kind: any;
        };
        maxConcurrency: number;
        debug: boolean;
        disableState: boolean;
        logPluginRequests: boolean;
        fromVsCode: boolean;
        env: string;
        setBuild: string;
        setVersion: string;
        taqRun: "pluginInfo" | "proxy" | "checkRuntimeDependencies" | "installRuntimeDependencies" | "proxyTemplate";
        config: _taqueria_protocol_Base.Flatten<{
            language?: "en" | "fr" | undefined;
            contracts?: Record<string, {
                sourceFile: string;
                hash: string & {
                    readonly __kind: any;
                };
            }> | undefined;
            network?: Record<string, _taqueria_protocol_Base.Flatten<{
                accounts?: Record<string, any> | undefined;
                faucet?: _taqueria_protocol_Base.Flatten<{
                    email?: string | undefined;
                    password?: string | undefined;
                    amount?: string | undefined;
                    activation_code?: string | undefined;
                    mnemonic: string[];
                    pkh: string & {
                        readonly __kind: any;
                    };
                } & {
                    readonly __kind: any;
                }> | undefined;
                label: string & {
                    readonly __kind: any;
                };
                rpcUrl: string & {
                    readonly __kind: any;
                };
                protocol: string & {
                    readonly __kind: any;
                };
            } & {
                readonly __kind: any;
            }>> | undefined;
            sandbox?: Record<string, {
                plugin?: (string & {
                    readonly __kind: any;
                }) | undefined;
                accounts?: Record<string, string | ({
                    encryptedKey: string;
                    publicKeyHash: string & {
                        readonly __kind: any;
                    };
                    secretKey: string;
                } & {
                    readonly __kind: any;
                })> | undefined;
                attributes?: Record<string, string | number | boolean> | undefined;
                tzkt?: {
                    disableAutostartWithSandbox: boolean;
                    postgresqlPort: number;
                    apiPort: number;
                } | undefined;
                label: string & {
                    readonly __kind: any;
                };
                rpcUrl: string & {
                    readonly __kind: any;
                };
                protocol: string & {
                    readonly __kind: any;
                };
            } & {
                readonly __kind: any;
            }> | undefined;
            environment?: Record<string, string | _taqueria_protocol_Base.Flatten<{
                storage?: Record<string, any> | undefined;
                aliases?: Record<string, any> | undefined;
                networks: string[];
                sandboxes: string[];
            } & {
                readonly __kind: any;
            }>> | undefined;
            metadata?: ({
                name?: string | undefined;
                projectDescription?: string | undefined;
                authors?: string[] | undefined;
                license?: string | undefined;
                homepage?: string | undefined;
            } & {
                readonly __kind: any;
            }) | undefined;
            projectDir: string & {
                readonly __kind: any;
            };
            plugins: ({
                type: "npm" | "binary" | "deno";
                name: string;
            } & {
                readonly __kind: any;
            })[];
            contractsDir: string;
            artifactsDir: string;
            hash: string & {
                readonly __kind: any;
            };
            accounts: Record<string, string | number>;
            configFile: string & {
                readonly __kind: any;
            };
        }> & {
            readonly __kind: any;
        };
    } & {
        readonly __kind: any;
    }>(definer: pluginDefiner, unparsedArgs: string[]) => Promise<any>;
};

declare const experimental: {
    registerContract: (parsedArgs: RequestArgs.t, sourceFile: string) => Promise<void>;
};

export { Plugin, eager, execCmd, execCommandWithoutWrapping, experimental, getAccountPrivateKey, getAddressOfAlias, getArch, getContracts, getCurrentEnvironment, getCurrentEnvironmentConfig, getDefaultAccount, getFlextesaImage, getInitialStorage, getMetadataConfig, getNetworkConfig, getParameter, getSandboxAccountConfig, getSandboxAccountNames, getSandboxConfig, newGetInitialStorage, noop, parseJSON, readJsonFile, sendAsyncErr, sendAsyncJson, sendAsyncJsonErr, sendAsyncJsonRes, sendAsyncRes, sendErr, sendJson, sendJsonErr, sendJsonRes, sendRes, sendWarn, stringToSHA256, updateAddressAlias, writeJsonFile };

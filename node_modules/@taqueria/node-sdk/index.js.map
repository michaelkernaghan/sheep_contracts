{"version":3,"sources":["index.ts","types.ts"],"sourcesContent":["import * as Config from '@taqueria/protocol/Config';\nimport * as Contract from '@taqueria/protocol/Contract';\nimport * as Environment from '@taqueria/protocol/Environment';\nimport type { i18n } from '@taqueria/protocol/i18n';\nimport load from '@taqueria/protocol/i18n';\nimport * as LoadedConfig from '@taqueria/protocol/LoadedConfig';\nimport * as MetadataConfig from '@taqueria/protocol/MetadataConfig';\nimport * as NetworkConfig from '@taqueria/protocol/NetworkConfig';\nimport * as Operation from '@taqueria/protocol/Operation';\nimport * as Option from '@taqueria/protocol/Option';\nimport * as PersistentState from '@taqueria/protocol/PersistentState';\nimport * as PluginInfo from '@taqueria/protocol/PluginInfo';\nimport * as PositionalArg from '@taqueria/protocol/PositionalArg';\nimport * as RequestArgs from '@taqueria/protocol/RequestArgs';\nimport * as SandboxAccountConfig from '@taqueria/protocol/SandboxAccountConfig';\nimport * as SandboxConfig from '@taqueria/protocol/SandboxConfig';\nimport * as SHA256 from '@taqueria/protocol/SHA256';\nimport { E_TaqError, toFutureParseErr, toFutureParseUnknownErr } from '@taqueria/protocol/TaqError';\nimport type { TaqError } from '@taqueria/protocol/TaqError';\nimport * as Protocol from '@taqueria/protocol/taqueria-protocol-types';\nimport * as Task from '@taqueria/protocol/Task';\nimport * as Template from '@taqueria/protocol/Template';\nimport { exec, ExecException } from 'child_process';\nimport { FutureInstance as Future, mapRej, promise } from 'fluture';\nimport { readFile, writeFile } from 'fs/promises';\nimport { dirname, join } from 'path';\nimport { getSync } from 'stacktrace-js';\nimport { ZodError } from 'zod';\nimport { PluginSchema } from './types';\nimport { LikeAPromise, pluginDefiner, StdIO } from './types';\n\nimport { importKey } from '@taquito/signer';\nimport { TezosToolkit } from '@taquito/taquito';\nimport { b58cencode, Prefix, prefix } from '@taquito/utils';\nimport crypto from 'crypto';\n\n// @ts-ignore interop issue. Maybe find a different library later\nimport { templateRawSchema } from '@taqueria/protocol/SanitizedArgs';\nimport fetch from 'node-fetch';\nimport generateName from 'project-name-generator';\nimport { parsed } from 'yargs';\n\n// To use esbuild with yargs, we can't use ESM: https://github.com/yargs/yargs/issues/1929\nconst yargs = require('yargs');\n\nexport const eager = <T>(f: Future<TaqError, T>) =>\n\tpromise(\n\t\tmapRej((err: TaqError) => new E_TaqError(err))(f),\n\t);\n\nexport const writeJsonFile = <T>(filename: string) =>\n\t(data: T): Promise<string> =>\n\t\twriteFile(filename, JSON.stringify(data, undefined, 4), { encoding: 'utf8' })\n\t\t\t.then(_ => filename);\n\nexport const readJsonFile = <T>(filename: string): Promise<T> =>\n\treadFile(filename, { encoding: 'utf-8' })\n\t\t.then(JSON.parse)\n\t\t.then(result => (result as T));\n\nexport const execCmd = (cmd: string): LikeAPromise<StdIO, ExecException> =>\n\tnew Promise((resolve, reject) => {\n\t\texec(`sh -c \"${cmd}\"`, (err, stdout, stderr) => {\n\t\t\tif (err) reject(err);\n\t\t\telse {\n\t\t\t\tresolve({\n\t\t\t\t\tstdout,\n\t\t\t\t\tstderr,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n\nexport const execCommandWithoutWrapping = (cmd: string): LikeAPromise<StdIO, ExecException> =>\n\tnew Promise((resolve, reject) => {\n\t\texec(cmd, (err, stdout, stderr) => {\n\t\t\tif (err) reject(err);\n\t\t\telse {\n\t\t\t\tresolve({\n\t\t\t\t\tstdout,\n\t\t\t\t\tstderr,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n\nexport const getArch = (): LikeAPromise<'linux/arm64/v8' | 'linux/amd64', TaqError> => {\n\tswitch (process.arch) {\n\t\tcase 'arm64':\n\t\t\treturn Promise.resolve('linux/arm64/v8');\n\t\t// @ts-ignore: x32 is valid for some versions of NodeJS\n\t\tcase 'x32':\n\t\tcase 'x64':\n\t\t\treturn Promise.resolve('linux/amd64');\n\t\tdefault:\n\t\t\treturn Promise.reject({\n\t\t\t\terrCode: 'E_INVALID_ARCH',\n\t\t\t\terrMsg: `We do not know how to handle the ${process.arch} architecture`,\n\t\t\t\tcontext: process.arch,\n\t\t\t});\n\t}\n};\n\nexport const getFlextesaImage = (arch: 'linux/arm64/v8' | 'linux/amd64'): string =>\n\tarch === 'linux/arm64/v8' ? 'oxheadalpha/flextesa:rc-20220915-arm64' : 'oxheadalpha/flextesa:20220715';\n\nexport const parseJSON = <T>(input: string): LikeAPromise<T, TaqError> =>\n\tnew Promise((resolve, reject) => {\n\t\ttry {\n\t\t\tconst json = JSON.parse(input);\n\t\t\tresolve(json);\n\t\t} catch (previous) {\n\t\t\tconst taqErr: TaqError = {\n\t\t\t\tkind: 'E_INVALID_JSON',\n\t\t\t\tmsg: `Invalid JSON: ${input}`,\n\t\t\t\tprevious,\n\t\t\t\tcontext: input,\n\t\t\t};\n\t\t\treturn reject(taqErr);\n\t\t}\n\t});\n\nexport const sendRes = (msg: string, newline = true) => {\n\tif (!msg || msg.length === 0) return;\n\treturn newline\n\t\t? console.log(msg)\n\t\t: process.stdout.write(msg) as unknown as void;\n};\n\nexport const sendAsyncRes = (msg: string, newline = true): Promise<void> => Promise.resolve(sendRes(msg, newline));\n\nexport const sendErr = (msg: string, newline = true) => {\n\tif (!msg || msg.length === 0) return;\n\treturn newline\n\t\t? console.error(msg)\n\t\t: process.stderr.write(msg) as unknown as void;\n};\n\nexport const sendWarn = (msg: string, newline = true) => {\n\tif (!msg || msg.length === 0) return;\n\treturn newline\n\t\t? console.warn(msg)\n\t\t: process.stderr.write(msg) as unknown as void;\n};\n\nexport const sendAsyncErr = (msg: string, newline = true) => Promise.reject(sendErr(msg, newline)); // should this be Promise.reject?\n\nexport const sendJson = (msg: unknown, newline = true) => sendRes(JSON.stringify(msg), newline);\n\nexport const sendJsonErr = (msg: unknown, newline = true) => sendErr(JSON.stringify(msg), newline);\n\nexport const sendAsyncJson = (msg: unknown, newline = true) => sendAsyncRes(JSON.stringify(msg), newline);\n\nexport const sendAsyncJsonErr = (msg: unknown, newline = true) => sendAsyncErr(JSON.stringify(msg), newline);\n\nexport const sendJsonRes = <T>(data: T) =>\n\ttypeof data === 'object'\n\t\t? sendJson({\n\t\t\tdata,\n\t\t\trender: 'table',\n\t\t})\n\t\t: sendJson({\n\t\t\tdata,\n\t\t\trender: 'string',\n\t\t});\n\nexport const sendAsyncJsonRes = <T>(data: T) => Promise.resolve(sendJsonRes(data));\n\nexport const noop = () => {};\n\nconst parseArgs = <T extends RequestArgs.t>(unparsedArgs: string[]): LikeAPromise<T, TaqError> => {\n\tif (unparsedArgs && Array.isArray(unparsedArgs) && unparsedArgs.length >= 2) {\n\t\ttry {\n\t\t\tconst preprocessedArgs = preprocessArgs(unparsedArgs);\n\t\t\tconst argv = yargs(preprocessedArgs.slice(2)).argv;\n\t\t\tconst postprocessedArgs = postprocessArgs(argv);\n\t\t\tconst requestArgs = RequestArgs.from(postprocessedArgs);\n\t\t\treturn Promise.resolve(requestArgs as T);\n\t\t} catch (previous) {\n\t\t\tif (previous instanceof ZodError) {\n\t\t\t\treturn eager(\n\t\t\t\t\ttoFutureParseErr<T>(previous, 'The plugin request arguments are invalid', unparsedArgs),\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn eager(\n\t\t\t\ttoFutureParseUnknownErr<T>(\n\t\t\t\t\tprevious,\n\t\t\t\t\t'There was a problem trying to parse the plugin request arguments',\n\t\t\t\t\tunparsedArgs,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\treturn Promise.reject('Invalid usage. If you were testing your plugin, did you remember to specify --taqRun?');\n};\n\n// A hack to protect all hex from being messed by yargs\nconst preprocessArgs = (args: string[]): string[] => {\n\treturn args.map(arg => /^0x[0-9a-fA-F]+$/.test(arg) ? '___' + arg + '___' : arg);\n};\n\n// A hack to protect all hex from being messed by yargs\nconst postprocessArgs = (args: string[]): Record<string, unknown> => {\n\tconst postprocessedArgs = Object.entries(args).map((\n\t\t[key, val],\n\t) => [\n\t\tkey,\n\t\ttypeof val === 'string' && /^___0x[0-9a-fA-F]+___$/.test(val)\n\t\t\t? val.slice(3, -3)\n\t\t\t: val,\n\t]);\n\n\tconst groupedArgs = postprocessedArgs.reduce(\n\t\t(acc, arg) => {\n\t\t\tconst key = arg[0];\n\t\t\tconst val = arg[1];\n\t\t\treturn { ...acc, [key]: val };\n\t\t},\n\t\t{},\n\t);\n\n\treturn groupedArgs;\n};\n\nconst parseSchema = <T extends RequestArgs.t>(\n\ti18n: i18n,\n\tdefiner: pluginDefiner,\n\tdefaultPluginName: string,\n\trequestArgs: T,\n): PluginSchema.t => {\n\tconst inputSchema: PluginSchema.RawPluginSchema = definer(requestArgs, i18n);\n\n\tconst { proxy } = inputSchema;\n\n\tconst pluginInfo = PluginSchema.create({\n\t\t...inputSchema,\n\t\tname: inputSchema.name ?? defaultPluginName,\n\t});\n\n\treturn {\n\t\t...pluginInfo,\n\t\tproxy,\n\t};\n};\n\nconst getResponse = <T extends RequestArgs.t>(definer: pluginDefiner, defaultPluginName: string) =>\n\tasync (requestArgs: T) => {\n\t\tconst { taqRun } = requestArgs;\n\t\tconst i18n = await load();\n\t\tconst schema = parseSchema(i18n, definer, defaultPluginName, requestArgs);\n\t\ttry {\n\t\t\tswitch (taqRun) {\n\t\t\t\tcase 'pluginInfo':\n\t\t\t\t\tconst output = {\n\t\t\t\t\t\t...schema,\n\t\t\t\t\t\ttemplates: schema.templates\n\t\t\t\t\t\t\t? schema.templates.map(\n\t\t\t\t\t\t\t\t(template: Template.t) => {\n\t\t\t\t\t\t\t\t\tconst handler = typeof template.handler === 'function' ? 'function' : template.handler;\n\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t...template,\n\t\t\t\t\t\t\t\t\t\thandler,\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t: [],\n\t\t\t\t\t\ttasks: schema.tasks\n\t\t\t\t\t\t\t? schema.tasks.map(\n\t\t\t\t\t\t\t\t(task: Task.t) => {\n\t\t\t\t\t\t\t\t\tconst handler = typeof task.handler === 'function' ? 'function' : task.handler;\n\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t...task,\n\t\t\t\t\t\t\t\t\t\thandler,\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t: [],\n\t\t\t\t\t\tproxy: schema.proxy ? true : false,\n\t\t\t\t\t\tcheckRuntimeDependencies: schema.checkRuntimeDependencies ? true : false,\n\t\t\t\t\t\tinstallRuntimeDependencies: schema.installRuntimeDependencies ? true : false,\n\t\t\t\t\t};\n\t\t\t\t\treturn sendAsyncJson(output);\n\t\t\t\tcase 'proxy':\n\t\t\t\t\tif (schema.proxy) {\n\t\t\t\t\t\tconst retval = schema.proxy(RequestArgs.createProxyRequestArgs(requestArgs));\n\t\t\t\t\t\tif (retval) return retval;\n\t\t\t\t\t\treturn Promise.reject({\n\t\t\t\t\t\t\terrCode: 'E_PROXY',\n\t\t\t\t\t\t\tmessage: \"The plugin's proxy method must return a promise.\",\n\t\t\t\t\t\t\tcontext: retval,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn Promise.reject({\n\t\t\t\t\t\terrCode: 'E_NOT_SUPPORTED',\n\t\t\t\t\t\tmessage: i18n.__('proxyNotSupported'),\n\t\t\t\t\t\tcontext: requestArgs,\n\t\t\t\t\t});\n\t\t\t\tcase 'proxyTemplate': {\n\t\t\t\t\tconst proxyArgs = RequestArgs.createProxyTemplateRequestArgs(requestArgs);\n\t\t\t\t\tconst template = schema.templates?.find(tmpl => tmpl.template === proxyArgs.template);\n\t\t\t\t\tif (template) {\n\t\t\t\t\t\tif (typeof template.handler === 'function') {\n\t\t\t\t\t\t\treturn template.handler(proxyArgs);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn Promise.reject({\n\t\t\t\t\t\t\terrCode: 'E_NOT_SUPPORTED',\n\t\t\t\t\t\t\tmessage: i18n.__('proxyNotSupported'),\n\t\t\t\t\t\t\tcontext: requestArgs,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn Promise.reject({\n\t\t\t\t\t\terrCode: 'E_INVALID_TEMPLATE',\n\t\t\t\t\t\tmessage: i18n.__('invalidTemplate'),\n\t\t\t\t\t\tcontext: requestArgs,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tcase 'checkRuntimeDependencies':\n\t\t\t\t\treturn sendAsyncJson(\n\t\t\t\t\t\tschema.checkRuntimeDependencies\n\t\t\t\t\t\t\t? schema.checkRuntimeDependencies(i18n, requestArgs)\n\t\t\t\t\t\t\t: Promise.resolve({ report: [] }),\n\t\t\t\t\t);\n\t\t\t\tcase 'installRuntimeDependencies':\n\t\t\t\t\treturn sendAsyncJson(\n\t\t\t\t\t\tschema.installRuntimeDependencies\n\t\t\t\t\t\t\t? schema.installRuntimeDependencies(i18n, requestArgs)\n\t\t\t\t\t\t\t: Promise.resolve({ report: [] }),\n\t\t\t\t\t);\n\t\t\t\tdefault:\n\t\t\t\t\treturn Promise.reject({\n\t\t\t\t\t\terrCode: 'E_NOT_SUPPORTED',\n\t\t\t\t\t\tmessage: i18n.__('actionNotSupported'),\n\t\t\t\t\t\tcontext: requestArgs,\n\t\t\t\t\t});\n\t\t\t}\n\t\t} catch (previous) {\n\t\t\treturn Promise.reject({\n\t\t\t\terrCode: 'E_UNEXPECTED',\n\t\t\t\tmessage: 'The plugin encountered a fatal error',\n\t\t\t\tprevious,\n\t\t\t});\n\t\t}\n\t};\n\nconst getNameFromPluginManifest = (packageJsonAbspath: string): string => {\n\ttry {\n\t\treturn `${require(packageJsonAbspath).name}`;\n\t} catch (_) {\n\t\treturn generateName().dashed;\n\t}\n};\n\n/**\n * Gets the name of the current environment\n */\nexport const getCurrentEnvironment = (parsedArgs: RequestArgs.t): string => {\n\treturn parsedArgs.env\n\t\t? (parsedArgs.env as string)\n\t\t: (\n\t\t\tparsedArgs.config.environment\n\t\t\t\t? parsedArgs.config.environment.default as string\n\t\t\t\t: 'development'\n\t\t);\n};\n\n/**\n * Gets the configuration for the current environment, if one is configured\n */\nexport const getCurrentEnvironmentConfig = (parsedArgs: RequestArgs.t) => {\n\tconst currentEnv = getCurrentEnvironment(parsedArgs);\n\n\treturn parsedArgs.config.environment && parsedArgs.config.environment[currentEnv]\n\t\t? parsedArgs.config.environment[currentEnv] as Protocol.Environment.t | undefined\n\t\t: undefined;\n};\n\n/**\n * Gets the configuration for the project metadata\n */\nexport const getMetadataConfig = (parsedArgs: RequestArgs.t) =>\n\t() => (parsedArgs.config.metadata ?? undefined) as Protocol.MetadataConfig.t | undefined;\n\n/**\n * Gets the configuration for the named network\n */\nexport const getNetworkConfig = (parsedArgs: RequestArgs.t) =>\n\t(networkName: string) =>\n\t\t(parsedArgs.config.network![networkName] ?? undefined) as Protocol.NetworkConfig.t | undefined;\n\n/**\n * Gets the configuration for the named sandbox\n */\nexport const getSandboxConfig = (parsedArgs: RequestArgs.t) =>\n\t(sandboxName: string): Protocol.SandboxConfig.t | undefined =>\n\t\t(parsedArgs.config.sandbox![sandboxName] ?? undefined) as Protocol.SandboxConfig.t | undefined;\n\n/**\n * Gets the name of accounts for the given sandbox\n */\nexport const getSandboxAccountNames = (parsedArgs: RequestArgs.t) =>\n\t(sandboxName: string) => {\n\t\tconst sandbox = getSandboxConfig(parsedArgs)(sandboxName);\n\n\t\treturn sandbox\n\t\t\t? Object.keys(sandbox.accounts ?? []).filter(accountName => accountName !== 'default')\n\t\t\t: [];\n\t};\n\n/**\n * Gets the account config for the named account of the given sandbox\n */\nexport const getSandboxAccountConfig = (parsedArgs: RequestArgs.t) =>\n\t(sandboxName: string) =>\n\t\t(accountName: string) => {\n\t\t\tconst sandbox = getSandboxConfig(parsedArgs)(sandboxName);\n\n\t\t\tif (sandbox && sandbox.accounts) {\n\t\t\t\tconst accounts = sandbox.accounts as Record<string, Protocol.SandboxAccountConfig.t>;\n\t\t\t\treturn accounts[accountName];\n\t\t\t}\n\t\t\treturn undefined;\n\t\t};\n\n/**\n * Gets the initial storage for the contract. TODO: replace all calls to this function with newGetInitialStorage\n */\nexport const getInitialStorage = async (parsedArgs: RequestArgs.t, contractFilename: string) => {\n\tconst env = getCurrentEnvironmentConfig(parsedArgs);\n\tif (env && env.storage && env.storage[contractFilename]) {\n\t\tconst storagePath: string = env.storage[contractFilename];\n\t\ttry {\n\t\t\tconst content = await readFile(storagePath, { encoding: 'utf-8' });\n\t\t\treturn content;\n\t\t} catch (err) {\n\t\t\tsendErr(`Could not read ${storagePath}. Maybe it doesn't exist.\\n`);\n\t\t\treturn undefined;\n\t\t}\n\t}\n\treturn undefined;\n};\n\n/**\n * Gets the initial storage for the contract. TODO: replace all calls to this function with newGetInitialStorage\n */\nexport const newGetInitialStorage = async (\n\tparsedArgs: RequestArgs.t,\n\tstorageFilename: string,\n): Promise<string | undefined> => {\n\tconst storagePath = join(parsedArgs.config.projectDir, parsedArgs.config.artifactsDir, storageFilename);\n\ttry {\n\t\tconst content = await readFile(storagePath, { encoding: 'utf-8' });\n\t\treturn content;\n\t} catch (err) {\n\t\tsendErr(`Could not read ${storagePath}. Maybe it doesn't exist.\\n`);\n\t\treturn undefined;\n\t}\n};\n\nexport const getParameter = async (parsedArgs: RequestArgs.t, paramFilename: string): Promise<string> => {\n\tconst paramPath = join(parsedArgs.config.projectDir, parsedArgs.config.artifactsDir, paramFilename);\n\ttry {\n\t\tconst content = await readFile(paramPath, { encoding: 'utf-8' });\n\t\treturn content;\n\t} catch (err) {\n\t\treturn sendAsyncErr(`Could not read ${paramPath}. Maybe it doesn't exist.`);\n\t}\n};\n\n/**\n * Update the alias of an address for the current environment\n */\nexport const updateAddressAlias = async (parsedArgs: RequestArgs.t, alias: string, address: string): Promise<void> => {\n\tconst env = getCurrentEnvironmentConfig(parsedArgs);\n\tif (!env) return;\n\tif (!env.aliases) {\n\t\tenv.aliases = { [alias]: { address } };\n\t} else if (!env.aliases[alias]) {\n\t\tenv.aliases[alias] = { address };\n\t} else {\n\t\tenv.aliases[alias].address = address;\n\t}\n\ttry {\n\t\tawait writeJsonFile('./.taq/config.json')(parsedArgs.config);\n\t} catch (err) {\n\t\tsendErr(`Could not write to ./.taq/config.json\\n`);\n\t}\n};\n\nexport const getAddressOfAlias = async (\n\tenv: Environment.t,\n\talias: string,\n): Promise<string> => {\n\tconst address = env.aliases?.[alias]?.address;\n\tif (!address) {\n\t\treturn sendAsyncErr(\n\t\t\t`Address for alias \"${alias}\" is not present in the config.json. Make sure to deploy a contract with such alias.`,\n\t\t);\n\t}\n\treturn address;\n};\n\nconst createAddress = async (network: NetworkConfig.t): Promise<TezosToolkit> => {\n\tconst tezos = new TezosToolkit(network.rpcUrl as string);\n\tconst keyBytes = Buffer.alloc(32);\n\tcrypto.randomFillSync(keyBytes);\n\tconst key = b58cencode(new Uint8Array(keyBytes), prefix[Prefix.P2SK]);\n\tawait importKey(tezos, key);\n\treturn tezos;\n};\n\n// Temporary solution before the environment refactor\nexport const getAccountPrivateKey = async (\n\tparsedArgs: RequestArgs.t,\n\tnetwork: NetworkConfig.t,\n\taccount: string,\n): Promise<string> => {\n\tif (!network.accounts) network.accounts = {};\n\tif (!network.accounts[account]) {\n\t\tconst tezos = await createAddress(network);\n\t\tconst publicKey = await tezos.signer.publicKey();\n\t\tconst publicKeyHash = await tezos.signer.publicKeyHash();\n\t\tconst privateKey = await tezos.signer.secretKey();\n\t\tif (!privateKey) return sendAsyncErr('The private key must exist after creating it');\n\t\tnetwork.accounts[account] = { publicKey, publicKeyHash, privateKey };\n\t\ttry {\n\t\t\tawait writeJsonFile('./.taq/config.json')(parsedArgs.config);\n\t\t} catch (err) {\n\t\t\treturn sendAsyncErr(`Could not write to ./.taq/config.json\\n`);\n\t\t}\n\t\treturn sendAsyncErr(\n\t\t\t`A keypair with public key hash ${\n\t\t\t\tnetwork.accounts[account].publicKeyHash\n\t\t\t} was generated for you.\\nTo fund this account:\\n1. Go to https://teztnets.xyz and click \"Faucet\" of the target testnet\\n2. Copy and paste the above key into the 'wallet address field\\n3. Request some Tez (Note that you might need to wait for a few seconds for the network to register the funds)`,\n\t\t);\n\t}\n\treturn network.accounts[account].privateKey;\n};\n\n/**\n * Gets the default account associated with a sandbox\n */\nexport const getDefaultAccount = (parsedArgs: RequestArgs.t) =>\n\t(sandboxName: string) => {\n\t\tconst sandboxConfig = getSandboxConfig(parsedArgs)(sandboxName);\n\t\tif (sandboxConfig) {\n\t\t\tconst accounts = sandboxConfig.accounts ?? {};\n\t\t\tconst defaultAccount = accounts['default'] as string | undefined;\n\t\t\tif (defaultAccount) {\n\t\t\t\treturn getSandboxAccountConfig(parsedArgs)(sandboxName)(defaultAccount);\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t};\n\nexport const getContracts = (regex: RegExp, config: LoadedConfig.t) => {\n\tif (!config.contracts) return [];\n\treturn Object.values(config.contracts).reduce(\n\t\t(retval: string[], contract) =>\n\t\t\tregex.test(contract.sourceFile)\n\t\t\t\t? [...retval, contract.sourceFile]\n\t\t\t\t: retval,\n\t\t[],\n\t);\n};\n\nconst joinPaths = (...paths: string[]): string => paths.join('/');\n\nconst newContract = async (sourceFile: string, parsedArgs: RequestArgs.t) => {\n\tconst contractPath = joinPaths(parsedArgs.projectDir, parsedArgs.config.contractsDir, sourceFile);\n\ttry {\n\t\tconst contents = await readFile(contractPath, { encoding: 'utf-8' });\n\t\tconst hash = await SHA256.toSHA256(contents);\n\t\treturn await eager(Contract.of({\n\t\t\tsourceFile,\n\t\t\thash,\n\t\t}));\n\t} catch (err) {\n\t\tawait Promise.reject(`Could not read ${contractPath}`);\n\t}\n};\n\nconst registerContract = async (parsedArgs: RequestArgs.t, sourceFile: string): Promise<void> => {\n\ttry {\n\t\tconst config = await readJsonFile<Config.t>(parsedArgs.config.configFile);\n\t\tif (config.contracts && config.contracts[sourceFile]) {\n\t\t\tawait sendAsyncErr(`${sourceFile} has already been registered`);\n\t\t} else {\n\t\t\tconst contract = await newContract(sourceFile, parsedArgs);\n\t\t\tconst contracts = config.contracts || {};\n\t\t\tconst updatedConfig = {\n\t\t\t\t...config,\n\t\t\t\tcontracts: {\n\t\t\t\t\t...contracts,\n\t\t\t\t\t...Object.fromEntries([[sourceFile, contract]]),\n\t\t\t\t},\n\t\t\t};\n\t\t\tawait writeJsonFile(parsedArgs.config.configFile)(updatedConfig);\n\t\t}\n\t} catch (err) {\n\t\tif (err) console.error('Error registering contract:', err);\n\t}\n};\n\nexport const stringToSHA256 = (s: string) => SHA256.toSHA256(s);\n\nconst getPackageName = () => {\n\tconst stack = getSync({\n\t\tfilter: (stackFrame => {\n\t\t\tconst filename = stackFrame.getFileName();\n\t\t\treturn !filename.includes('taqueria-sdk') && !filename.includes('@taqueria/node-sdk')\n\t\t\t\t&& !filename.includes('stacktrace-js');\n\t\t}),\n\t});\n\tconst frame = stack.shift();\n\tif (frame) {\n\t\tconst filename = frame.getFileName().replace(/^file:\\/\\//, '').replace(/^file:/, '');\n\t\tconst pluginManifest = join(dirname(filename), 'package.json');\n\t\treturn getNameFromPluginManifest(pluginManifest);\n\t}\n\treturn generateName().dashed;\n};\n\nexport const Plugin = {\n\tcreate: async <Args extends RequestArgs.t>(definer: pluginDefiner, unparsedArgs: string[]) => {\n\t\tconst packageName = getPackageName();\n\t\treturn parseArgs<Args>(unparsedArgs)\n\t\t\t.then(getResponse(definer, packageName))\n\t\t\t.catch((err: unknown) => {\n\t\t\t\tif (err) console.error(err);\n\t\t\t\tprocess.exit(1);\n\t\t\t});\n\t},\n};\n\nexport {\n\tEnvironment,\n\tLoadedConfig,\n\tMetadataConfig,\n\tNetworkConfig,\n\tOperation,\n\tOption,\n\tPersistentState,\n\tPositionalArg,\n\tProtocol,\n\tSandboxAccountConfig,\n\tSandboxConfig,\n\tTask,\n\tTemplate,\n};\n\nexport const experimental = {\n\tregisterContract,\n};\n","import * as Environment from '@taqueria/protocol/Environment';\nimport type { i18n } from '@taqueria/protocol/i18n';\nimport * as LoadedConfig from '@taqueria/protocol/LoadedConfig';\nimport * as MetadataConfig from '@taqueria/protocol/MetadataConfig';\nimport * as NetworkConfig from '@taqueria/protocol/NetworkConfig';\nimport * as Operation from '@taqueria/protocol/Operation';\nimport * as Option from '@taqueria/protocol/Option';\nimport * as PersistentState from '@taqueria/protocol/PersistentState';\nimport * as PluginInfo from '@taqueria/protocol/PluginInfo';\nimport * as PluginSchema from '@taqueria/protocol/PluginSchema';\nimport * as PositionalArg from '@taqueria/protocol/PositionalArg';\nimport * as RequestArgs from '@taqueria/protocol/RequestArgs';\nimport * as SandboxAccountConfig from '@taqueria/protocol/SandboxAccountConfig';\nimport * as SandboxConfig from '@taqueria/protocol/SandboxConfig';\nimport * as SanitizedAbsPath from '@taqueria/protocol/SanitizedAbsPath';\nimport * as SanitizedPath from '@taqueria/protocol/SanitizedPath';\nimport * as TaqError from '@taqueria/protocol/TaqError';\nimport * as Protocol from '@taqueria/protocol/taqueria-protocol-types';\nimport * as Task from '@taqueria/protocol/Task';\nimport * as Template from '@taqueria/protocol/Template';\nimport { P } from 'ts-pattern';\nimport { z } from 'zod';\nexport {\n\tEnvironment,\n\tLoadedConfig,\n\tMetadataConfig,\n\tNetworkConfig,\n\tOperation,\n\tOption,\n\tPersistentState,\n\tPluginSchema,\n\tPositionalArg,\n\tProtocol,\n\tRequestArgs,\n\tSandboxAccountConfig,\n\tSandboxConfig,\n\tSanitizedAbsPath,\n\tSanitizedPath,\n\tTaqError,\n\tTask,\n\tTemplate,\n};\n\nexport interface LikeAPromise<Success, TaqError> extends Promise<Success> {\n}\n\nexport type PositiveInt = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15;\n\nexport type i18nMessage = string | { message: string; numOfArguments: PositiveInt };\n\nexport interface StdIO {\n\tstdout: string;\n\tstderr: string;\n}\n\nexport type pluginDefiner = <T extends RequestArgs.t>(parsedArgs: T, i18n: i18n) => PluginSchema.RawPluginSchema;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,qBAAAA;AAAA,EAAA,oBAAAC;AAAA,EAAA,sBAAAC;AAAA,EAAA,qBAAAC;AAAA,EAAA,iBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,uBAAAC;AAAA,EAAA;AAAA,uBAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,4BAAAC;AAAA,EAAA,qBAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,eAA0B;AAC1B,IAAAZ,eAA6B;AAE7B,kBAAiB;AACjB,IAAAC,gBAA8B;AAC9B,IAAAC,kBAAgC;AAChC,IAAAC,iBAA+B;AAC/B,IAAAC,aAA2B;AAC3B,IAAAC,UAAwB;AACxB,IAAAC,mBAAiC;AAEjC,IAAAC,iBAA+B;AAC/B,IAAAM,eAA6B;AAC7B,IAAAJ,wBAAsC;AACtC,IAAAC,iBAA+B;AAC/B,aAAwB;AACxB,sBAAsE;AAEtE,IAAAF,YAA0B;AAC1B,IAAAG,QAAsB;AACtB,IAAAC,YAA0B;AAC1B,2BAAoC;AACpC,qBAA0D;AAC1D,sBAAoC;AACpC,kBAA8B;AAC9B,2BAAwB;AACxB,iBAAyB;;;AC3BzB,kBAA6B;AAE7B,mBAA8B;AAC9B,qBAAgC;AAChC,oBAA+B;AAC/B,gBAA2B;AAC3B,aAAwB;AACxB,sBAAiC;AAEjC,mBAA8B;AAC9B,oBAA+B;AAC/B,kBAA6B;AAC7B,2BAAsC;AACtC,oBAA+B;AAC/B,uBAAkC;AAClC,oBAA+B;AAC/B,eAA0B;AAC1B,eAA0B;AAC1B,WAAsB;AACtB,eAA0B;;;ADY1B,oBAA0B;AAC1B,qBAA6B;AAC7B,mBAA2C;AAC3C,oBAAmB;AAKnB,oCAAyB;AAIzB,IAAM,QAAQ,QAAQ;AAEf,IAAM,QAAQ,CAAI,UACxB;AAAA,MACC,uBAAO,CAAC,QAAkB,IAAI,2BAAW,GAAG,CAAC,EAAE,CAAC;AACjD;AAEM,IAAM,gBAAgB,CAAI,aAChC,CAAC,aACA,2BAAU,UAAU,KAAK,UAAU,MAAM,QAAW,CAAC,GAAG,EAAE,UAAU,OAAO,CAAC,EAC1E,KAAK,OAAK,QAAQ;AAEf,IAAM,eAAe,CAAI,iBAC/B,0BAAS,UAAU,EAAE,UAAU,QAAQ,CAAC,EACtC,KAAK,KAAK,KAAK,EACf,KAAK,YAAW,MAAY;AAExB,IAAM,UAAU,CAAC,QACvB,IAAI,QAAQ,CAAC,SAAS,WAAW;AAChC,iCAAK,UAAU,QAAQ,CAAC,KAAK,QAAQ,WAAW;AAC/C,QAAI;AAAK,aAAO,GAAG;AAAA,SACd;AACJ,cAAQ;AAAA,QACP;AAAA,QACA;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AACF,CAAC;AAEK,IAAM,6BAA6B,CAAC,QAC1C,IAAI,QAAQ,CAAC,SAAS,WAAW;AAChC,iCAAK,KAAK,CAAC,KAAK,QAAQ,WAAW;AAClC,QAAI;AAAK,aAAO,GAAG;AAAA,SACd;AACJ,cAAQ;AAAA,QACP;AAAA,QACA;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AACF,CAAC;AAEK,IAAM,UAAU,MAAgE;AACtF,UAAQ,QAAQ,MAAM;AAAA,IACrB,KAAK;AACJ,aAAO,QAAQ,QAAQ,gBAAgB;AAAA,IAExC,KAAK;AAAA,IACL,KAAK;AACJ,aAAO,QAAQ,QAAQ,aAAa;AAAA,IACrC;AACC,aAAO,QAAQ,OAAO;AAAA,QACrB,SAAS;AAAA,QACT,QAAQ,oCAAoC,QAAQ;AAAA,QACpD,SAAS,QAAQ;AAAA,MAClB,CAAC;AAAA,EACH;AACD;AAEO,IAAM,mBAAmB,CAAC,SAChC,SAAS,mBAAmB,2CAA2C;AAEjE,IAAM,YAAY,CAAI,UAC5B,IAAI,QAAQ,CAAC,SAAS,WAAW;AAChC,MAAI;AACH,UAAM,OAAO,KAAK,MAAM,KAAK;AAC7B,YAAQ,IAAI;AAAA,EACb,SAAS,UAAP;AACD,UAAM,SAAmB;AAAA,MACxB,MAAM;AAAA,MACN,KAAK,iBAAiB;AAAA,MACtB;AAAA,MACA,SAAS;AAAA,IACV;AACA,WAAO,OAAO,MAAM;AAAA,EACrB;AACD,CAAC;AAEK,IAAM,UAAU,CAAC,KAAa,UAAU,SAAS;AACvD,MAAI,CAAC,OAAO,IAAI,WAAW;AAAG;AAC9B,SAAO,UACJ,QAAQ,IAAI,GAAG,IACf,QAAQ,OAAO,MAAM,GAAG;AAC5B;AAEO,IAAM,eAAe,CAAC,KAAa,UAAU,SAAwB,QAAQ,QAAQ,QAAQ,KAAK,OAAO,CAAC;AAE1G,IAAM,UAAU,CAAC,KAAa,UAAU,SAAS;AACvD,MAAI,CAAC,OAAO,IAAI,WAAW;AAAG;AAC9B,SAAO,UACJ,QAAQ,MAAM,GAAG,IACjB,QAAQ,OAAO,MAAM,GAAG;AAC5B;AAEO,IAAM,WAAW,CAAC,KAAa,UAAU,SAAS;AACxD,MAAI,CAAC,OAAO,IAAI,WAAW;AAAG;AAC9B,SAAO,UACJ,QAAQ,KAAK,GAAG,IAChB,QAAQ,OAAO,MAAM,GAAG;AAC5B;AAEO,IAAM,eAAe,CAAC,KAAa,UAAU,SAAS,QAAQ,OAAO,QAAQ,KAAK,OAAO,CAAC;AAE1F,IAAM,WAAW,CAAC,KAAc,UAAU,SAAS,QAAQ,KAAK,UAAU,GAAG,GAAG,OAAO;AAEvF,IAAM,cAAc,CAAC,KAAc,UAAU,SAAS,QAAQ,KAAK,UAAU,GAAG,GAAG,OAAO;AAE1F,IAAM,gBAAgB,CAAC,KAAc,UAAU,SAAS,aAAa,KAAK,UAAU,GAAG,GAAG,OAAO;AAEjG,IAAM,mBAAmB,CAAC,KAAc,UAAU,SAAS,aAAa,KAAK,UAAU,GAAG,GAAG,OAAO;AAEpG,IAAM,cAAc,CAAI,SAC9B,OAAO,SAAS,WACb,SAAS;AAAA,EACV;AAAA,EACA,QAAQ;AACT,CAAC,IACC,SAAS;AAAA,EACV;AAAA,EACA,QAAQ;AACT,CAAC;AAEI,IAAM,mBAAmB,CAAI,SAAY,QAAQ,QAAQ,YAAY,IAAI,CAAC;AAE1E,IAAM,OAAO,MAAM;AAAC;AAE3B,IAAM,YAAY,CAA0B,iBAAsD;AACjG,MAAI,gBAAgB,MAAM,QAAQ,YAAY,KAAK,aAAa,UAAU,GAAG;AAC5E,QAAI;AACH,YAAM,mBAAmB,eAAe,YAAY;AACpD,YAAM,OAAO,MAAM,iBAAiB,MAAM,CAAC,CAAC,EAAE;AAC9C,YAAM,oBAAoB,gBAAgB,IAAI;AAC9C,YAAM,cAA0B,kBAAK,iBAAiB;AACtD,aAAO,QAAQ,QAAQ,WAAgB;AAAA,IACxC,SAAS,UAAP;AACD,UAAI,oBAAoB,qBAAU;AACjC,eAAO;AAAA,cACN,kCAAoB,UAAU,4CAA4C,YAAY;AAAA,QACvF;AAAA,MACD;AACA,aAAO;AAAA,YACN;AAAA,UACC;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACA,SAAO,QAAQ,OAAO,uFAAuF;AAC9G;AAGA,IAAM,iBAAiB,CAAC,SAA6B;AACpD,SAAO,KAAK,IAAI,SAAO,mBAAmB,KAAK,GAAG,IAAI,QAAQ,MAAM,QAAQ,GAAG;AAChF;AAGA,IAAM,kBAAkB,CAAC,SAA4C;AACpE,QAAM,oBAAoB,OAAO,QAAQ,IAAI,EAAE,IAAI,CAClD,CAAC,KAAK,GAAG,MACL;AAAA,IACJ;AAAA,IACA,OAAO,QAAQ,YAAY,yBAAyB,KAAK,GAAG,IACzD,IAAI,MAAM,GAAG,EAAE,IACf;AAAA,EACJ,CAAC;AAED,QAAM,cAAc,kBAAkB;AAAA,IACrC,CAAC,KAAK,QAAQ;AACb,YAAM,MAAM,IAAI;AAChB,YAAM,MAAM,IAAI;AAChB,aAAO,EAAE,GAAG,KAAK,CAAC,MAAM,IAAI;AAAA,IAC7B;AAAA,IACA,CAAC;AAAA,EACF;AAEA,SAAO;AACR;AAEA,IAAM,cAAc,CACnB,MACA,SACA,mBACA,gBACoB;AACpB,QAAM,cAA4C,QAAQ,aAAa,IAAI;AAE3E,QAAM,EAAE,MAAM,IAAI;AAElB,QAAM,aAAa,aAAa,OAAO;AAAA,IACtC,GAAG;AAAA,IACH,MAAM,YAAY,QAAQ;AAAA,EAC3B,CAAC;AAED,SAAO;AAAA,IACN,GAAG;AAAA,IACH;AAAA,EACD;AACD;AAEA,IAAM,cAAc,CAA0B,SAAwB,sBACrE,OAAO,gBAAmB;AAtP3B;AAuPE,QAAM,EAAE,OAAO,IAAI;AACnB,QAAM,OAAO,UAAM,YAAAE,SAAK;AACxB,QAAM,SAAS,YAAY,MAAM,SAAS,mBAAmB,WAAW;AACxE,MAAI;AACH,YAAQ,QAAQ;AAAA,MACf,KAAK;AACJ,cAAM,SAAS;AAAA,UACd,GAAG;AAAA,UACH,WAAW,OAAO,YACf,OAAO,UAAU;AAAA,YAClB,CAAC,aAAyB;AACzB,oBAAM,UAAU,OAAO,SAAS,YAAY,aAAa,aAAa,SAAS;AAC/E,qBAAO;AAAA,gBACN,GAAG;AAAA,gBACH;AAAA,cACD;AAAA,YACD;AAAA,UACD,IACE,CAAC;AAAA,UACJ,OAAO,OAAO,QACX,OAAO,MAAM;AAAA,YACd,CAAC,SAAiB;AACjB,oBAAM,UAAU,OAAO,KAAK,YAAY,aAAa,aAAa,KAAK;AACvE,qBAAO;AAAA,gBACN,GAAG;AAAA,gBACH;AAAA,cACD;AAAA,YACD;AAAA,UACD,IACE,CAAC;AAAA,UACJ,OAAO,OAAO,QAAQ,OAAO;AAAA,UAC7B,0BAA0B,OAAO,2BAA2B,OAAO;AAAA,UACnE,4BAA4B,OAAO,6BAA6B,OAAO;AAAA,QACxE;AACA,eAAO,cAAc,MAAM;AAAA,MAC5B,KAAK;AACJ,YAAI,OAAO,OAAO;AACjB,gBAAM,SAAS,OAAO,MAAkB,oCAAuB,WAAW,CAAC;AAC3E,cAAI;AAAQ,mBAAO;AACnB,iBAAO,QAAQ,OAAO;AAAA,YACrB,SAAS;AAAA,YACT,SAAS;AAAA,YACT,SAAS;AAAA,UACV,CAAC;AAAA,QACF;AACA,eAAO,QAAQ,OAAO;AAAA,UACrB,SAAS;AAAA,UACT,SAAS,KAAK,GAAG,mBAAmB;AAAA,UACpC,SAAS;AAAA,QACV,CAAC;AAAA,MACF,KAAK,iBAAiB;AACrB,cAAM,YAAwB,4CAA+B,WAAW;AACxE,cAAM,YAAW,YAAO,cAAP,mBAAkB,KAAK,UAAQ,KAAK,aAAa,UAAU;AAC5E,YAAI,UAAU;AACb,cAAI,OAAO,SAAS,YAAY,YAAY;AAC3C,mBAAO,SAAS,QAAQ,SAAS;AAAA,UAClC;AACA,iBAAO,QAAQ,OAAO;AAAA,YACrB,SAAS;AAAA,YACT,SAAS,KAAK,GAAG,mBAAmB;AAAA,YACpC,SAAS;AAAA,UACV,CAAC;AAAA,QACF;AACA,eAAO,QAAQ,OAAO;AAAA,UACrB,SAAS;AAAA,UACT,SAAS,KAAK,GAAG,iBAAiB;AAAA,UAClC,SAAS;AAAA,QACV,CAAC;AAAA,MACF;AAAA,MACA,KAAK;AACJ,eAAO;AAAA,UACN,OAAO,2BACJ,OAAO,yBAAyB,MAAM,WAAW,IACjD,QAAQ,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC;AAAA,QAClC;AAAA,MACD,KAAK;AACJ,eAAO;AAAA,UACN,OAAO,6BACJ,OAAO,2BAA2B,MAAM,WAAW,IACnD,QAAQ,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC;AAAA,QAClC;AAAA,MACD;AACC,eAAO,QAAQ,OAAO;AAAA,UACrB,SAAS;AAAA,UACT,SAAS,KAAK,GAAG,oBAAoB;AAAA,UACrC,SAAS;AAAA,QACV,CAAC;AAAA,IACH;AAAA,EACD,SAAS,UAAP;AACD,WAAO,QAAQ,OAAO;AAAA,MACrB,SAAS;AAAA,MACT,SAAS;AAAA,MACT;AAAA,IACD,CAAC;AAAA,EACF;AACD;AAED,IAAM,4BAA4B,CAAC,uBAAuC;AACzE,MAAI;AACH,WAAO,GAAG,QAAQ,oBAAoB;AAAA,EACvC,SAAS,GAAP;AACD,eAAO,8BAAAC,SAAa,EAAE;AAAA,EACvB;AACD;AAKO,IAAM,wBAAwB,CAAC,eAAsC;AAC3E,SAAO,WAAW,MACd,WAAW,MAEb,WAAW,OAAO,cACf,WAAW,OAAO,YAAY,UAC9B;AAEN;AAKO,IAAM,8BAA8B,CAAC,eAA8B;AACzE,QAAM,aAAa,sBAAsB,UAAU;AAEnD,SAAO,WAAW,OAAO,eAAe,WAAW,OAAO,YAAY,cACnE,WAAW,OAAO,YAAY,cAC9B;AACJ;AAKO,IAAM,oBAAoB,CAAC,eACjC,MAAO,WAAW,OAAO,YAAY;AAK/B,IAAM,mBAAmB,CAAC,eAChC,CAAC,gBACC,WAAW,OAAO,QAAS,gBAAgB;AAKvC,IAAM,mBAAmB,CAAC,eAChC,CAAC,gBACC,WAAW,OAAO,QAAS,gBAAgB;AAKvC,IAAM,yBAAyB,CAAC,eACtC,CAAC,gBAAwB;AACxB,QAAM,UAAU,iBAAiB,UAAU,EAAE,WAAW;AAExD,SAAO,UACJ,OAAO,KAAK,QAAQ,YAAY,CAAC,CAAC,EAAE,OAAO,iBAAe,gBAAgB,SAAS,IACnF,CAAC;AACL;AAKM,IAAM,0BAA0B,CAAC,eACvC,CAAC,gBACA,CAAC,gBAAwB;AACxB,QAAM,UAAU,iBAAiB,UAAU,EAAE,WAAW;AAExD,MAAI,WAAW,QAAQ,UAAU;AAChC,UAAM,WAAW,QAAQ;AACzB,WAAO,SAAS;AAAA,EACjB;AACA,SAAO;AACR;AAKK,IAAM,oBAAoB,OAAO,YAA2B,qBAA6B;AAC/F,QAAM,MAAM,4BAA4B,UAAU;AAClD,MAAI,OAAO,IAAI,WAAW,IAAI,QAAQ,mBAAmB;AACxD,UAAM,cAAsB,IAAI,QAAQ;AACxC,QAAI;AACH,YAAM,UAAU,UAAM,0BAAS,aAAa,EAAE,UAAU,QAAQ,CAAC;AACjE,aAAO;AAAA,IACR,SAAS,KAAP;AACD,cAAQ,kBAAkB;AAAA,CAAwC;AAClE,aAAO;AAAA,IACR;AAAA,EACD;AACA,SAAO;AACR;AAKO,IAAM,uBAAuB,OACnC,YACA,oBACiC;AACjC,QAAM,kBAAc,kBAAK,WAAW,OAAO,YAAY,WAAW,OAAO,cAAc,eAAe;AACtG,MAAI;AACH,UAAM,UAAU,UAAM,0BAAS,aAAa,EAAE,UAAU,QAAQ,CAAC;AACjE,WAAO;AAAA,EACR,SAAS,KAAP;AACD,YAAQ,kBAAkB;AAAA,CAAwC;AAClE,WAAO;AAAA,EACR;AACD;AAEO,IAAM,eAAe,OAAO,YAA2B,kBAA2C;AACxG,QAAM,gBAAY,kBAAK,WAAW,OAAO,YAAY,WAAW,OAAO,cAAc,aAAa;AAClG,MAAI;AACH,UAAM,UAAU,UAAM,0BAAS,WAAW,EAAE,UAAU,QAAQ,CAAC;AAC/D,WAAO;AAAA,EACR,SAAS,KAAP;AACD,WAAO,aAAa,kBAAkB,oCAAoC;AAAA,EAC3E;AACD;AAKO,IAAM,qBAAqB,OAAO,YAA2B,OAAe,YAAmC;AACrH,QAAM,MAAM,4BAA4B,UAAU;AAClD,MAAI,CAAC;AAAK;AACV,MAAI,CAAC,IAAI,SAAS;AACjB,QAAI,UAAU,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE;AAAA,EACtC,WAAW,CAAC,IAAI,QAAQ,QAAQ;AAC/B,QAAI,QAAQ,SAAS,EAAE,QAAQ;AAAA,EAChC,OAAO;AACN,QAAI,QAAQ,OAAO,UAAU;AAAA,EAC9B;AACA,MAAI;AACH,UAAM,cAAc,oBAAoB,EAAE,WAAW,MAAM;AAAA,EAC5D,SAAS,KAAP;AACD,YAAQ;AAAA,CAAyC;AAAA,EAClD;AACD;AAEO,IAAM,oBAAoB,OAChC,KACA,UACqB;AA3etB;AA4eC,QAAM,WAAU,eAAI,YAAJ,mBAAc,WAAd,mBAAsB;AACtC,MAAI,CAAC,SAAS;AACb,WAAO;AAAA,MACN,sBAAsB;AAAA,IACvB;AAAA,EACD;AACA,SAAO;AACR;AAEA,IAAM,gBAAgB,OAAO,YAAoD;AAChF,QAAM,QAAQ,IAAI,4BAAa,QAAQ,MAAgB;AACvD,QAAM,WAAW,OAAO,MAAM,EAAE;AAChC,gBAAAC,QAAO,eAAe,QAAQ;AAC9B,QAAM,UAAM,yBAAW,IAAI,WAAW,QAAQ,GAAG,oBAAO,oBAAO,KAAK;AACpE,YAAM,yBAAU,OAAO,GAAG;AAC1B,SAAO;AACR;AAGO,IAAM,uBAAuB,OACnC,YACA,SACA,YACqB;AACrB,MAAI,CAAC,QAAQ;AAAU,YAAQ,WAAW,CAAC;AAC3C,MAAI,CAAC,QAAQ,SAAS,UAAU;AAC/B,UAAM,QAAQ,MAAM,cAAc,OAAO;AACzC,UAAM,YAAY,MAAM,MAAM,OAAO,UAAU;AAC/C,UAAM,gBAAgB,MAAM,MAAM,OAAO,cAAc;AACvD,UAAM,aAAa,MAAM,MAAM,OAAO,UAAU;AAChD,QAAI,CAAC;AAAY,aAAO,aAAa,8CAA8C;AACnF,YAAQ,SAAS,WAAW,EAAE,WAAW,eAAe,WAAW;AACnE,QAAI;AACH,YAAM,cAAc,oBAAoB,EAAE,WAAW,MAAM;AAAA,IAC5D,SAAS,KAAP;AACD,aAAO,aAAa;AAAA,CAAyC;AAAA,IAC9D;AACA,WAAO;AAAA,MACN,kCACC,QAAQ,SAAS,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,IAE5B;AAAA,EACD;AACA,SAAO,QAAQ,SAAS,SAAS;AAClC;AAKO,IAAM,oBAAoB,CAAC,eACjC,CAAC,gBAAwB;AACxB,QAAM,gBAAgB,iBAAiB,UAAU,EAAE,WAAW;AAC9D,MAAI,eAAe;AAClB,UAAM,WAAW,cAAc,YAAY,CAAC;AAC5C,UAAM,iBAAiB,SAAS;AAChC,QAAI,gBAAgB;AACnB,aAAO,wBAAwB,UAAU,EAAE,WAAW,EAAE,cAAc;AAAA,IACvE;AAAA,EACD;AAEA,SAAO;AACR;AAEM,IAAM,eAAe,CAAC,OAAe,WAA2B;AACtE,MAAI,CAAC,OAAO;AAAW,WAAO,CAAC;AAC/B,SAAO,OAAO,OAAO,OAAO,SAAS,EAAE;AAAA,IACtC,CAAC,QAAkB,aAClB,MAAM,KAAK,SAAS,UAAU,IAC3B,CAAC,GAAG,QAAQ,SAAS,UAAU,IAC/B;AAAA,IACJ,CAAC;AAAA,EACF;AACD;AAEA,IAAM,YAAY,IAAI,UAA4B,MAAM,KAAK,GAAG;AAEhE,IAAM,cAAc,OAAO,YAAoB,eAA8B;AAC5E,QAAM,eAAe,UAAU,WAAW,YAAY,WAAW,OAAO,cAAc,UAAU;AAChG,MAAI;AACH,UAAM,WAAW,UAAM,0BAAS,cAAc,EAAE,UAAU,QAAQ,CAAC;AACnE,UAAM,OAAO,MAAa,gBAAS,QAAQ;AAC3C,WAAO,MAAM,MAAe,YAAG;AAAA,MAC9B;AAAA,MACA;AAAA,IACD,CAAC,CAAC;AAAA,EACH,SAAS,KAAP;AACD,UAAM,QAAQ,OAAO,kBAAkB,cAAc;AAAA,EACtD;AACD;AAEA,IAAM,mBAAmB,OAAO,YAA2B,eAAsC;AAChG,MAAI;AACH,UAAM,SAAS,MAAM,aAAuB,WAAW,OAAO,UAAU;AACxE,QAAI,OAAO,aAAa,OAAO,UAAU,aAAa;AACrD,YAAM,aAAa,GAAG,wCAAwC;AAAA,IAC/D,OAAO;AACN,YAAM,WAAW,MAAM,YAAY,YAAY,UAAU;AACzD,YAAM,YAAY,OAAO,aAAa,CAAC;AACvC,YAAM,gBAAgB;AAAA,QACrB,GAAG;AAAA,QACH,WAAW;AAAA,UACV,GAAG;AAAA,UACH,GAAG,OAAO,YAAY,CAAC,CAAC,YAAY,QAAQ,CAAC,CAAC;AAAA,QAC/C;AAAA,MACD;AACA,YAAM,cAAc,WAAW,OAAO,UAAU,EAAE,aAAa;AAAA,IAChE;AAAA,EACD,SAAS,KAAP;AACD,QAAI;AAAK,cAAQ,MAAM,+BAA+B,GAAG;AAAA,EAC1D;AACD;AAEO,IAAM,iBAAiB,CAAC,MAAqB,gBAAS,CAAC;AAE9D,IAAM,iBAAiB,MAAM;AAC5B,QAAM,YAAQ,8BAAQ;AAAA,IACrB,QAAS,gBAAc;AACtB,YAAM,WAAW,WAAW,YAAY;AACxC,aAAO,CAAC,SAAS,SAAS,cAAc,KAAK,CAAC,SAAS,SAAS,oBAAoB,KAChF,CAAC,SAAS,SAAS,eAAe;AAAA,IACvC;AAAA,EACD,CAAC;AACD,QAAM,QAAQ,MAAM,MAAM;AAC1B,MAAI,OAAO;AACV,UAAM,WAAW,MAAM,YAAY,EAAE,QAAQ,cAAc,EAAE,EAAE,QAAQ,UAAU,EAAE;AACnF,UAAM,qBAAiB,sBAAK,qBAAQ,QAAQ,GAAG,cAAc;AAC7D,WAAO,0BAA0B,cAAc;AAAA,EAChD;AACA,aAAO,8BAAAD,SAAa,EAAE;AACvB;AAEO,IAAM,SAAS;AAAA,EACrB,QAAQ,OAAmC,SAAwB,iBAA2B;AAC7F,UAAM,cAAc,eAAe;AACnC,WAAO,UAAgB,YAAY,EACjC,KAAK,YAAY,SAAS,WAAW,CAAC,EACtC,MAAM,CAAC,QAAiB;AACxB,UAAI;AAAK,gBAAQ,MAAM,GAAG;AAC1B,cAAQ,KAAK,CAAC;AAAA,IACf,CAAC;AAAA,EACH;AACD;AAkBO,IAAM,eAAe;AAAA,EAC3B;AACD;","names":["Environment","LoadedConfig","MetadataConfig","NetworkConfig","Operation","Option","PersistentState","PositionalArg","Protocol","SandboxAccountConfig","SandboxConfig","Task","Template","RequestArgs","load","generateName","crypto"]}